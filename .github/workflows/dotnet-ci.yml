# .github/workflows/dotnet-ci.yml
# Run UnitTests only and capture diagnostic logs so we can see why Veldrid-related copy/complaints still occur.
name: .NET CI (UnitTests â€“ diagnostic)

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  group: dotnet-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore UnitTests (diagnostic)
        run: |
          dotnet restore UnitTests/UnitTests.csproj --verbosity minimal

      - name: Build UnitTests (diagnostic)
        # produce detailed msbuild logs and a binary log (.binlog) we can download and inspect
        run: |
          dotnet build UnitTests/UnitTests.csproj --no-restore --configuration Release -v:detailed -clp:Summary -bl:build.UnitTests.binlog
        continue-on-error: true

      - name: Dump DisplayVeldridFlags messages (quick grep)
        # show only the diagnostic lines we added to Directory.Build.targets (if present)
        run: |
          echo "---- Begin searching for Veldrid flags / copy actions in build output ----"
          # The build stdout is printed above by the previous step; also attempt to show a small slice of the binlog as text if possible
          if [ -f build.UnitTests.binlog ]; then
            # msbuild/binlog requires msbuild or MSBuild.StructuredLogger to parse; try using 'strings' as a best-effort fallback
            echo "Binary build log exists: build.UnitTests.binlog (uploaded later)."
          fi
          # attempt to show lines printed from Directory.Build.targets (our Message tasks)
          # Build output above may be long; search the workflow run's logs for 'Veldrid flags for project' or 'PackageVeldrid'
          true

      - name: Run UnitTests (diagnostic)
        # Run tests with detailed verbosity and create trx results; continue-on-error so diagnostics get uploaded even if tests fail
        run: |
          dotnet test UnitTests/UnitTests.csproj --no-build --configuration Release --logger "trx;LogFileName=TestResults.trx" -v:detailed
        continue-on-error: true

      - name: Collect msbuild / test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-diagnostics
          path: |
            build.UnitTests.binlog
            UnitTests/TestResults/**/*.trx
            UnitTests/TestResults
            UnitTests/**/bin/**/Release/**/build.log

      - name: Print short guidance
        run: |
          echo "If the build still copies Veldrid files, please paste the 'Veldrid flags' messages from the build logs (look for the lines 'PackageVeldrid =', 'NoPackageVeldrid =', 'SkipVeldrid =', and Project Dir)."