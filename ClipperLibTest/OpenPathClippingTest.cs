using Clipper2Lib;
using geoWrangler;
using NUnit.Framework;

namespace ClipperLibTest;

public class OpenPathClippingTest
{
    public static void parallelLines()
    {
        Path64 a1 = Clipper.MakePath(new [] {10, 0, 20, 0});
        Path64 a2 = Clipper.MakePath(new [] {30, 0, 40, 0});
        Path64 a3 = Clipper.MakePath(new [] {50, 0, 60, 0});
        Path64 b1 = Clipper.MakePath(new [] {20, 30, 30, 30});
        Path64 b2 = Clipper.MakePath(new [] {40, 30, 50, 30});
        Path64 b3 = Clipper.MakePath(new [] {60, 30, 70, 30});

        Clipper64 c = new();
        c.AddOpenSubject(a1);
        c.AddOpenSubject(a2);
        c.AddOpenSubject(a3);
        c.AddOpenSubject(b1);
        c.AddOpenSubject(b2);
        c.AddOpenSubject(b3);

        Path64 bounds = Clipper.MakePath(new[] { -100, -100, 100, 100 });
        c.AddClip(bounds);
        
        Paths64 o = new();
        c.Execute(ClipType.Intersection, FillRule.EvenOdd, new Paths64(), o);

        Assert.AreEqual(1, o.Count);
        Assert.AreEqual(14, o[0].Count);
    }
    
    
    public static void complextest()
    {
        PathD clippingPath = Clipper.MakePath(new[]
        {
            15.00000, -35.00000,
            13.60000, -34.95000,
            12.22000, -34.81000,
            10.84000, -34.56000,
            9.49000, -34.23000,
            8.16000, -33.79000,
            6.87000, -33.27000,
            5.61000, -32.66000,
            4.40000, -31.96000,
            3.24000, -31.18000,
            2.14000, -30.32000,
            1.11000, -29.39000,
            0.14000, -28.38000,
            -0.76000, -27.31000,
            -1.58000, -26.18000,
            -2.32000, -25.00000,
            -2.98000, -23.77000,
            -3.54000, -22.49000,
            -4.02000, -21.18000,
            -4.41000, -19.84000,
            -4.70000, -18.47000,
            -4.89000, -17.09000,
            -5.00000, -15.00000,
            -5.00000, -15.00000,
            -4.98000, -13.60000,
            -4.93000, -12.22000,
            -4.84000, -10.84000,
            -4.71000, -9.49000,
            -4.55000, -8.16000,
            -4.35000, -6.87000,
            -4.13000, -5.61000,
            -3.86000, -4.40000,
            -3.57000, -3.24000,
            -3.25000, -2.14000,
            -2.81000, -0.86000,
            -2.33000, 0.32000,
            -1.81000, 1.38000,
            -1.15000, 2.49000,
            -0.45000, 3.41000,
            0.41000, 4.23000,
            1.43000, 4.81000,
            2.48000, 5.00000,
            3.64000, 4.97000,
            4.78000, 4.88000,
            5.98000, 4.70000,
            7.08000, 4.46000,
            8.20000, 4.10000,
            9.19000, 3.58000,
            9.91000, 2.74000,
            9.95000, 2.48000,
            9.95000, 1.37000,
            9.96000, 0.27000,
            9.98000, -0.05000,
            9.99000, -1.16000,
            10.00000, -2.32000,
            10.00000, -3.67500,
            10.00000, -5.03000,
            9.87000, -6.14000,
            9.49000, -7.21000,
            8.89000, -8.16000,
            8.08000, -8.95000,
            7.11000, -9.53000,
            6.04000, -9.89000,
            5.00000, -10.00000,
            3.88000, -10.13000,
            2.81000, -10.51000,
            1.85000, -11.11000,
            1.06000, -11.92000,
            0.47000, -12.89000,
            0.11000, -13.96000,
            0.00000, -15.00000,
            0.13000, -16.12000,
            0.51000, -17.19000,
            1.11000, -18.15000,
            1.92000, -18.94000,
            2.89000, -19.53000,
            3.96000, -19.89000,
            5.00000, -20.00000,
            6.12000, -20.13000,
            7.19000, -20.51000,
            8.15000, -21.11000,
            8.94000, -21.92000,
            9.53000, -22.89000,
            9.89000, -23.96000,
            10.00000, -25.00000,
            10.13000, -26.12000,
            10.51000, -27.19000,
            11.11000, -28.15000,
            11.92000, -28.94000,
            12.89000, -29.53000,
            13.96000, -29.89000,
            15.00000, -30.00000,
            16.12000, -29.87000,
            17.19000, -29.49000,
            18.15000, -28.89000,
            18.94000, -28.08000,
            19.53000, -27.11000,
            19.89000, -26.04000,
            20.00000, -25.00000,
            20.13000, -23.88000,
            20.51000, -22.81000,
            21.11000, -21.85000,
            21.92000, -21.06000,
            22.89000, -20.47000,
            23.96000, -20.11000,
            25.00000, -20.00000,
            26.12000, -19.87000,
            27.19000, -19.49000,
            28.15000, -18.89000,
            28.94000, -18.08000,
            29.53000, -17.11000,
            29.89000, -16.04000,
            30.00000, -15.00000,
            29.87000, -13.88000,
            29.49000, -12.81000,
            28.89000, -11.85000,
            28.08000, -11.06000,
            27.11000, -10.47000,
            26.04000, -10.11000,
            25.00000, -10.00000,
            23.88000, -9.87000,
            22.81000, -9.49000,
            21.85000, -8.89000,
            21.06000, -8.08000,
            20.47000, -7.11000,
            20.11000, -6.04000,
            20.00000, -5.00000,
            19.87000, -3.88000,
            19.50000, -2.81000,
            18.89000, -1.85000,
            18.09000, -1.06000,
            17.13000, -0.47000,
            16.06000, -0.11000,
            15.02000, 0.00000,
            13.91000, 0.06000,
            12.77000, 0.27000,
            11.70000, 0.64000,
            10.72000, 1.25000,
            10.09000, 2.20000,
            10.05000, 2.50000,
            10.80000, 3.36000,
            11.83000, 3.79000,
            12.97000, 4.11000,
            14.18000, 4.36000,
            15.37000, 4.55000,
            16.48000, 4.69000,
            17.65000, 4.80000,
            18.88000, 4.89000,
            20.14000, 4.95000,
            21.44000, 4.99000,
            22.52000, 5.00000,
            23.83000, 4.89000,
            24.91000, 4.63000,
            25.96000, 4.23000,
            27.00000, 3.67000,
            27.99000, 2.98000,
            28.95000, 2.14000,
            29.86000, 1.18000,
            30.71000, 0.09000,
            31.35000, -0.86000,
            31.94000, -1.88000,
            32.49000, -2.96000,
            32.99000, -4.11000,
            33.44000, -5.30000,
            33.83000, -6.55000,
            34.17000, -7.83000,
            34.45000, -9.15000,
            34.68000, -10.50000,
            34.85000, -11.87000,
            34.95000, -13.26000,
            35.00000, -14.65000,
            35.00000, -15.00000,
            34.95000, -16.40000,
            34.81000, -17.78000,
            34.56000, -19.16000,
            34.23000, -20.51000,
            33.79000, -21.84000,
            33.27000, -23.13000,
            32.66000, -24.39000,
            31.96000, -25.60000,
            31.18000, -26.76000,
            30.32000, -27.86000,
            29.39000, -28.89000,
            28.38000, -29.86000,
            27.31000, -30.76000,
            26.18000, -31.58000,
            25.00000, -32.32000,
            23.77000, -32.98000,
            22.49000, -33.54000,
            21.18000, -34.02000,
            19.84000, -34.41000,
            18.47000, -34.70000,
            17.09000, -34.89000,
            15.70000, -34.99000,
        });

        PathD cutMe = Clipper.MakePath(new[]
        {
            10.00000, -3.67500,
            40.00000, -3.67500,
        });

        ClipperD d = new(Constants.roundingDecimalPrecision);
        d.AddOpenSubject(cutMe);
        d.AddClip(clippingPath);
        PathsD out_ = new();
        PathsD unused = new();
        d.Execute(ClipType.Difference, FillRule.EvenOdd, unused, out_);
        
        Assert.AreEqual(1, out_.Count);
        Assert.AreEqual(14, out_[0].Count);
    }
    
    public static void test()
    {
        Path64 testPath = Clipper.MakePath(new[]
        {
            -50000, -550000,
            -50000, -150000,
            650000, -150000
        });
        
        Path64 b = Clipper.MakePath(new[]
        {
            300000,-800000,
            300000,0,
            500000,0,
            500000,-800000
        });
        
        Clipper64 c = new() {PreserveCollinear = true};
        c.AddOpenSubject(testPath);
        c.AddClip(b);
        Paths64 unused = new();
        Paths64 topChords = new();
        c.Execute(ClipType.Intersection, FillRule.EvenOdd, unused, topChords);

        Path64 testPath2 = Clipper.MakePath(new[]
        {
            650000,-150000,
            650000,-550000,
            -50000,-550000
        });
        
        c.Clear();
        c.AddOpenSubject(testPath2);
        c.AddClip(b);
        Paths64 bottomChords = new();
        c.Execute(ClipType.Intersection, FillRule.EvenOdd, unused, bottomChords);
        
        Path64 testPath3 = Clipper.MakePath(new[]
        {
            300000,-800000,
            300000,0
        });

        Path64 a = Clipper.MakePath(new[]
        {
            -50000, -550000,
            -50000, -150000,
            650000, -150000,
            650000, -550000
        });

        c.Clear();
        c.AddOpenSubject(testPath3);
        c.AddClip(a);
        Paths64 leftChords = new();
        c.Execute(ClipType.Intersection, FillRule.EvenOdd, unused, leftChords);

        Path64 testPath4 = Clipper.MakePath(new[]
        {
            300000,0,
            500000,0,
            500000,-800000,
            300000,-800000
        });

        c.Clear();
        c.AddOpenSubject(testPath4);
        c.AddClip(a);
        Paths64 rightChords = new();
        c.Execute(ClipType.Intersection, FillRule.EvenOdd, unused, rightChords);

        Assert.AreEqual(1, leftChords.Count);
        Assert.AreEqual(14, leftChords[0].Count);
        Assert.AreEqual(1, rightChords.Count);
        Assert.AreEqual(14, rightChords[0].Count);
        Assert.AreEqual(1, bottomChords.Count);
        Assert.AreEqual(14, bottomChords[0].Count);
        Assert.AreEqual(1, topChords.Count);
        Assert.AreEqual(14, topChords[0].Count);
    }
}