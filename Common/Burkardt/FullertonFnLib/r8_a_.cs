using System;

namespace Burkardt.FullertonFnLib;

public static partial class FullertonLib
{
    public static double r8_abs(double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ABS returns the absolute value of an R8.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 November 2006
        //
        //  Author:
        //
        //    John Burkardt
        //
        //  Parameters:
        //
        //    Input, double X, the quantity whose absolute value is desired.
        //
        //    Output, double R8_ABS, the absolute value of X.
        //
    {
        double value = x switch
        {
            >= 0.0 => x,
            _ => -x
        };

        return value;
    }

    public static double r8_acos(double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ACOS evaluates the arc-cosine of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    10 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_ACOS, the arc-cosine of X.
        //
    {
        const double pi2 = 1.57079632679489661923132169163975;
        double value = 0;
        r8ASINData data = new();

        value = pi2 - r8_asin(ref data, x);

        return value;
    }

    public static double r8_acosh(double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ACOSH evaluates the arc-hyperbolic cosine of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    04 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_ACOSH, the arc-hyperbolic cosine of X.
        //
    {
        const double dln2 = 0.69314718055994530941723212145818;
        double value = 0;
        double xmax = 0.0;

        xmax = xmax switch
        {
            0.0 => 1.0 / Math.Sqrt(r8_mach(3)),
            _ => xmax
        };

        switch (x)
        {
            case < 1.0:
                Console.WriteLine("");
                Console.WriteLine("R8_ACOSH - Fatal error!");
                Console.WriteLine("  X < 1.0");
                return 1;
        }

        if (x < xmax)
        {
            value = Math.Log(x + Math.Sqrt(x * x - 1.0));
        }
        else
        {
            value = dln2 + Math.Log(x);
        }

        return value;
    }

    public class r8ADMPData
    {
        public int nan20;
        public int nan21;
        public int nan22;
        public int naph0;
        public int naph1;
        public int naph2;
        public double xsml;
    }
        
    public static void r8_admp(ref r8ADMPData data, double x, ref double ampl, ref double phi )

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ADMP: modulus and phase of the derivative of the Airy function.
        //
        //  Description:
        //
        //    This function must only be called when X <= -1.0.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    10 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double &AMPL, &PHI, the modulus and phase of the 
        //    derivative of the Airy function.
        //
    {
        double[] an20cs = {
                0.0126732217145738027154610751034240,
                -0.0005212847072615621184780942309478,
                -0.0000052672111140370429809074052969,
                -0.0000001628202185026483752632460680,
                -0.0000000090991442687371386325973075,
                -0.0000000007438647126242192890685403,
                -0.0000000000795494751591469486122822,
                -0.0000000000104050944288303742803960,
                -0.0000000000015932425598414551523990,
                -0.0000000000002770648272341913946674,
                -0.0000000000000535342629237606295104,
                -0.0000000000000113061541781728314051,
                -0.0000000000000025772190078943167788,
                -0.0000000000000006278033116032485076,
                -0.0000000000000001621295400189939757,
                -0.0000000000000000440992985240675353,
                -0.0000000000000000125655516553258972,
                -0.0000000000000000037336906988015204,
                -0.0000000000000000011524626926724671,
                -0.0000000000000000003683081499099144,
                -0.0000000000000000001215206965331797,
                -0.0000000000000000000412916177724016,
                -0.0000000000000000000144177364239347,
                -0.0000000000000000000051631842875864,
                -0.0000000000000000000018931242668250,
                -0.0000000000000000000007096054668569,
                -0.0000000000000000000002715406646904,
                -0.0000000000000000000001059486979400,
                -0.0000000000000000000000421030035685,
                -0.0000000000000000000000170233781664,
                -0.0000000000000000000000069966677028,
                -0.0000000000000000000000029206643813,
                -0.0000000000000000000000012373128203,
                -0.0000000000000000000000005315871095,
                -0.0000000000000000000000002314622618,
                -0.0000000000000000000000001020779922,
                -0.0000000000000000000000000455706227,
                -0.0000000000000000000000000205831071,
                -0.0000000000000000000000000094015189,
                -0.0000000000000000000000000043405874,
                -0.0000000000000000000000000020247792,
                -0.0000000000000000000000000009539214,
                -0.0000000000000000000000000004537234,
                -0.0000000000000000000000000002178016,
                -0.0000000000000000000000000001054823,
                -0.0000000000000000000000000000515242,
                -0.0000000000000000000000000000253763,
                -0.0000000000000000000000000000125983,
                -0.0000000000000000000000000000063030,
                -0.0000000000000000000000000000031771,
                -0.0000000000000000000000000000016131,
                -0.0000000000000000000000000000008248,
                -0.0000000000000000000000000000004246,
                -0.0000000000000000000000000000002200,
                -0.0000000000000000000000000000001147,
                -0.0000000000000000000000000000000602,
                -0.0000000000000000000000000000000318
            }
            ;
        double[] an21cs = {
                0.0198313155263169394420342483165643,
                -0.0029376249067087533460593745594484,
                -0.0001136260695958195549872611137182,
                -0.0000100554451087156009750981645918,
                -0.0000013048787116563250421785598252,
                -0.0000002123881993150664830666079609,
                -0.0000000402270833384269040347850109,
                -0.0000000084996745953161799142201792,
                -0.0000000019514839426178614099532934,
                -0.0000000004783865343840384282992480,
                -0.0000000001236733992099450501137105,
                -0.0000000000334137486398754232219789,
                -0.0000000000093702823540766329897780,
                -0.0000000000027130128156139564687240,
                -0.0000000000008075953800583479535949,
                -0.0000000000002463214304700125252160,
                -0.0000000000000767655689109321564410,
                -0.0000000000000243882598807354919791,
                -0.0000000000000078831466358760308462,
                -0.0000000000000025882400995585864077,
                -0.0000000000000008619457862945690828,
                -0.0000000000000002907994739663128534,
                -0.0000000000000000992846796122890484,
                -0.0000000000000000342720229187774480,
                -0.0000000000000000119511048205515026,
                -0.0000000000000000042069729043678359,
                -0.0000000000000000014939697762818400,
                -0.0000000000000000005348981161589517,
                -0.0000000000000000001929877577826238,
                -0.0000000000000000000701313701018203,
                -0.0000000000000000000256585738509682,
                -0.0000000000000000000094475894562734,
                -0.0000000000000000000034996401941465,
                -0.0000000000000000000013037622466397,
                -0.0000000000000000000004883334163346,
                -0.0000000000000000000001838477586152,
                -0.0000000000000000000000695527324058,
                -0.0000000000000000000000264351910209,
                -0.0000000000000000000000100918094655,
                -0.0000000000000000000000038688924289,
                -0.0000000000000000000000014892036525,
                -0.0000000000000000000000005754342426,
                -0.0000000000000000000000002231725971,
                -0.0000000000000000000000000868607480,
                -0.0000000000000000000000000339220403,
                -0.0000000000000000000000000132910128,
                -0.0000000000000000000000000052239309,
                -0.0000000000000000000000000020594383,
                -0.0000000000000000000000000008142614,
                -0.0000000000000000000000000003228473,
                -0.0000000000000000000000000001283529,
                -0.0000000000000000000000000000511622,
                -0.0000000000000000000000000000204451,
                -0.0000000000000000000000000000081901,
                -0.0000000000000000000000000000032886,
                -0.0000000000000000000000000000013235,
                -0.0000000000000000000000000000005338,
                -0.0000000000000000000000000000002158,
                -0.0000000000000000000000000000000874,
                -0.0000000000000000000000000000000355
            }
            ;
        double[] an22cs = {
                0.0537418629629794329091103360917783,
                -0.0126661435859883193466312085036450,
                -0.0011924334106593006840848916913681,
                -0.0002032327627275654552687155176363,
                -0.0000446468963075163979516164905945,
                -0.0000113359036053123490416997893086,
                -0.0000031641352378546107356671355827,
                -0.0000009446708886148939120888532442,
                -0.0000002966562236471765527900905456,
                -0.0000000969118892024367799908661433,
                -0.0000000326822538653274091533072559,
                -0.0000000113144618963583865900447294,
                -0.0000000040042691001741501738278050,
                -0.0000000014440333683907423778522199,
                -0.0000000005292853746152611585663541,
                -0.0000000001967763373707889528245726,
                -0.0000000000740800095755849858816731,
                -0.0000000000282016314294661982842740,
                -0.0000000000108440066463128331337590,
                -0.0000000000042074800682644236920617,
                -0.0000000000016459149670634819724739,
                -0.0000000000006486826705121018896077,
                -0.0000000000002574095003354105832300,
                -0.0000000000001027889029407822132143,
                -0.0000000000000412845827195222720128,
                -0.0000000000000166711029332862509726,
                -0.0000000000000067656696165608023403,
                -0.0000000000000027585448232693576823,
                -0.0000000000000011296397915297168938,
                -0.0000000000000004644848225457314333,
                -0.0000000000000001917198035033912928,
                -0.0000000000000000794197570111893530,
                -0.0000000000000000330116492300368930,
                -0.0000000000000000137658057726549714,
                -0.0000000000000000057578093720012791,
                -0.0000000000000000024152700858632017,
                -0.0000000000000000010159301700933666,
                -0.0000000000000000004284434955330055,
                -0.0000000000000000001811344052168016,
                -0.0000000000000000000767602045619422,
                -0.0000000000000000000326026346758614,
                -0.0000000000000000000138773806682627,
                -0.0000000000000000000059191627103729,
                -0.0000000000000000000025297256431944,
                -0.0000000000000000000010832077293819,
                -0.0000000000000000000004646674880404,
                -0.0000000000000000000001996797783865,
                -0.0000000000000000000000859524108705,
                -0.0000000000000000000000370584152073,
                -0.0000000000000000000000160027503479,
                -0.0000000000000000000000069208124999,
                -0.0000000000000000000000029974448994,
                -0.0000000000000000000000013000356362,
                -0.0000000000000000000000005646100942,
                -0.0000000000000000000000002455341103,
                -0.0000000000000000000000001069119686,
                -0.0000000000000000000000000466095090,
                -0.0000000000000000000000000203441579,
                -0.0000000000000000000000000088900866,
                -0.0000000000000000000000000038891813,
                -0.0000000000000000000000000017032637,
                -0.0000000000000000000000000007467295,
                -0.0000000000000000000000000003277097,
                -0.0000000000000000000000000001439618,
                -0.0000000000000000000000000000633031,
                -0.0000000000000000000000000000278620,
                -0.0000000000000000000000000000122743,
                -0.0000000000000000000000000000054121,
                -0.0000000000000000000000000000023884,
                -0.0000000000000000000000000000010549,
                -0.0000000000000000000000000000004663,
                -0.0000000000000000000000000000002063,
                -0.0000000000000000000000000000000913,
                -0.0000000000000000000000000000000405
            }
            ;
        double[] aph0cs = {
                -0.0855849241130933256920124260179491,
                0.0011214378867065260735786722471124,
                0.0000042721029353664113951573742015,
                0.0000000817607381483243644018062323,
                0.0000000033907645000492724207816418,
                0.0000000002253264422619113939845276,
                0.0000000000206284209229015251256990,
                0.0000000000023858762828130887627258,
                0.0000000000003301618105886705480628,
                0.0000000000000527009648508328581123,
                0.0000000000000094555482203813492868,
                0.0000000000000018709426951344836908,
                0.0000000000000004023980041825392741,
                0.0000000000000000930192879258983167,
                0.0000000000000000229038635402379945,
                0.0000000000000000059634359822083386,
                0.0000000000000000016320279659403399,
                0.0000000000000000004671145658861339,
                0.0000000000000000001392334415363502,
                0.0000000000000000000430642670285155,
                0.0000000000000000000137781416318755,
                0.0000000000000000000045476710480396,
                0.0000000000000000000015448420203026,
                0.0000000000000000000005389770551212,
                0.0000000000000000000001927726737155,
                0.0000000000000000000000705659320166,
                0.0000000000000000000000263985084827,
                0.0000000000000000000000100791301805,
                0.0000000000000000000000039228928481,
                0.0000000000000000000000015547422955,
                0.0000000000000000000000006268306372,
                0.0000000000000000000000002568563962,
                0.0000000000000000000000001068858883,
                0.0000000000000000000000000451347253,
                0.0000000000000000000000000193267262,
                0.0000000000000000000000000083865369,
                0.0000000000000000000000000036857386,
                0.0000000000000000000000000016396202,
                0.0000000000000000000000000007379298,
                0.0000000000000000000000000003358392,
                0.0000000000000000000000000001544891,
                0.0000000000000000000000000000718013,
                0.0000000000000000000000000000337026,
                0.0000000000000000000000000000159710,
                0.0000000000000000000000000000076382,
                0.0000000000000000000000000000036855,
                0.0000000000000000000000000000017935,
                0.0000000000000000000000000000008800,
                0.0000000000000000000000000000004353,
                0.0000000000000000000000000000002170,
                0.0000000000000000000000000000001090,
                0.0000000000000000000000000000000551,
                0.0000000000000000000000000000000281
            }
            ;
        double[] aph1cs = {
                -0.1024172908077571694021123321813917,
                0.0071697275146591248047211649144704,
                0.0001209959363122328589813856491397,
                0.0000073361512841219912080297845684,
                0.0000007535382954271607069982903869,
                0.0000001041478171741301926885109155,
                0.0000000174358728518545691858907606,
                0.0000000033399795033346451660184961,
                0.0000000007073075174363527083399508,
                0.0000000001619187515189773266792272,
                0.0000000000394539981881954889879668,
                0.0000000000101192281734227133292631,
                0.0000000000027092778259520332198030,
                0.0000000000007523806418422548885854,
                0.0000000000002156368733008966357328,
                0.0000000000000635282777126068410174,
                0.0000000000000191756972641501729345,
                0.0000000000000059143072446464891558,
                0.0000000000000018597128517275028357,
                0.0000000000000005950444923946103668,
                0.0000000000000001934229956430180252,
                0.0000000000000000637843021489504324,
                0.0000000000000000213127290087312393,
                0.0000000000000000072081380656728500,
                0.0000000000000000024652494144769247,
                0.0000000000000000008519110570266154,
                0.0000000000000000002972384468491170,
                0.0000000000000000001046426648811446,
                0.0000000000000000000371493036347327,
                0.0000000000000000000132923247793472,
                0.0000000000000000000047912837925909,
                0.0000000000000000000017390619859336,
                0.0000000000000000000006353585173501,
                0.0000000000000000000002335643614263,
                0.0000000000000000000000863643881606,
                0.0000000000000000000000321123006944,
                0.0000000000000000000000120031540983,
                0.0000000000000000000000045091488699,
                0.0000000000000000000000017020228580,
                0.0000000000000000000000006453744630,
                0.0000000000000000000000002457788564,
                0.0000000000000000000000000939897684,
                0.0000000000000000000000000360863150,
                0.0000000000000000000000000139077884,
                0.0000000000000000000000000053797184,
                0.0000000000000000000000000020882551,
                0.0000000000000000000000000008133371,
                0.0000000000000000000000000003178080,
                0.0000000000000000000000000001245700,
                0.0000000000000000000000000000489742,
                0.0000000000000000000000000000193099,
                0.0000000000000000000000000000076349,
                0.0000000000000000000000000000030269,
                0.0000000000000000000000000000012032,
                0.0000000000000000000000000000004795,
                0.0000000000000000000000000000001915,
                0.0000000000000000000000000000000767,
                0.0000000000000000000000000000000308
            }
            ;
        double[] aph2cs = {
                -0.2057088719781465106973648665602125,
                0.0422196961357771921673114980369460,
                0.0020482560511207275042660577813334,
                0.0002607800735165005631187879922652,
                0.0000474824268004728875381750519293,
                0.0000105102756431611743473630026955,
                0.0000026353534014667945109314041983,
                0.0000007208824863499147299790783731,
                0.0000002103236664473352859749477082,
                0.0000000644975634555295598437362273,
                0.0000000205802377264368507978116888,
                0.0000000067836273920906428963513918,
                0.0000000022974015284009400168343792,
                0.0000000007961306765491187534883226,
                0.0000000002813860609741591719003632,
                0.0000000001011749056931973922841793,
                0.0000000000369306737952476559097060,
                0.0000000000136615066127098031778842,
                0.0000000000051142751416045045119388,
                0.0000000000019351688931706516247975,
                0.0000000000007393606916493224217271,
                0.0000000000002849792219222743597555,
                0.0000000000001107280782459648335733,
                0.0000000000000433412199370134633169,
                0.0000000000000170800825265670367471,
                0.0000000000000067733080195631114673,
                0.0000000000000027016904789262414108,
                0.0000000000000010834720751810782141,
                0.0000000000000004367060312970286167,
                0.0000000000000001768511738053366608,
                0.0000000000000000719359213093645717,
                0.0000000000000000293823610002933154,
                0.0000000000000000120482811525848357,
                0.0000000000000000049586659491091389,
                0.0000000000000000020479438315847217,
                0.0000000000000000008486019944410629,
                0.0000000000000000003527351765384506,
                0.0000000000000000001470563996804903,
                0.0000000000000000000614817826902188,
                0.0000000000000000000257737706565077,
                0.0000000000000000000108323903590042,
                0.0000000000000000000045638898024998,
                0.0000000000000000000019273635403662,
                0.0000000000000000000008157668569775,
                0.0000000000000000000003460202828346,
                0.0000000000000000000001470726482427,
                0.0000000000000000000000626356074088,
                0.0000000000000000000000267261292780,
                0.0000000000000000000000114246948763,
                0.0000000000000000000000048923460516,
                0.0000000000000000000000020985807810,
                0.0000000000000000000000009016618807,
                0.0000000000000000000000003880129464,
                0.0000000000000000000000001672282170,
                0.0000000000000000000000000721790800,
                0.0000000000000000000000000311982573,
                0.0000000000000000000000000135035015,
                0.0000000000000000000000000058524861,
                0.0000000000000000000000000025397686,
                0.0000000000000000000000000011035457,
                0.0000000000000000000000000004800788,
                0.0000000000000000000000000002090956,
                0.0000000000000000000000000000911743,
                0.0000000000000000000000000000397998,
                0.0000000000000000000000000000173923,
                0.0000000000000000000000000000076083,
                0.0000000000000000000000000000033316,
                0.0000000000000000000000000000014604,
                0.0000000000000000000000000000006407,
                0.0000000000000000000000000000002814,
                0.0000000000000000000000000000001237,
                0.0000000000000000000000000000000544
            }
            ;
        const double pi34 = 2.35619449019234492884698253745962716313;
        double z;

        switch (data.nan20)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nan20 = r8_inits(an20cs, 57, eta);
                data.nan21 = r8_inits(an21cs, 60, eta);
                data.nan22 = r8_inits(an22cs, 74, eta);
                data.naph0 = r8_inits(aph0cs, 53, eta);
                data.naph1 = r8_inits(aph1cs, 58, eta);
                data.naph2 = r8_inits(aph2cs, 72, eta);
                data.xsml = -r8_power(128.0 / r8_mach(3), 0.3333);
                break;
        }

        if (x < data.xsml)
        {
            z = 1.0;
            ampl = 0.3125 + r8_csevl(z, an20cs, data.nan20);
            phi = -0.625 + r8_csevl(z, aph0cs, data.naph0);
        }
        else
        {
            switch (x)
            {
                case < -4.0:
                    z = 128.0 / x / x / x + 1.0;
                    ampl = 0.3125 + r8_csevl(z, an20cs, data.nan20);
                    phi = -0.625 + r8_csevl(z, aph0cs, data.naph0);
                    break;
                case < -2.0:
                    z = (128.0 / x / x / x + 9.0 ) / 7.0;
                    ampl = 0.3125 + r8_csevl(z, an21cs, data.nan21);
                    phi = -0.625 + r8_csevl(z, aph1cs, data.naph1);
                    break;
                case <= -1.0:
                    z = (16.0 / x / x / x + 9.0) / 7.0;
                    ampl = 0.3125 + r8_csevl(z, an22cs, data.nan22);
                    phi = -0.625 + r8_csevl(z, aph2cs, data.naph2);
                    break;
                default:
                    Console.WriteLine("");
                    Console.WriteLine("R8_ADMP - Fatal error!");
                    Console.WriteLine("  - 1.0 < X.");
                    return;
            }
        }

        double sqrtx = Math.Sqrt(-x);
        ampl = Math.Sqrt(ampl * sqrtx);
        phi = pi34 - x * sqrtx * phi;
    }

    public class r8AIData
    {
        public int naif;
        public int naig;
        public double x3sml;
        public double xmax;

    }
    public static double r8_ai(ref r8AIData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_AI evaluates the Airy function Ai of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_AI, the Airy function Ai of X.
        //
    {
        double[] aifcs = {
                -0.37971358496669997496197089469414E-01,
                +0.59191888537263638574319728013777E-01,
                +0.98629280577279975365603891044060E-03,
                +0.68488438190765667554854830182412E-05,
                +0.25942025962194713019489279081403E-07,
                +0.61766127740813750329445749697236E-10,
                +0.10092454172466117901429556224601E-12,
                +0.12014792511179938141288033225333E-15,
                +0.10882945588716991878525295466666E-18,
                +0.77513772196684887039238400000000E-22,
                +0.44548112037175638391466666666666E-25,
                +0.21092845231692343466666666666666E-28,
                +0.83701735910741333333333333333333E-32
            }
            ;
        double[] aigcs = {
                +0.18152365581161273011556209957864E-01,
                +0.21572563166010755534030638819968E-01,
                +0.25678356987483249659052428090133E-03,
                +0.14265214119792403898829496921721E-05,
                +0.45721149200180426070434097558191E-08,
                +0.95251708435647098607392278840592E-11,
                +0.13925634605771399051150420686190E-13,
                +0.15070999142762379592306991138666E-16,
                +0.12559148312567778822703205333333E-19,
                +0.83063073770821340343829333333333E-23,
                +0.44657538493718567445333333333333E-26,
                +0.19900855034518869333333333333333E-29,
                +0.74702885256533333333333333333333E-33
            }
            ;
        double theta = 0;
        double value;
        double xm = 0;

        r8AIEData aiedata = new();
        r8AIMPData aimpdata = new();
            
        switch (data.naif)
        {
            case 0:
                data.naif = r8_inits(aifcs, 13, 0.1 * r8_mach(3));
                data.naig = r8_inits(aigcs, 13, 0.1 * r8_mach(3));
                data.x3sml = r8_power(r8_mach(3), 0.3334);
                data.xmax = r8_power(-1.5 * Math.Log(r8_mach(1)), 0.6667);
                data.xmax = data.xmax - data.xmax * Math.Log(data.xmax) /
                    (4.0 * data.xmax * Math.Sqrt(data.xmax) + 1.0) - 0.01;
                break;
        }

        switch (x)
        {
            case < -1.0:
                r8_aimp(ref aimpdata, x, ref xm, ref theta);
                value = xm * Math.Cos(theta);
                break;
            default:
            {
                double z;
                if (Math.Abs(x) <= data.x3sml)
                {
                    z = 0.0;
                    value = 0.375 + (r8_csevl(z, aifcs, data.naif)
                                     - x * (0.25 + r8_csevl(z, aigcs, data.naig)));
                }
                else
                {
                    switch (x)
                    {
                        case <= 1.0:
                            z = x * x * x;
                            value = 0.375 + (r8_csevl(z, aifcs, data.naif)
                                             - x * (0.25 + r8_csevl(z, aigcs, data.naig)));
                            break;
                        default:
                        {
                            if (x <= data.xmax)
                            {
                                value = r8_aie(ref aiedata, x) * Math.Exp(-2.0 * x * Math.Sqrt(x) / 3.0);
                            }
                            else
                            {
                                value = 0.0;
                            }

                            break;
                        }
                    }
                }

                break;
            }
        }

        return value;
    }

    public class r8AIDData
    {
        public int naif;
        public int naig;
        public double x2sml;
        public double x3sml;

    }
    public static double r8_aid(ref r8AIDData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_AID evaluates the derivative of the Airy function Ai of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_AID, the derivative of the Airy function 
        //    Ai of X.
        //
    {
        double[] aifcs = {
                0.105274612265314088088970057325134114,
                0.011836136281529978442889292583980840,
                0.000123281041732256643051689242469164,
                0.000000622612256381399016825658693579,
                0.000000001852988878441452950548140821,
                0.000000000003633288725904357915995625,
                0.000000000000005046217040440664768330,
                0.000000000000000005223816555471480985,
                0.000000000000000000004185745090748989,
                0.000000000000000000000002672887324883,
                0.000000000000000000000000001392128006,
                0.000000000000000000000000000000602653,
                0.000000000000000000000000000000000220
            }
            ;
        double[] aigcs = {
                0.0212338781509186668523122276848937,
                0.0863159303352144067524942809461604,
                0.0017975947203832313578033963225230,
                0.0000142654998755506932526620687495,
                0.0000000594379952836832010488787064,
                0.0000000001524033664794478945214786,
                0.0000000000002645876603490435305100,
                0.0000000000000003315624296815020591,
                0.0000000000000000003139789757594792,
                0.0000000000000000000002325767379040,
                0.0000000000000000000000001384384231,
                0.0000000000000000000000000000676629,
                0.0000000000000000000000000000000276
            }
            ;
        double phi = 0;
        double value;
        double xn = 0;

        r8ADMPData admpdata = new();
        r8AIDEData aidedata = new();

        switch (data.naif)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.naif = r8_inits(aifcs, 13, eta);
                data.naig = r8_inits(aigcs, 13, eta);
                data.x3sml = r8_power(r8_mach(3), 0.3334);
                data.x2sml = Math.Sqrt(r8_mach(3));
                break;
        }

        switch (x)
        {
            case < -1.0:
                r8_admp(ref admpdata, x, ref xn, ref phi);
                value = xn * Math.Cos(phi);
                break;
            default:
            {
                double x2;
                double x3;
                if (Math.Abs(x) <= data.x2sml)
                {
                    x2 = 0.0;
                    x3 = 0.0;
                    value = x2 * (0.125 + r8_csevl(x3, aifcs, data.naif))
                            - r8_csevl(x3, aigcs, data.naig) - 0.25;
                }
                else if (Math.Abs(x) <= data.x3sml)
                {
                    x2 = x * x;
                    x3 = 0.0;
                    value = x2 * (0.125 + r8_csevl(x3, aifcs, data.naif))
                            - r8_csevl(x3, aigcs, data.naig) - 0.25;
                }
                else
                {
                    switch (x)
                    {
                        case <= 1.0:
                            x2 = x * x;
                            x3 = x * x * x;
                            value = x2 * (0.125 + r8_csevl(x3, aifcs, data.naif))
                                    - r8_csevl(x3, aigcs, data.naig) - 0.25;
                            break;
                        default:
                            value = r8_aide(ref aidedata, x) * Math.Exp(-2.0 * x * Math.Sqrt(x) / 3.0);
                            break;
                    }
                }

                break;
            }
        }

        return value;
    }

    public class r8AIDEData
    {
        public int naif;
        public int naig;
        public int naip1;
        public int naip2;
        public double x2sml;
        public double x32sml;
        public double x3sml;
        public double xbig;

    }

    public static double r8_aide( ref r8AIDEData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_AIDE: exponentially scaled derivative, Airy function Ai of an R8 argument.
        //
        //  Discussion:
        //
        //    if X <= 0,
        //      R8_AIDE ( X ) = R8_AID ( X )
        //    else
        //      R8_AIDE ( X ) = R8_AID ( X ) * exp ( 2/3 * X^(3/2) )
        //
        //    Thanks to Aleksandra Piper for pointing out a correction involving 
        //    the computation of Z in the last two cases, 02 February 2012.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    02 February 2012
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_AIDE, the exponentially scaled derivative of 
        //    the Airy function Ai of X.
        //
    {
        double[] aifcs =  {
                0.105274612265314088088970057325134114,
                0.011836136281529978442889292583980840,
                0.000123281041732256643051689242469164,
                0.000000622612256381399016825658693579,
                0.000000001852988878441452950548140821,
                0.000000000003633288725904357915995625,
                0.000000000000005046217040440664768330,
                0.000000000000000005223816555471480985,
                0.000000000000000000004185745090748989,
                0.000000000000000000000002672887324883,
                0.000000000000000000000000001392128006,
                0.000000000000000000000000000000602653,
                0.000000000000000000000000000000000220
            }
            ;
        double[] aigcs =  {
                0.0212338781509186668523122276848937,
                0.0863159303352144067524942809461604,
                0.0017975947203832313578033963225230,
                0.0000142654998755506932526620687495,
                0.0000000594379952836832010488787064,
                0.0000000001524033664794478945214786,
                0.0000000000002645876603490435305100,
                0.0000000000000003315624296815020591,
                0.0000000000000000003139789757594792,
                0.0000000000000000000002325767379040,
                0.0000000000000000000000001384384231,
                0.0000000000000000000000000000676629,
                0.0000000000000000000000000000000276
            }
            ;
        double[] aip1cs =  {
                0.0358865097808301537956710489261688,
                0.0114668575627764898572700883121766,
                -0.0007592073583861400301335647601603,
                0.0000869517610893841271948619434021,
                -0.0000128237294298591691789607600486,
                0.0000022062695681038336934376250420,
                -0.0000004222295185920749486945988432,
                0.0000000874686415726348479356130376,
                -0.0000000192773588418365388625693417,
                0.0000000044668460054492719699777137,
                -0.0000000010790108051948168015747466,
                0.0000000002700029446696248083071434,
                -0.0000000000696480108007915257318929,
                0.0000000000184489907003246687076806,
                -0.0000000000050027817358071698301149,
                0.0000000000013852243366012168297298,
                -0.0000000000003908218466657048253473,
                0.0000000000001121536072524563451273,
                -0.0000000000000326861522579502522443,
                0.0000000000000096619179010090805752,
                -0.0000000000000028934767442698434271,
                0.0000000000000008770086661150897069,
                -0.0000000000000002688046261195853754,
                0.0000000000000000832498823872342992,
                -0.0000000000000000260343254786947057,
                0.0000000000000000082159528142686287,
                -0.0000000000000000026150406704984940,
                0.0000000000000000008390563463261051,
                -0.0000000000000000002712685618629660,
                0.0000000000000000000883333375271942,
                -0.0000000000000000000289603206822333,
                0.0000000000000000000095562185928676,
                -0.0000000000000000000031727463569051,
                0.0000000000000000000010595576960768,
                -0.0000000000000000000003558253765402,
                0.0000000000000000000001201334680517,
                -0.0000000000000000000000407666883800,
                0.0000000000000000000000139016944446,
                -0.0000000000000000000000047628165730,
                0.0000000000000000000000016391265551,
                -0.0000000000000000000000005665491354,
                0.0000000000000000000000001966381969,
                -0.0000000000000000000000000685230229,
                0.0000000000000000000000000239706939,
                -0.0000000000000000000000000084166831,
                0.0000000000000000000000000029659364,
                -0.0000000000000000000000000010487947,
                0.0000000000000000000000000003721150,
                -0.0000000000000000000000000001324570,
                0.0000000000000000000000000000472976,
                -0.0000000000000000000000000000169405,
                0.0000000000000000000000000000060855,
                -0.0000000000000000000000000000021924,
                0.0000000000000000000000000000007920,
                -0.0000000000000000000000000000002869,
                0.0000000000000000000000000000001042,
                -0.0000000000000000000000000000000379
            }
            ;
        double[] aip2cs =  {
                0.0065457691989713756794276979067064,
                0.0023833724120774591992772552886923,
                -0.0000430700770220585862775012110584,
                0.0000015629125858629202330785369063,
                -0.0000000815417186162706965112501015,
                0.0000000054103738056935918208008783,
                -0.0000000004284130882614696528766222,
                0.0000000000389497962832286424862198,
                -0.0000000000039623161264979257658071,
                0.0000000000004428184214405989602353,
                -0.0000000000000536296527150689675318,
                0.0000000000000069649872139936028200,
                -0.0000000000000009619636286095319210,
                0.0000000000000001403454967784808032,
                -0.0000000000000000215097136525875715,
                0.0000000000000000034471230632678283,
                -0.0000000000000000005753907621819442,
                0.0000000000000000000997001165824168,
                -0.0000000000000000000178811436021458,
                0.0000000000000000000033110307923551,
                -0.0000000000000000000006315885529506,
                0.0000000000000000000001238666952364,
                -0.0000000000000000000000249324053394,
                0.0000000000000000000000051426030999,
                -0.0000000000000000000000010854236402,
                0.0000000000000000000000002341316852,
                -0.0000000000000000000000000515542099,
                0.0000000000000000000000000115758841,
                -0.0000000000000000000000000026479669,
                0.0000000000000000000000000006165328,
                -0.0000000000000000000000000001459931,
                0.0000000000000000000000000000351331,
                -0.0000000000000000000000000000085863,
                0.0000000000000000000000000000021297,
                -0.0000000000000000000000000000005358,
                0.0000000000000000000000000000001367,
                -0.0000000000000000000000000000000353
            }
            ;
        double phi = 0;
        double value;
        double xn = 0;
        r8ADMPData admpdata = new();

        switch (data.naif)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.naif = r8_inits(aifcs, 13, eta);
                data.naig = r8_inits(aigcs, 13, eta);
                data.naip1 = r8_inits(aip1cs, 57, eta);
                data.naip2 = r8_inits(aip2cs, 37, eta);
                data.x2sml = Math.Sqrt(eta);
                data.x3sml = r8_power(eta, 0.3333);
                data.x32sml = 1.3104 * data.x3sml * data.x3sml;
                data.xbig = r8_power(r8_mach(2), 0.6666);
                break;
        }

        switch (x)
        {
            case < -1.0:
                r8_admp(ref admpdata, x, ref xn, ref phi);
                value = xn * Math.Cos(phi);
                break;
            default:
            {
                double x2;
                double x3;
                if (Math.Abs(x) < data.x2sml)
                {
                    x2 = 0.0;
                    x3 = 0.0;
                    value = x2 * (0.125 + r8_csevl(x3, aifcs, data.naif))
                            - r8_csevl(x3, aigcs, data.naig) - 0.25;
                    if (data.x32sml < x)
                    {
                        value *= Math.Exp(2.0 * x * Math.Sqrt(x) / 3.0);
                    }
                }
                else if (Math.Abs(x) < data.x3sml)
                {
                    x2 = x * x;
                    x3 = 0.0;
                    value = x2 * (0.125 + r8_csevl(x3, aifcs, data.naif))
                            - r8_csevl(x3, aigcs, data.naig) - 0.25;
                    if (data.x32sml < x)
                    {
                        value *= Math.Exp(2.0 * x * Math.Sqrt(x) / 3.0);
                    }
                }
                else
                {
                    double sqrtx;
                    double z;
                    switch (x)
                    {
                        case <= 1.0:
                        {
                            x2 = x * x;
                            x3 = x * x;
                            value = x2 * (0.125 + r8_csevl(x3, aifcs, data.naif))
                                    - r8_csevl(x3, aigcs, data.naig) - 0.25;
                            if (data.x32sml < x)
                            {
                                value *= Math.Exp(2.0 * x * Math.Sqrt(x) / 3.0);
                            }

                            break;
                        }
                        case <= 4.0:
                            sqrtx = Math.Sqrt(x);
                            z = (16.0 / (x * sqrtx) - 9.0) / 7.0;
                            value = (-0.28125 - r8_csevl(z, aip1cs, data.naip1)) * Math.Sqrt(sqrtx);
                            break;
                        default:
                        {
                            if (x < data.xbig)
                            {
                                sqrtx = Math.Sqrt(x);
                                z = 16.0 / (x * sqrtx) - 1.0;
                                value = (-0.28125 - r8_csevl(z, aip2cs, data.naip2)) * Math.Sqrt(sqrtx);
                            }
                            else
                            {
                                sqrtx = Math.Sqrt(x);
                                z = -1.0;
                                value = (-0.28125 - r8_csevl(z, aip2cs, data.naip2)) * Math.Sqrt(sqrtx);
                            }

                            break;
                        }
                    }
                }

                break;
            }
        }

        return value;
    }

    public class r8AIEData
    {
        public int naif;
        public int naig;
        public int naip1;
        public int naip2;
        public double x32sml;
        public double x3sml;
        public double xbig;

    }
    public static double r8_aie( ref r8AIEData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_AIE evaluates the exponentially scaled Airy function Ai of an R8 argument.
        //
        //  Discussion:
        //
        //    if X <= 0,
        //      R8_AIE ( X ) = R8_AI ( X )
        //    else
        //      R8_AIE ( X ) = R8_AI ( X ) * exp ( 2/3 * X^(3/2) )
        //
        //    Thanks to Aleksandra Piper for pointing out a correction involving a
        //    missing assignment to SQRTX, 27 January 2012.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    27 January 2012
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_AIE, the exponentially scaled Airy function Ai of X.
        //
    {
        double[] aifcs = {
                -0.37971358496669997496197089469414E-01,
                +0.59191888537263638574319728013777E-01,
                +0.98629280577279975365603891044060E-03,
                +0.68488438190765667554854830182412E-05,
                +0.25942025962194713019489279081403E-07,
                +0.61766127740813750329445749697236E-10,
                +0.10092454172466117901429556224601E-12,
                +0.12014792511179938141288033225333E-15,
                +0.10882945588716991878525295466666E-18,
                +0.77513772196684887039238400000000E-22,
                +0.44548112037175638391466666666666E-25,
                +0.21092845231692343466666666666666E-28,
                +0.83701735910741333333333333333333E-32
            }
            ;
        double[] aigcs = {
                +0.18152365581161273011556209957864E-01,
                +0.21572563166010755534030638819968E-01,
                +0.25678356987483249659052428090133E-03,
                +0.14265214119792403898829496921721E-05,
                +0.45721149200180426070434097558191E-08,
                +0.95251708435647098607392278840592E-11,
                +0.13925634605771399051150420686190E-13,
                +0.15070999142762379592306991138666E-16,
                +0.12559148312567778822703205333333E-19,
                +0.83063073770821340343829333333333E-23,
                +0.44657538493718567445333333333333E-26,
                +0.19900855034518869333333333333333E-29,
                +0.74702885256533333333333333333333E-33
            }
            ;
        double[] aip1cs = {
                -0.2146951858910538455460863467778E-01,
                -0.7535382535043301166219720865565E-02,
                +0.5971527949026380852035388881994E-03,
                -0.7283251254207610648502368291548E-04,
                +0.1110297130739299666517381821140E-04,
                -0.1950386152284405710346930314033E-05,
                +0.3786973885159515193885319670057E-06,
                -0.7929675297350978279039072879154E-07,
                +0.1762247638674256075568420122202E-07,
                -0.4110767539667195045029896593893E-08,
                +0.9984770057857892247183414107544E-09,
                -0.2510093251387122211349867730034E-09,
                +0.6500501929860695409272038601725E-10,
                -0.1727818405393616515478877107366E-10,
                +0.4699378842824512578362292872307E-11,
                -0.1304675656297743914491241246272E-11,
                +0.3689698478462678810473948382282E-12,
                -0.1061087206646806173650359679035E-12,
                +0.3098414384878187438660210070110E-13,
                -0.9174908079824139307833423547851E-14,
                +0.2752049140347210895693579062271E-14,
                -0.8353750115922046558091393301880E-15,
                +0.2563931129357934947568636168612E-15,
                -0.7950633762598854983273747289822E-16,
                +0.2489283634603069977437281175644E-16,
                -0.7864326933928735569664626221296E-17,
                +0.2505687311439975672324470645019E-17,
                -0.8047420364163909524537958682241E-18,
                +0.2604097118952053964443401104392E-18,
                -0.8486954164056412259482488834184E-19,
                +0.2784706882142337843359429186027E-19,
                -0.9195858953498612913687224151354E-20,
                +0.3055304318374238742247668225583E-20,
                -0.1021035455479477875902177048439E-20,
                +0.3431118190743757844000555680836E-21,
                -0.1159129341797749513376922463109E-21,
                +0.3935772844200255610836268229154E-22,
                -0.1342880980296717611956718989038E-22,
                +0.4603287883520002741659190305314E-23,
                -0.1585043927004064227810772499387E-23,
                +0.5481275667729675908925523755008E-24,
                -0.1903349371855047259064017948945E-24,
                +0.6635682302374008716777612115968E-25,
                -0.2322311650026314307975200986453E-25,
                +0.8157640113429179313142743695359E-26,
                -0.2875824240632900490057489929557E-26,
                +0.1017329450942901435079714319018E-26,
                -0.3610879108742216446575703490559E-27,
                +0.1285788540363993421256640342698E-27,
                -0.4592901037378547425160693022719E-28,
                +0.1645597033820713725812102485333E-28,
                -0.5913421299843501842087920271360E-29,
                +0.2131057006604993303479369509546E-29,
                -0.7701158157787598216982761745066E-30,
                +0.2790533307968930417581783777280E-30,
                -0.1013807715111284006452241367039E-30,
                +0.3692580158719624093658286216533E-31
            }
            ;
        double[] aip2cs = {
                -0.174314496929375513390355844011E-02,
                -0.167893854325541671632190613480E-02,
                +0.359653403352166035885983858114E-04,
                -0.138081860273922835457399383100E-05,
                +0.741122807731505298848699095233E-07,
                -0.500238203900133013130422866325E-08,
                +0.400693917417184240675446866355E-09,
                -0.367331242795905044199318496207E-10,
                +0.376034439592373852439592002918E-11,
                -0.422321332718747538026564938968E-12,
                +0.513509454033657070919618754120E-13,
                -0.669095850390477595651681356676E-14,
                +0.926667545641290648239550724382E-15,
                -0.135514382416070576333397356591E-15,
                +0.208115496312830995299006549335E-16,
                -0.334116499159176856871277570256E-17,
                +0.558578584585924316868032946585E-18,
                -0.969219040152365247518658209109E-19,
                +0.174045700128893206465696557738E-19,
                -0.322640979731130400247846333098E-20,
                +0.616074471106625258533259618986E-21,
                -0.120936347982490059076420676266E-21,
                +0.243632763310138108261570095786E-22,
                -0.502914221497457468943403144533E-23,
                +0.106224175543635689495470626133E-23,
                -0.229284284895989241509856324266E-24,
                +0.505181733929503744986884778666E-25,
                -0.113498123714412404979793920000E-25,
                +0.259765565985606980698374144000E-26,
                -0.605124621542939506172231679999E-27,
                +0.143359777966772800720295253333E-27,
                -0.345147757060899986280721066666E-28,
                +0.843875190213646740427025066666E-29,
                -0.209396142298188169434453333333E-29,
                +0.527008873478945503182848000000E-30,
                -0.134457433014553385789030399999E-30,
                +0.347570964526601147340117333333E-31
            }
            ;
        double theta = 0;
        double value;
        double xm = 0;
        double z;

        r8AIMPData aimpdata = new();

        switch (data.naif)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.naif = r8_inits(aifcs, 13, eta);
                data.naig = r8_inits(aigcs, 13, eta);
                data.naip1 = r8_inits(aip1cs, 57, eta);
                data.naip2 = r8_inits(aip2cs, 37, eta);
                data.x3sml = r8_power(eta, 0.3333);
                data.x32sml = 1.3104 * data.x3sml * data.x3sml;
                data.xbig = r8_power(r8_mach(2), 0.6666);
                break;
        }

        switch (x)
        {
            case < -1.0:
                r8_aimp(ref aimpdata, x, ref xm, ref theta);
                value = xm * Math.Cos(theta);
                break;
            case >= 0.0 when x <= data.x32sml:
                z = 0.0;
                value = 0.3750 + (r8_csevl(z, aifcs, data.naif)
                                  - x * (0.25 + r8_csevl(z, aigcs, data.naig)));
                break;
            default:
            {
                if (Math.Abs(x) <= data.x3sml)
                {
                    z = 0.0;
                    value = 0.3750 + (r8_csevl(z, aifcs, data.naif)
                                      - x * (0.25 + r8_csevl(z, aigcs, data.naig)));
                    value *= Math.Exp(2.0 * x * Math.Sqrt(x) / 3.0);
                }
                else
                {
                    double sqrtx;
                    switch (x)
                    {
                        case <= 1.0:
                            z = x * x * x;
                            value = 0.3750 + (r8_csevl(z, aifcs, data.naif)
                                              - x * (0.25 + r8_csevl(z, aigcs, data.naig)));
                            value *= Math.Exp(2.0 * x * Math.Sqrt(x) / 3.0);
                            break;
                        case <= 4.0:
                            sqrtx = Math.Sqrt(x);
                            z = (16.0 / (x * sqrtx) - 9.0) / 7.0;
                            value = (0.28125 + r8_csevl(z, aip1cs, data.naip1)) / Math.Sqrt(sqrtx);
                            break;
                        default:
                        {
                            if (x < data.xbig)
                            {
                                sqrtx = Math.Sqrt(x);
                                z = 16.0 / (x * sqrtx) - 1.0;
                                value = (0.28125 + r8_csevl(z, aip2cs, data.naip2)) / Math.Sqrt(sqrtx);
                            }
                            else
                            {
                                sqrtx = Math.Sqrt(x);
                                z = -1.0;
                                value = (0.28125 + r8_csevl(z, aip2cs, data.naip2)) / Math.Sqrt(sqrtx);
                            }

                            break;
                        }
                    }
                }

                break;
            }
        }

        return value;
    }

    public class r8AIMPData
    {
        public int nam20;
        public int nam21;
        public int nam22;
        public int nath0;
        public int nath1;
        public int nath2;
        public double xsml;

    }
        
    public static void r8_aimp(ref r8AIMPData data, double x, ref double ampl, ref double theta )

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_AIMP evaluates the modulus and phase of the Airy function.
        //
        //  Description:
        //
        //    This function must only be called when X <= -1.0.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double &AMPL, &PHI, the modulus and phase of the 
        //    Airy function.
        //
    {
        double[] am20cs = {
                +0.108716749086561856615730588125E-01,
                +0.369489228982663555091728665146E-03,
                +0.440680100484689563667507001327E-05,
                +0.143686762361911153929183952833E-06,
                +0.824275552390078308670628855353E-08,
                +0.684426758893661606173927278180E-09,
                +0.739566697282739287731004740213E-10,
                +0.974595633696825017638702600847E-11,
                +0.150076885829405775650973119497E-11,
                +0.262147910221527634206252854802E-12,
                +0.508354111376487180357278966914E-13,
                +0.107684753358811440492985997070E-13,
                +0.246091286618433429335914062617E-14,
                +0.600786380358656418436110373550E-15,
                +0.155449156102388071150651388384E-15,
                +0.423535125035576604426382780182E-16,
                +0.120862166289299840154401109189E-16,
                +0.359609651214658240861499706423E-17,
                +0.111134218386395638261774604677E-17,
                +0.355559532432366609893680289225E-18,
                +0.117433021600139309998766947387E-18,
                +0.399397454661077561389162200966E-19,
                +0.139576671528916310425606325640E-19,
                +0.500240055309236041393459280716E-20,
                +0.183552760958132679184834866457E-20,
                +0.688490998179202743197790112404E-21,
                +0.263631035611417012359996885105E-21,
                +0.102924890237338360287153563785E-21,
                +0.409246966671594885489762960571E-22,
                +0.165558573406734651039727903828E-22,
                +0.680797467063033356116599685727E-23,
                +0.284326559934079832419751134476E-23,
                +0.120507398348965255097287818819E-23,
                +0.517961243287505217976613610424E-24,
                +0.225622613427562816303268640887E-24,
                +0.995418801147745168832117078246E-25,
                +0.444551696397342424308280582053E-25,
                +0.200865195461501101425916097338E-25,
                +0.917786344151775165973885645402E-26,
                +0.423872958105589240661672197948E-26,
                +0.197789272007846092370846251490E-26,
                +0.932116351284620665680435253373E-27,
                +0.443482133249918099955611379722E-27,
                +0.212945672365573895594589552837E-27,
                +0.103158569651075977552209344907E-27,
                +0.504023773022591199157904590029E-28,
                +0.248301304570155945304046541005E-28,
                +0.123301783128562196054198238560E-28,
                +0.617033449920521746121976730507E-29,
                +0.311092617415918897233869792213E-29,
                +0.157983085201706173015269071503E-29,
                +0.807931987538283607678121339092E-30,
                +0.415997394138667562722951360052E-30,
                +0.215610934097716900471935862504E-30,
                +0.112468857265869178296752823613E-30,
                +0.590331560632838091123040811797E-31,
                +0.311735667692928562046280505333E-31
            }
            ;
        double[] am21cs = {
                +0.592790266721309588375717482814E-02,
                +0.200569405393165186428695217690E-02,
                +0.911081850262275893553072526291E-04,
                +0.849894306372047155633172107475E-05,
                +0.113297908976913076637929215494E-05,
                +0.187517946100666496180950627804E-06,
                +0.359306519018245832699035211192E-07,
                +0.765757714071683864039093517470E-08,
                +0.176999967168039173925953460744E-08,
                +0.436259555654598932720546585535E-09,
                +0.113291641337853230035520085219E-09,
                +0.307257690982419244137868398126E-10,
                +0.864482416482201075541200465766E-11,
                +0.251015250060924402115104562212E-11,
                +0.749102496764440371601802227751E-12,
                +0.228996928487994073089565214432E-12,
                +0.715113658927987694949327491175E-13,
                +0.227607924959566841946395165061E-13,
                +0.736942142760886513969953227782E-14,
                +0.242328675267827490463991742006E-14,
                +0.808153774548239869283406558403E-15,
                +0.273008079804356086659174563386E-15,
                +0.933236070891385318473519474326E-16,
                +0.322508099681084622213867546973E-16,
                +0.112581932346444541217757573416E-16,
                +0.396699463986938821660259459530E-17,
                +0.141006567944319504660865034527E-17,
                +0.505302086537851213375537393032E-18,
                +0.182461523215945141197999102789E-18,
                +0.663584568262130466928029121642E-19,
                +0.242963731631276179741747455826E-19,
                +0.895238915123687802013669922963E-20,
                +0.331845289350050791260229250755E-20,
                +0.123706196188658315384437905922E-20,
                +0.463636677012390840306767734243E-21,
                +0.174653135947764475469758765989E-21,
                +0.661116810234991176307910643111E-22,
                +0.251409918994072486176125666459E-22,
                +0.960274995571732568694034386998E-23,
                +0.368324952289296395686436898078E-23,
                +0.141843138269159136145535939553E-23,
                +0.548342674276935830106345800990E-24,
                +0.212761054623118806650372562616E-24,
                +0.828443700849418591487734760953E-25,
                +0.323670563926127001421028600927E-25,
                +0.126868882963286057355055062493E-25,
                +0.498843818992121626935068934362E-26,
                +0.196734584467649390967119381790E-26,
                +0.778135971020326957713212064836E-27,
                +0.308633941498911152919192968451E-27,
                +0.122744647045453119789338037234E-27,
                +0.489431279134292205885241216204E-28,
                +0.195646879802909821175925099724E-28,
                +0.783988952922426171166311492266E-29,
                +0.314896914002484223748298978099E-29,
                +0.126769763137250681307067842559E-29,
                +0.511470691906900141641632107724E-30,
                +0.206801709795538770250900316706E-30,
                +0.837891344768519001325996867583E-31,
                +0.340168991971489802052339079577E-31
            }
            ;
        double[] am22cs = {
                -0.156284448062534112753545828583E-01,
                +0.778336445239681307018943100334E-02,
                +0.867057770477189528406072812110E-03,
                +0.156966273156113719469953482266E-03,
                +0.356396257143286511324100666302E-04,
                +0.924598335425043154495080090994E-05,
                +0.262110161850422389523194982066E-05,
                +0.791882216516012561489469982263E-06,
                +0.251041527921011847803162690862E-06,
                +0.826522320665407734472997712940E-07,
                +0.280571166281305264396384290014E-07,
                +0.976821090484680786674631273890E-08,
                +0.347407923227710343287279035573E-08,
                +0.125828132169836914219092738164E-08,
                +0.462988260641895264497330784625E-09,
                +0.172728258813604072468143128696E-09,
                +0.652319200131154135148574124970E-10,
                +0.249047168520982056019881087112E-10,
                +0.960156820553765948078189890126E-11,
                +0.373448002067726856974776596757E-11,
                +0.146417565032053391722216189678E-11,
                +0.578265471168512825475827881553E-12,
                +0.229915407244706118560254184494E-12,
                +0.919780711231997257150883662365E-13,
                +0.370060068813090065807504045556E-13,
                +0.149675761698672987823326345205E-13,
                +0.608361194938461148720451399443E-14,
                +0.248404087115121397635425326873E-14,
                +0.101862476526769080727914465339E-14,
                +0.419383856352753989429640310957E-15,
                +0.173318901762930756149702493501E-15,
                +0.718821902388508517820445406811E-16,
                +0.299123633598403607712470896113E-16,
                +0.124868990433238627855713110880E-16,
                +0.522829344609483661928651193632E-17,
                +0.219532961724713396595998454359E-17,
                +0.924298325229777281154410024332E-18,
                +0.390157708236091407825543197309E-18,
                +0.165093892693863707213759030367E-18,
                +0.700221815715994367565716554487E-19,
                +0.297651833616786915573214963506E-19,
                +0.126796539086902072571134261229E-19,
                +0.541243400697077628687581725061E-20,
                +0.231487350218155252296382133283E-20,
                +0.991920288386566563462623851167E-21,
                +0.425803015323732357158897608174E-21,
                +0.183101842973024501678402003088E-21,
                +0.788678712311075375564526811022E-22,
                +0.340254607386229874956582997235E-22,
                +0.147020881405712530791860892535E-22,
                +0.636211018324916957733348071767E-23,
                +0.275707050680980721919395987768E-23,
                +0.119645858090104071356261780457E-23,
                +0.519912545729242147981768210567E-24,
                +0.226217674847104475260575286850E-24,
                +0.985526113754431819448565068283E-25,
                +0.429870630332508717223681286187E-25,
                +0.187723641661580639829657670189E-25,
                +0.820721941772842137268801052115E-26,
                +0.359214665604615507812767944463E-26,
                +0.157390594612773315611458940587E-26,
                +0.690329781039333834965319153586E-27,
                +0.303092079078968534607859331415E-27,
                +0.133204934160481219185689121944E-27,
                +0.585978836851523490117937981442E-28,
                +0.258016868489487806338425080457E-28,
                +0.113712433637283667223632182863E-28,
                +0.501592557226068509236430548549E-29,
                +0.221445829395509373322569708484E-29,
                +0.978470283886507289984691416411E-30,
                +0.432695414934180170112000952983E-30,
                +0.191497288193994570612929860440E-30,
                +0.848164622402392354171298331562E-31,
                +0.375947065173955919947455052934E-31
            }
            ;
        double[] ath0cs = {
                -0.8172601764161634499840208700543E-01,
                -0.8004012824788273287596481113068E-03,
                -0.3186525268782113203795553628242E-05,
                -0.6688388266477509330741698865033E-07,
                -0.2931759284994564516506822463184E-08,
                -0.2011263760883621669049030307186E-09,
                -0.1877522678055973426074008166652E-10,
                -0.2199637137704601251899002199848E-11,
                -0.3071616682592272449025746605586E-12,
                -0.4936140553673418361025600985389E-13,
                -0.8902833722583660416935236969866E-14,
                -0.1768987764615272613656814199467E-14,
                -0.3817868689032277014678199609600E-15,
                -0.8851159014819947594156286509984E-16,
                -0.2184818181414365953149677679568E-16,
                -0.5700849046986452380599442295119E-17,
                -0.1563121122177875392516031795495E-17,
                -0.4481437996768995067906688776353E-18,
                -0.1337794883736188022044566044098E-18,
                -0.4143340036874114453776852445442E-19,
                -0.1327263385718805025080481164652E-19,
                -0.4385728589128440522215756835955E-20,
                -0.1491360695952818067686201743956E-20,
                -0.5208104738630711377154238188773E-21,
                -0.1864382222390498923872526604979E-21,
                -0.6830263751167969012975435381881E-22,
                -0.2557117058029329629296207591347E-22,
                -0.9770158640254300218246907254046E-23,
                -0.3805161433416679084068428254886E-23,
                -0.1509022750737054063493926482995E-23,
                -0.6087551341242424929005568014525E-24,
                -0.2495879513809711495425982124058E-24,
                -0.1039157654581920948909588084274E-24,
                -0.4390235913976846536974594969051E-25,
                -0.1880790678447990211675826820582E-25,
                -0.8165070764199462948863022205753E-26,
                -0.3589944503749750514266435585041E-26,
                -0.1597658126632132872981291608708E-26,
                -0.7193250175703823969113802835305E-27,
                -0.3274943012727856506209351132721E-27,
                -0.1507042445783690665816975047272E-27,
                -0.7006624198319904717843967949140E-28,
                -0.3289907402983718226528815678356E-28,
                -0.1559518084365146526445322711496E-28,
                -0.7460690508208254582833851119721E-29,
                -0.3600877034824662020563277249431E-29,
                -0.1752851437473772257350402219197E-29,
                -0.8603275775188512909623778628724E-30,
                -0.4256432603226946534668039480105E-30,
                -0.2122161865044262927723650698206E-30,
                -0.1065996156704879052472060798561E-30,
                -0.5393568608816949116410688086892E-31,
                -0.2748174851043954822278496517870E-31
            }
            ;
        double[] ath1cs = {
                -0.6972849916208883845888148415037E-01,
                -0.5108722790650044987073448077961E-02,
                -0.8644335996989755094525334749512E-04,
                -0.5604720044235263542188698916125E-05,
                -0.6045735125623897409156376640077E-06,
                -0.8639802632488334393219721138499E-07,
                -0.1480809484309927157147782480780E-07,
                -0.2885809334577236039999449908712E-08,
                -0.6191631975665699609309191231800E-09,
                -0.1431992808860957830931365259879E-09,
                -0.3518141102137214721504616874321E-10,
                -0.9084761919955078290070339808051E-11,
                -0.2446171672688598449343283664767E-11,
                -0.6826083203213446240828996710264E-12,
                -0.1964579931194940171278546257802E-12,
                -0.5808933227139693164009191265856E-13,
                -0.1759042249527441992795400959024E-13,
                -0.5440902932714896613632538945319E-14,
                -0.1715247407486806802622358519451E-14,
                -0.5500929233576991546871101847161E-15,
                -0.1791878287739317259495152638754E-15,
                -0.5920372520086694197778411062231E-16,
                -0.1981713027876483962470972206590E-16,
                -0.6713232347016352262049984343790E-17,
                -0.2299450243658281116122358619832E-17,
                -0.7957300928236376595304637145634E-18,
                -0.2779994027291784157172290233739E-18,
                -0.9798924361326985224406795480814E-19,
                -0.3482717006061574386702645565849E-19,
                -0.1247489122558599057173300058084E-19,
                -0.4501210041478228113487751824452E-20,
                -0.1635346244013352135596114164667E-20,
                -0.5980102897780336268098762265941E-21,
                -0.2200246286286123454028196295475E-21,
                -0.8142463073515085897408205291519E-22,
                -0.3029924773660042537432330709674E-22,
                -0.1133390098574623537722943969689E-22,
                -0.4260766024749295719283049889791E-23,
                -0.1609363396278189718797500634453E-23,
                -0.6106377190825026293045330444287E-24,
                -0.2326954318021694061836577887573E-24,
                -0.8903987877472252604474129558186E-25,
                -0.3420558530005675024117914752341E-25,
                -0.1319026715257272659017212100607E-25,
                -0.5104899493612043091316191177386E-26,
                -0.1982599478474547451242444663466E-26,
                -0.7725702356880830535636111851519E-27,
                -0.3020234733664680100815776863573E-27,
                -0.1184379739074169993712946380800E-27,
                -0.4658430227922308520573252840106E-28,
                -0.1837554188100384647157502006613E-28,
                -0.7268566894427990953321876684800E-29,
                -0.2882863120391468135527089875626E-29,
                -0.1146374629459906350417591664639E-29,
                -0.4570031437748533058179991688533E-30,
                -0.1826276602045346104809934028799E-30,
                -0.7315349993385250469111066350933E-31,
                -0.2936925599971429781637815773866E-31
            }
            ;
        double[] ath2cs = {
                +0.4405273458718778997061127057775E-02,
                -0.3042919452318454608483844239873E-01,
                -0.1385653283771793791602692842653E-02,
                -0.1804443908954952302670486910952E-03,
                -0.3380847108327308671057465323618E-04,
                -0.7678183535229023055257676817765E-05,
                -0.1967839443716035324690935417077E-05,
                -0.5483727115877700361586143659281E-06,
                -0.1625461550532612452712696212258E-06,
                -0.5053049981268895015277637842078E-07,
                -0.1631580701124066881183851715617E-07,
                -0.5434204112348517507963436694817E-08,
                -0.1857398556409900325763850109630E-08,
                -0.6489512033326108816213513640676E-09,
                -0.2310594885800944720482995987079E-09,
                -0.8363282183204411682819329546745E-10,
                -0.3071196844890191462660661303891E-10,
                -0.1142367142432716819409514579892E-10,
                -0.4298116066345803065822470108971E-11,
                -0.1633898699596715440601646086632E-11,
                -0.6269328620016619432123443754076E-12,
                -0.2426052694816257357356159203991E-12,
                -0.9461198321624039090742527765052E-13,
                -0.3716060313411504806847798281269E-13,
                -0.1469155684097526763170138810309E-13,
                -0.5843694726140911944556401363094E-14,
                -0.2337502595591951298832675034934E-14,
                -0.9399231371171435401160167358411E-15,
                -0.3798014669372894500076335263715E-15,
                -0.1541731043984972524883443681775E-15,
                -0.6285287079535307162925662365202E-16,
                -0.2572731812811455424755383992774E-16,
                -0.1057098119354017809340974866555E-16,
                -0.4359080267402696966695992699964E-17,
                -0.1803634315959978013953176945540E-17,
                -0.7486838064380536821719431676914E-18,
                -0.3117261367347604656799597209985E-18,
                -0.1301687980927700734792871620696E-18,
                -0.5450527587519522468973883909909E-19,
                -0.2288293490114231872268635931903E-19,
                -0.9631059503829538655655060440088E-20,
                -0.4063281001524614089092195416434E-20,
                -0.1718203980908026763900413858510E-20,
                -0.7281574619892536367415322473328E-21,
                -0.3092352652680643127960680345790E-21,
                -0.1315917855965440490383417023254E-21,
                -0.5610606786087055512664907412668E-22,
                -0.2396621894086355206020304337895E-22,
                -0.1025574332390581200832954423924E-22,
                -0.4396264138143656476403607323663E-23,
                -0.1887652998372577373342508719450E-23,
                -0.8118140359576807603579433230445E-24,
                -0.3496734274366286856375952089214E-24,
                -0.1508402925156873215171751475867E-24,
                -0.6516268284778671059787773834341E-25,
                -0.2818945797529207424505942114583E-25,
                -0.1221127596512262744598094464505E-25,
                -0.5296674341169867168620011705073E-26,
                -0.2300359270773673431358870971744E-26,
                -0.1000279482355367494781220348930E-26,
                -0.4354760404180879394806893162179E-27,
                -0.1898056134741477522515482827030E-27,
                -0.8282111868712974697554009309315E-28,
                -0.3617815493066569006586213484374E-28,
                -0.1582018896178003654858941843636E-28,
                -0.6925068597802270011772820383247E-29,
                -0.3034390239778629128908629727335E-29,
                -0.1330889568166725224761977446509E-29,
                -0.5842848522173090120487606971706E-30,
                -0.2567488423238302631121274357678E-30,
                -0.1129232322268882185791505819151E-30,
                -0.4970947029753336916550570105023E-31
            }
            ;
        const double pi4 = 0.78539816339744830961566084581988;
        double z;

        switch (data.nam20)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nam20 = r8_inits(am20cs, 57, eta);
                data.nath0 = r8_inits(ath0cs, 53, eta);
                data.nam21 = r8_inits(am21cs, 60, eta);
                data.nath1 = r8_inits(ath1cs, 58, eta);
                data.nam22 = r8_inits(am22cs, 74, eta);
                data.nath2 = r8_inits(ath2cs, 72, eta);
                data.xsml = -r8_power(128.0 / r8_mach(3), 0.3333);
                break;
        }

        if (x <= data.xsml)
        {
            z = 1.0;
            ampl = 0.3125 + r8_csevl(z, am20cs, data.nam20);
            theta = -0.625 + r8_csevl(z, ath0cs, data.nath0);
        }
        else
        {
            switch (x)
            {
                case < -4.0:
                    z = 128.0 / x / x / x + 1.0;
                    ampl = 0.3125 + r8_csevl(z, am20cs, data.nam20);
                    theta = -0.625 + r8_csevl(z, ath0cs, data.nath0);
                    break;
                case < -2.0:
                    z = (128.0 / x / x / x + 9.0) / 7.0;
                    ampl = 0.3125 + r8_csevl(z, am21cs, data.nam21);
                    theta = -0.625 + r8_csevl(z, ath1cs, data.nath1);
                    break;
                case <= -1.0:
                    z = (16.0 / x / x / x + 9.0) / 7.0;
                    ampl = 0.3125 + r8_csevl(z, am22cs, data.nam22);
                    theta = -0.625 + r8_csevl(z, ath2cs, data.nath2);
                    break;
                default:
                    Console.WriteLine("");
                    Console.WriteLine("R8_AIMP - Fatal error!");
                    Console.WriteLine("  -1.0 < X.");
                    return;
            }
        }

        double sqrtx = Math.Sqrt(-x);
        ampl = Math.Sqrt(ampl / sqrtx);
        theta = pi4 - x * sqrtx * theta;
    }

    public static double r8_aint(double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_AINT truncates an R8 argument to an integer.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    1 September 2011
        //
        //  Author:
        //
        //    John Burkardt.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_AINT, the truncated version of X.
        //
    {
        double value = x switch
        {
            < 0.0E+00 => -(double) (int) Math.Abs(x),
            _ => Math.Abs(x)
        };

        return value;
    }

    public class r8ASINData
    {
        public int nterms;
        public double sqeps;

    }
        
    public static double r8_asin(ref r8ASINData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ASIN evaluates the arc-sine of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    10 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_ASIN, the arc-sine of X.
        //
    {
        double[] asincs = {
                +0.10246391753227159336573148305785E+00,
                +0.54946487221245833306011195902924E-01,
                +0.40806303925449692851307056149246E-02,
                +0.40789006854604435455598823905612E-03,
                +0.46985367432203691616048530136218E-04,
                +0.58809758139708058986454385552074E-05,
                +0.77732312462777632750557528163795E-06,
                +0.10677423340082039235047504956587E-06,
                +0.15092399536022808262386434401064E-07,
                +0.21809724080055385496609614713930E-08,
                +0.32075984262789614433261959667376E-09,
                +0.47855369646781034461493133918953E-10,
                +0.72251287362910432263848754537112E-11,
                +0.11018334742255783705372701334987E-11,
                +0.16947632539203354877423745651078E-12,
                +0.26261558667348224162283241502416E-13,
                +0.40958299813281178408828069291110E-14,
                +0.64244793108803655891727944887091E-15,
                +0.10128142198228221693973361222041E-15,
                +0.16039221897380787560050597464746E-16,
                +0.25503501355807141715298789676373E-17,
                +0.40701403797862382855487165672106E-18,
                +0.65172671712881144437889267575466E-19,
                +0.10467453037096796954244891716266E-19,
                +0.16858725563380328094989095185066E-20,
                +0.27221936305040227625164341247999E-21,
                +0.44059293900347550617126830079999E-22,
                +0.71466685243375937853063168000000E-23,
                +0.11615793343859516051798971733333E-23,
                +0.18915234552354685801184187733333E-24,
                +0.30855772044244342399827968000000E-25,
                +0.50416366022162453412970495999999E-26,
                +0.82502725502400865081753600000000E-27,
                +0.13520032631020947208055466666666E-27,
                +0.22184326876541720216644266666666E-28,
                +0.36442494054085079212578133333333E-29,
                +0.59920218558643813307733333333333E-30,
                +0.98584812059573785810261333333333E-31,
                +0.16222501166399014393173333333333E-31
            }
            ;
        const double pi2 = 1.57079632679489661923132169163975;
        double value;

        switch (data.nterms)
        {
            case 0:
                data.nterms = r8_inits(asincs, 39, 0.1 * r8_mach(3));
                data.sqeps = Math.Sqrt(6.0 * r8_mach(3));
                break;
        }

        double y = Math.Abs(x);

        if (x < -1.0 - data.sqeps)
        {
            Console.WriteLine("");
            Console.WriteLine("R8_ASIN - Fatal error!");
            Console.WriteLine("  X < - 1.0");
            return 1;
        }

        switch (x)
        {
            case < -1.0:
                value = -pi2;
                break;
            case < 1.0:
            {
                double z = 0.0;
                if (data.sqeps < y)
                {
                    z = y * y;
                }

                value = z switch
                {
                    <= 0.5 => x * (1.0 + r8_csevl(4.0 * z - 1.0, asincs, data.nterms)),
                    _ => pi2 - Math.Sqrt(1.0 - z) * (1.0 + r8_csevl(3.0 - 4.0 * z, asincs, data.nterms))
                };

                switch (x)
                {
                    case < 0.0:
                        value = -Math.Abs(value);
                        break;
                    case > 0.0:
                        value = +Math.Abs(value);
                        break;
                }

                break;
            }
            default:
            {
                if (x < 1.0 + data.sqeps)
                {
                    value = pi2;
                }
                else
                {
                    Console.WriteLine("");
                    Console.WriteLine("R8_ASIN - Fatal error!");
                    Console.WriteLine("  1.0 < X");
                    return 1;
                }

                break;
            }
        }

        return value;
    }

    public class r8ASINHData
    {
        public int nterms;
        public double sqeps;
        public double xmax;

    }
        
    public static double r8_asinh(ref r8ASINHData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ASINH evaluates the arc-sine of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    11 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_ASINH, the arc-hyperbolic sine of X.
        //
    {
        const double aln2 = 0.69314718055994530941723212145818;
        double[] asnhcs = {
                -0.12820039911738186343372127359268E+00,
                -0.58811761189951767565211757138362E-01,
                +0.47274654322124815640725249756029E-02,
                -0.49383631626536172101360174790273E-03,
                +0.58506207058557412287494835259321E-04,
                -0.74669983289313681354755069217188E-05,
                +0.10011693583558199265966192015812E-05,
                -0.13903543858708333608616472258886E-06,
                +0.19823169483172793547317360237148E-07,
                -0.28847468417848843612747272800317E-08,
                +0.42672965467159937953457514995907E-09,
                -0.63976084654366357868752632309681E-10,
                +0.96991686089064704147878293131179E-11,
                -0.14844276972043770830246658365696E-11,
                +0.22903737939027447988040184378983E-12,
                -0.35588395132732645159978942651310E-13,
                +0.55639694080056789953374539088554E-14,
                -0.87462509599624678045666593520162E-15,
                +0.13815248844526692155868802298129E-15,
                -0.21916688282900363984955142264149E-16,
                +0.34904658524827565638313923706880E-17,
                -0.55785788400895742439630157032106E-18,
                +0.89445146617134012551050882798933E-19,
                -0.14383426346571317305551845239466E-19,
                +0.23191811872169963036326144682666E-20,
                -0.37487007953314343674570604543999E-21,
                +0.60732109822064279404549242880000E-22,
                -0.98599402764633583177370173440000E-23,
                +0.16039217452788496315232638293333E-23,
                -0.26138847350287686596716134399999E-24,
                +0.42670849606857390833358165333333E-25,
                -0.69770217039185243299730773333333E-26,
                +0.11425088336806858659812693333333E-26,
                -0.18735292078860968933021013333333E-27,
                +0.30763584414464922794065920000000E-28,
                -0.50577364031639824787046399999999E-29,
                +0.83250754712689142224213333333333E-30,
                -0.13718457282501044163925333333333E-30,
                +0.22629868426552784104106666666666E-31
            }
            ;
        double value = 0;

        switch (data.nterms)
        {
            case 0:
                data.nterms = r8_inits(asnhcs, 39, 0.1 * r8_mach(3));
                data.sqeps = Math.Sqrt(r8_mach(3));
                data.xmax = 1.0 / data.sqeps;
                break;
        }

        double y = Math.Abs(x);

        if (y <= data.sqeps)
        {
            value = x;
        }
        else
        {
            switch (y)
            {
                case <= 1.0:
                    value = x * (1.0 + r8_csevl(2.0 * x * x - 1.0, asnhcs, data.nterms));
                    break;
                default:
                {
                    if (y < data.xmax)
                    {
                        value = x switch
                        {
                            < 0.0 => -value,
                            _ => Math.Log(y + Math.Sqrt(y * y + 1.0))
                        };
                    }
                    else
                    {
                        value = x switch
                        {
                            < 0.0 => -value,
                            _ => aln2 + Math.Log(y)
                        };
                    }

                    break;
                }
            }
        }

        return value;
    }

    public class r8ATANData
    {
        public int nterms;
        public double sqeps;
        public double xbig;

    }
    public static double r8_atan(ref r8ATANData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ATAN evaluates the arc-tangent of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    11 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_ATAN, the arc-tangent of X.
        //
    {
        double[] atancs = {
                +0.48690110349241406474636915902891E+00,
                -0.65108316367174641818869794945974E-02,
                +0.38345828265245177653569992430456E-04,
                -0.26872212876223146539595410518788E-06,
                +0.20500930985824269846636514686688E-08,
                -0.16450717395484269455734135285348E-10,
                +0.13650975274390773423813528484428E-12,
                -0.11601779591998246322891309834666E-14,
                +0.10038333943866273835797657402666E-16,
                -0.88072747152163859327073696000000E-19,
                +0.78136321005661722180580266666666E-21,
                -0.69954535148267456086613333333333E-23,
                +0.63105905713702136004266666666666E-25,
                -0.57296075370213874346666666666666E-27,
                +0.52274796280602282666666666666666E-29,
                -0.48327903911608320000000000000000E-31
            }
            ;
        double[] conpi8 = {
                0.375,
                0.75,
                1.125,
                1.5
            }
            ;
        double[] pi8 = {
                +0.17699081698724154807830422909937E-01,
                +0.35398163397448309615660845819875E-01,
                +0.53097245096172464423491268729813E-01,
                +0.70796326794896619231321691639751E-01
            }
            ;
        double[] tanp8 = {
                +0.41421356237309504880168872420969,
                +1.0,
                +2.4142135623730950488016887242096
            }
            ;
        double value;
        const double xbnd1 = +0.19891236737965800691159762264467;
        const double xbnd2 = +0.66817863791929891999775768652308;
        const double xbnd3 = +1.4966057626654890176011351349424;
        const double xbnd4 = +5.0273394921258481045149750710640;

        switch (data.nterms)
        {
            case 0:
                data.nterms = r8_inits(atancs, 16, 0.1 * r8_mach(3));
                data.sqeps = Math.Sqrt(6.0 * r8_mach(3));
                data.xbig = 1.0 / r8_mach(3);
                break;
        }

        double y = Math.Abs(x);

        switch (y)
        {
            case <= xbnd1:
            {
                value = x;
                if (data.sqeps < y)
                {
                    value = x * (0.75 + r8_csevl(50.0 * y * y - 1.0, atancs, data.nterms));
                }

                break;
            }
            case <= xbnd4:
            {
                int n = y switch
                {
                    > xbnd3 => 3,
                    > xbnd2 => 2,
                    _ => 1
                };

                double t = (y - tanp8[n - 1]) / (1.0 + y * tanp8[n - 1]);

                value = conpi8[n - 1] + (pi8[n - 1] + t * (0.75 +
                                                           r8_csevl(50.0 * t * t - 1.0, atancs, data.nterms)));
                break;
            }
            default:
            {
                value = conpi8[3] + pi8[3];

                if (y < data.xbig)
                {
                    value = conpi8[3] + (pi8[3] - (0.75 +
                                                   r8_csevl(50.0 / y / y - 1.0, atancs, data.nterms)) / y);
                }

                break;
            }
        }

        value = x switch
        {
            < 0.0 => -Math.Abs(value),
            _ => +Math.Abs(value)
        };

        return value;
    }

    public class r8ATAN2Data
    {
        public double big;
        public double sml;

    }
    public static double r8_atan2(ref r8ATAN2Data data, double sn, double cs)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ATAN2 evaluates the arc-tangent of two R8 arguments.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    11 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double SN, CS, the Y and X coordinates of a 
        //    point on the angle.
        //
        //    Output, double R8_ATAN2, the arc-tangent of the angle.
        //
    {
        double value;

        switch (data.sml)
        {
            case 0.0:
                data.sml = r8_mach(1);
                data.big = r8_mach(2);
                break;
        }

        //
        //  We now make sure SN can be divided by CS.  It is painful.
        //
        double abssn = Math.Abs(sn);
        double abscs = Math.Abs(cs);

        if (abscs <= abssn)
        {
            switch (abscs)
            {
                case < 1.0 when abscs * data.big <= abssn:
                    switch (sn)
                    {
                        case < 0.0:
                            value = -0.5 * Math.PI;
                            break;
                        case 0.0:
                            Console.WriteLine("");
                            Console.WriteLine("R8_ATAN2 - Fatal error!");
                            Console.WriteLine("  Both arguments are 0.");
                            return 1;
                        default:
                            value = 0.5 * Math.PI;
                            break;
                    }

                    return value;
            }
        }
        else
        {
            switch (abscs)
            {
                case > 1.0 when abssn <= abscs * data.sml:
                {
                    value = cs switch
                    {
                        >= 0.0 => 0.0,
                        _ => Math.PI
                    };

                    return value;
                }
            }
        }

        value = Math.Atan(sn / cs);

        switch (cs)
        {
            case < 0.0:
                value += Math.PI;
                break;
        }

        switch (value)
        {
            case > Math.PI:
                value -= 2.0 * Math.PI;
                break;
        }

        return value;
    }

    public class r8ATANHData
    {
        public int nterms;
        public double dxrel;
        public double sqeps;
            
    }
    public static double r8_atanh(ref r8ATANHData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ATANH evaluates the arc-hyperbolic tangent of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    11 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_ATANH, the arc-hyperbolic tangent of X.
        //
    {
        double[] atnhcs = {
                +0.9439510239319549230842892218633E-01,
                +0.4919843705578615947200034576668E-01,
                +0.2102593522455432763479327331752E-02,
                +0.1073554449776116584640731045276E-03,
                +0.5978267249293031478642787517872E-05,
                +0.3505062030889134845966834886200E-06,
                +0.2126374343765340350896219314431E-07,
                +0.1321694535715527192129801723055E-08,
                +0.8365875501178070364623604052959E-10,
                +0.5370503749311002163881434587772E-11,
                +0.3486659470157107922971245784290E-12,
                +0.2284549509603433015524024119722E-13,
                +0.1508407105944793044874229067558E-14,
                +0.1002418816804109126136995722837E-15,
                +0.6698674738165069539715526882986E-17,
                +0.4497954546494931083083327624533E-18,
                +0.3032954474279453541682367146666E-19,
                +0.2052702064190936826463861418666E-20,
                +0.1393848977053837713193014613333E-21,
                +0.9492580637224576971958954666666E-23,
                +0.6481915448242307604982442666666E-24,
                +0.4436730205723615272632320000000E-25,
                +0.3043465618543161638912000000000E-26,
                +0.2091881298792393474047999999999E-27,
                +0.1440445411234050561365333333333E-28,
                +0.9935374683141640465066666666666E-30,
                +0.6863462444358260053333333333333E-31
            }
            ;
        double value;

        switch (data.nterms)
        {
            case 0:
                data.nterms = r8_inits(atnhcs, 27, 0.1 * r8_mach(3));
                data.dxrel = Math.Sqrt(r8_mach(4));
                data.sqeps = Math.Sqrt(3.0 * r8_mach(3));
                break;
        }

        double y = Math.Abs(x);

        if (y <= data.sqeps)
        {
            value = x;
        }
        else
        {
            switch (y)
            {
                case <= 0.5:
                    value = x * (1.0 + r8_csevl(8.0 * x * x - 1.0, atnhcs, data.nterms));
                    break;
                case < 1.0:
                {
                    value = 0.5 * Math.Log((1.0 + x) / (1.0 - x));
                    if (1.0 - y < data.dxrel)
                    {
                        Console.WriteLine("");
                        Console.WriteLine("R8_ATANH - Warning:");
                        Console.WriteLine("  Answer lt half precision because |X| too near 1.");
                    }

                    break;
                }
                default:
                    Console.WriteLine("");
                    Console.WriteLine("R8_ATANH - Fatal error!");
                    Console.WriteLine("  1 <= |X|.");
                    return 1;
            }
        }

        return value;
    }
}