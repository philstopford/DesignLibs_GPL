using System;
using Burkardt.Types;

namespace Burkardt.FullertonFnLib;

public static partial class FullertonLib
{
    public class BesselData
    {
        /*
        public int nti1 = 0;
        public int ntai1 = 0;
        public int ntai12 = 0;
        

        public int ntai02 = 0;
        public int ntai0 = 0;
        public int nti0 = 0;

        public int ntj0 = 0;
        public int ntj1 = 0;

        public int ntk0 = 0;
        public int ntak0 = 0;
        public int ntak02 = 0;

        public int ntk1 = 0;
        public int ntak1 = 0;
        public int ntak12 = 0;

        public int nty0 = 0;
        public int nty1 = 0;
        public double xsml = 0.0;
        
        public double xmin = 0.0;
        public double xmax = 0.0;

        public double alnbig = 0.0;
        public double bknu1 = 0;
        public int iswtch = 0;

        */
        public r8GammaData gdata = new();

        public r8KnusData kdata = new();
    }

    public class BetaData
    {
        public double alneps = 0.0;
        public double alnsml = 0.0;
        public double eps = 0.0;
        public double sml = 0.0;

        public r8GammaData gdata = new();

    }

    public class r8B0MPData
    {
        public int nbm0;
        public int nbm02;
        public int nbt02;
        public int nbth0;
            
        public double xmax;
    }

    private static void r8_b0mp(ref BesselData globaldata, ref r8B0MPData data, double x, ref double ampl, ref double theta )

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_B0MP evaluates the modulus and phase for the Bessel J0 and Y0 functions.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, ref double AMPL, &THETA, the modulus and phase.
        //
    {
        double[] bm0cs = {
                +0.9211656246827742712573767730182E-01,
                -0.1050590997271905102480716371755E-02,
                +0.1470159840768759754056392850952E-04,
                -0.5058557606038554223347929327702E-06,
                +0.2787254538632444176630356137881E-07,
                -0.2062363611780914802618841018973E-08,
                +0.1870214313138879675138172596261E-09,
                -0.1969330971135636200241730777825E-10,
                +0.2325973793999275444012508818052E-11,
                -0.3009520344938250272851224734482E-12,
                +0.4194521333850669181471206768646E-13,
                -0.6219449312188445825973267429564E-14,
                +0.9718260411336068469601765885269E-15,
                -0.1588478585701075207366635966937E-15,
                +0.2700072193671308890086217324458E-16,
                -0.4750092365234008992477504786773E-17,
                +0.8615128162604370873191703746560E-18,
                -0.1605608686956144815745602703359E-18,
                +0.3066513987314482975188539801599E-19,
                -0.5987764223193956430696505617066E-20,
                +0.1192971253748248306489069841066E-20,
                -0.2420969142044805489484682581333E-21,
                +0.4996751760510616453371002879999E-22,
                -0.1047493639351158510095040511999E-22,
                +0.2227786843797468101048183466666E-23,
                -0.4801813239398162862370542933333E-24,
                +0.1047962723470959956476996266666E-24,
                -0.2313858165678615325101260800000E-25,
                +0.5164823088462674211635199999999E-26,
                -0.1164691191850065389525401599999E-26,
                +0.2651788486043319282958336000000E-27,
                -0.6092559503825728497691306666666E-28,
                +0.1411804686144259308038826666666E-28,
                -0.3298094961231737245750613333333E-29,
                +0.7763931143074065031714133333333E-30,
                -0.1841031343661458478421333333333E-30,
                +0.4395880138594310737100799999999E-31
            }
            ;
        double[] bm02cs = {
                +0.9500415145228381369330861335560E-01,
                -0.3801864682365670991748081566851E-03,
                +0.2258339301031481192951829927224E-05,
                -0.3895725802372228764730621412605E-07,
                +0.1246886416512081697930990529725E-08,
                -0.6065949022102503779803835058387E-10,
                +0.4008461651421746991015275971045E-11,
                -0.3350998183398094218467298794574E-12,
                +0.3377119716517417367063264341996E-13,
                -0.3964585901635012700569356295823E-14,
                +0.5286111503883857217387939744735E-15,
                -0.7852519083450852313654640243493E-16,
                +0.1280300573386682201011634073449E-16,
                -0.2263996296391429776287099244884E-17,
                +0.4300496929656790388646410290477E-18,
                -0.8705749805132587079747535451455E-19,
                +0.1865862713962095141181442772050E-19,
                -0.4210482486093065457345086972301E-20,
                +0.9956676964228400991581627417842E-21,
                -0.2457357442805313359605921478547E-21,
                +0.6307692160762031568087353707059E-22,
                -0.1678773691440740142693331172388E-22,
                +0.4620259064673904433770878136087E-23,
                -0.1311782266860308732237693402496E-23,
                +0.3834087564116302827747922440276E-24,
                -0.1151459324077741271072613293576E-24,
                +0.3547210007523338523076971345213E-25,
                -0.1119218385815004646264355942176E-25,
                +0.3611879427629837831698404994257E-26,
                -0.1190687765913333150092641762463E-26,
                +0.4005094059403968131802476449536E-27,
                -0.1373169422452212390595193916017E-27,
                +0.4794199088742531585996491526437E-28,
                -0.1702965627624109584006994476452E-28,
                +0.6149512428936330071503575161324E-29,
                -0.2255766896581828349944300237242E-29,
                +0.8399707509294299486061658353200E-30,
                -0.3172997595562602355567423936152E-30,
                +0.1215205298881298554583333026514E-30,
                -0.4715852749754438693013210568045E-31
            }
            ;
        double[] bt02cs = {
                -0.24548295213424597462050467249324,
                +0.12544121039084615780785331778299E-02,
                -0.31253950414871522854973446709571E-04,
                +0.14709778249940831164453426969314E-05,
                -0.99543488937950033643468850351158E-07,
                +0.85493166733203041247578711397751E-08,
                -0.86989759526554334557985512179192E-09,
                +0.10052099533559791084540101082153E-09,
                -0.12828230601708892903483623685544E-10,
                +0.17731700781805131705655750451023E-11,
                -0.26174574569485577488636284180925E-12,
                +0.40828351389972059621966481221103E-13,
                -0.66751668239742720054606749554261E-14,
                +0.11365761393071629448392469549951E-14,
                -0.20051189620647160250559266412117E-15,
                +0.36497978794766269635720591464106E-16,
                -0.68309637564582303169355843788800E-17,
                +0.13107583145670756620057104267946E-17,
                -0.25723363101850607778757130649599E-18,
                +0.51521657441863959925267780949333E-19,
                -0.10513017563758802637940741461333E-19,
                +0.21820381991194813847301084501333E-20,
                -0.46004701210362160577225905493333E-21,
                +0.98407006925466818520953651199999E-22,
                -0.21334038035728375844735986346666E-22,
                +0.46831036423973365296066286933333E-23,
                -0.10400213691985747236513382399999E-23,
                +0.23349105677301510051777740800000E-24,
                -0.52956825323318615788049749333333E-25,
                +0.12126341952959756829196287999999E-25,
                -0.28018897082289428760275626666666E-26,
                +0.65292678987012873342593706666666E-27,
                -0.15337980061873346427835733333333E-27,
                +0.36305884306364536682359466666666E-28,
                -0.86560755713629122479172266666666E-29,
                +0.20779909972536284571238399999999E-29,
                -0.50211170221417221674325333333333E-30,
                +0.12208360279441714184191999999999E-30,
                -0.29860056267039913454250666666666E-31
            }
            ;
        double[] bth0cs = {
                -0.24901780862128936717709793789967,
                +0.48550299609623749241048615535485E-03,
                -0.54511837345017204950656273563505E-05,
                +0.13558673059405964054377445929903E-06,
                -0.55691398902227626227583218414920E-08,
                +0.32609031824994335304004205719468E-09,
                -0.24918807862461341125237903877993E-10,
                +0.23449377420882520554352413564891E-11,
                -0.26096534444310387762177574766136E-12,
                +0.33353140420097395105869955014923E-13,
                -0.47890000440572684646750770557409E-14,
                +0.75956178436192215972642568545248E-15,
                -0.13131556016891440382773397487633E-15,
                +0.24483618345240857495426820738355E-16,
                -0.48805729810618777683256761918331E-17,
                +0.10327285029786316149223756361204E-17,
                -0.23057633815057217157004744527025E-18,
                +0.54044443001892693993017108483765E-19,
                -0.13240695194366572724155032882385E-19,
                +0.33780795621371970203424792124722E-20,
                -0.89457629157111779003026926292299E-21,
                +0.24519906889219317090899908651405E-21,
                -0.69388422876866318680139933157657E-22,
                +0.20228278714890138392946303337791E-22,
                -0.60628500002335483105794195371764E-23,
                +0.18649748964037635381823788396270E-23,
                -0.58783732384849894560245036530867E-24,
                +0.18958591447999563485531179503513E-24,
                -0.62481979372258858959291620728565E-25,
                +0.21017901684551024686638633529074E-25,
                -0.72084300935209253690813933992446E-26,
                +0.25181363892474240867156405976746E-26,
                -0.89518042258785778806143945953643E-27,
                +0.32357237479762298533256235868587E-27,
                -0.11883010519855353657047144113796E-27,
                +0.44306286907358104820579231941731E-28,
                -0.16761009648834829495792010135681E-28,
                +0.64292946921207466972532393966088E-29,
                -0.24992261166978652421207213682763E-29,
                +0.98399794299521955672828260355318E-30,
                -0.39220375242408016397989131626158E-30,
                +0.15818107030056522138590618845692E-30,
                -0.64525506144890715944344098365426E-31,
                +0.26611111369199356137177018346367E-31
            }
            ;
        const double pi4 = 0.785398163397448309615660845819876;
        double z;

        switch (data.nbm0)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nbm0 = r8_inits(bm0cs, 37, eta);
                data.nbt02 = r8_inits(bt02cs, 39, eta);
                data.nbm02 = r8_inits(bm02cs, 40, eta);
                data.nbth0 = r8_inits(bth0cs, 44, eta);
                data.xmax = 1.0 / r8_mach ( 4 );
                break;
        }

        switch (x)
        {
            case < 4.0:
                Console.WriteLine("");
                Console.WriteLine("R8_B0MP - Fatal error!");
                Console.WriteLine("  X < 4.");
                break;
            case <= 8.0:
                z = (128.0 / x / x - 5.0) / 3.0;
                ampl = (0.75 + r8_csevl(z, bm0cs, data.nbm0)) / Math.Sqrt(x);
                theta = x - pi4 + r8_csevl(z, bt02cs, data.nbt02) / x;
                break;
            default:
                z = 128.0 / x / x - 1.0;
                ampl = (0.75 + r8_csevl(z, bm02cs, data.nbm02)) / Math.Sqrt(x);
                theta = x - pi4 + r8_csevl(z, bth0cs, data.nbth0) / x;
                break;
        }
    }
        
    public class r8B1MPData
    {
        public int nbm1;
        public int nbm12;
        public int nbt12;
        public int nbth1;
            
        public double xmax;
    }

    public static void r8_b1mp(ref BesselData globaldata, ref r8B1MPData data, double x, ref double ampl, ref double theta )

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_B1MP evaluates the modulus and phase for the Bessel J1 and Y1 functions.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, ref double AMPL, &THETA, the modulus and phase.
        //
    {
        double[] bm12cs = {
                +0.9807979156233050027272093546937E-01,
                +0.1150961189504685306175483484602E-02,
                -0.4312482164338205409889358097732E-05,
                +0.5951839610088816307813029801832E-07,
                -0.1704844019826909857400701586478E-08,
                +0.7798265413611109508658173827401E-10,
                -0.4958986126766415809491754951865E-11,
                +0.4038432416421141516838202265144E-12,
                -0.3993046163725175445765483846645E-13,
                +0.4619886183118966494313342432775E-14,
                -0.6089208019095383301345472619333E-15,
                +0.8960930916433876482157048041249E-16,
                -0.1449629423942023122916518918925E-16,
                +0.2546463158537776056165149648068E-17,
                -0.4809472874647836444259263718620E-18,
                +0.9687684668292599049087275839124E-19,
                -0.2067213372277966023245038117551E-19,
                +0.4646651559150384731802767809590E-20,
                -0.1094966128848334138241351328339E-20,
                +0.2693892797288682860905707612785E-21,
                -0.6894992910930374477818970026857E-22,
                +0.1830268262752062909890668554740E-22,
                -0.5025064246351916428156113553224E-23,
                +0.1423545194454806039631693634194E-23,
                -0.4152191203616450388068886769801E-24,
                +0.1244609201503979325882330076547E-24,
                -0.3827336370569304299431918661286E-25,
                +0.1205591357815617535374723981835E-25,
                -0.3884536246376488076431859361124E-26,
                +0.1278689528720409721904895283461E-26,
                -0.4295146689447946272061936915912E-27,
                +0.1470689117829070886456802707983E-27,
                -0.5128315665106073128180374017796E-28,
                +0.1819509585471169385481437373286E-28,
                -0.6563031314841980867618635050373E-29,
                +0.2404898976919960653198914875834E-29,
                -0.8945966744690612473234958242979E-30,
                +0.3376085160657231026637148978240E-30,
                -0.1291791454620656360913099916966E-30,
                +0.5008634462958810520684951501254E-31
            }
            ;
        double[] bm1cs = {
                +0.1069845452618063014969985308538,
                +0.3274915039715964900729055143445E-02,
                -0.2987783266831698592030445777938E-04,
                +0.8331237177991974531393222669023E-06,
                -0.4112665690302007304896381725498E-07,
                +0.2855344228789215220719757663161E-08,
                -0.2485408305415623878060026596055E-09,
                +0.2543393338072582442742484397174E-10,
                -0.2941045772822967523489750827909E-11,
                +0.3743392025493903309265056153626E-12,
                -0.5149118293821167218720548243527E-13,
                +0.7552535949865143908034040764199E-14,
                -0.1169409706828846444166290622464E-14,
                +0.1896562449434791571721824605060E-15,
                -0.3201955368693286420664775316394E-16,
                +0.5599548399316204114484169905493E-17,
                -0.1010215894730432443119390444544E-17,
                +0.1873844985727562983302042719573E-18,
                -0.3563537470328580219274301439999E-19,
                +0.6931283819971238330422763519999E-20,
                -0.1376059453406500152251408930133E-20,
                +0.2783430784107080220599779327999E-21,
                -0.5727595364320561689348669439999E-22,
                +0.1197361445918892672535756799999E-22,
                -0.2539928509891871976641440426666E-23,
                +0.5461378289657295973069619199999E-24,
                -0.1189211341773320288986289493333E-24,
                +0.2620150977340081594957824000000E-25,
                -0.5836810774255685901920938666666E-26,
                +0.1313743500080595773423615999999E-26,
                -0.2985814622510380355332778666666E-27,
                +0.6848390471334604937625599999999E-28,
                -0.1584401568222476721192960000000E-28,
                +0.3695641006570938054301013333333E-29,
                -0.8687115921144668243012266666666E-30,
                +0.2057080846158763462929066666666E-30,
                -0.4905225761116225518523733333333E-31
            }
            ;
        double[] bt12cs = {
                +0.73823860128742974662620839792764,
                -0.33361113174483906384470147681189E-02,
                +0.61463454888046964698514899420186E-04,
                -0.24024585161602374264977635469568E-05,
                +0.14663555577509746153210591997204E-06,
                -0.11841917305589180567005147504983E-07,
                +0.11574198963919197052125466303055E-08,
                -0.13001161129439187449366007794571E-09,
                +0.16245391141361731937742166273667E-10,
                -0.22089636821403188752155441770128E-11,
                +0.32180304258553177090474358653778E-12,
                -0.49653147932768480785552021135381E-13,
                +0.80438900432847825985558882639317E-14,
                -0.13589121310161291384694712682282E-14,
                +0.23810504397147214869676529605973E-15,
                -0.43081466363849106724471241420799E-16,
                +0.80202544032771002434993512550400E-17,
                -0.15316310642462311864230027468799E-17,
                +0.29928606352715568924073040554666E-18,
                -0.59709964658085443393815636650666E-19,
                +0.12140289669415185024160852650666E-19,
                -0.25115114696612948901006977706666E-20,
                +0.52790567170328744850738380799999E-21,
                -0.11260509227550498324361161386666E-21,
                +0.24348277359576326659663462400000E-22,
                -0.53317261236931800130038442666666E-23,
                +0.11813615059707121039205990399999E-23,
                -0.26465368283353523514856789333333E-24,
                +0.59903394041361503945577813333333E-25,
                -0.13690854630829503109136383999999E-25,
                +0.31576790154380228326413653333333E-26,
                -0.73457915082084356491400533333333E-27,
                +0.17228081480722747930705920000000E-27,
                -0.40716907961286507941068800000000E-28,
                +0.96934745136779622700373333333333E-29,
                -0.23237636337765716765354666666666E-29,
                +0.56074510673522029406890666666666E-30,
                -0.13616465391539005860522666666666E-30,
                +0.33263109233894654388906666666666E-31
            }
            ;
        double[] bth1cs = {
                +0.74749957203587276055443483969695,
                -0.12400777144651711252545777541384E-02,
                +0.99252442404424527376641497689592E-05,
                -0.20303690737159711052419375375608E-06,
                +0.75359617705690885712184017583629E-08,
                -0.41661612715343550107630023856228E-09,
                +0.30701618070834890481245102091216E-10,
                -0.28178499637605213992324008883924E-11,
                +0.30790696739040295476028146821647E-12,
                -0.38803300262803434112787347554781E-13,
                +0.55096039608630904934561726208562E-14,
                -0.86590060768383779940103398953994E-15,
                +0.14856049141536749003423689060683E-15,
                -0.27519529815904085805371212125009E-16,
                +0.54550796090481089625036223640923E-17,
                -0.11486534501983642749543631027177E-17,
                +0.25535213377973900223199052533522E-18,
                -0.59621490197413450395768287907849E-19,
                +0.14556622902372718620288302005833E-19,
                -0.37022185422450538201579776019593E-20,
                +0.97763074125345357664168434517924E-21,
                -0.26726821639668488468723775393052E-21,
                +0.75453300384983271794038190655764E-22,
                -0.21947899919802744897892383371647E-22,
                +0.65648394623955262178906999817493E-23,
                -0.20155604298370207570784076869519E-23,
                +0.63417768556776143492144667185670E-24,
                -0.20419277885337895634813769955591E-24,
                +0.67191464220720567486658980018551E-25,
                -0.22569079110207573595709003687336E-25,
                +0.77297719892989706370926959871929E-26,
                -0.26967444512294640913211424080920E-26,
                +0.95749344518502698072295521933627E-27,
                -0.34569168448890113000175680827627E-27,
                +0.12681234817398436504211986238374E-27,
                -0.47232536630722639860464993713445E-28,
                +0.17850008478186376177858619796417E-28,
                -0.68404361004510395406215223566746E-29,
                +0.26566028671720419358293422672212E-29,
                -0.10450402527914452917714161484670E-29,
                +0.41618290825377144306861917197064E-30,
                -0.16771639203643714856501347882887E-30,
                +0.68361997776664389173535928028528E-31,
                -0.28172247861233641166739574622810E-31
            }
            ;
        const double pi4 = 0.785398163397448309615660845819876;
        double z;

        switch (data.nbm1)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nbm1 = r8_inits(bm1cs, 37, eta);
                data.nbt12 = r8_inits(bt12cs, 39, eta);
                data.nbm12 = r8_inits(bm12cs, 40, eta);
                data.nbth1 = r8_inits(bth1cs, 44, eta);
                data.xmax = 1.0 / r8_mach ( 4 );
                break;
        }

        switch (x)
        {
            case < 4.0:
                Console.WriteLine("");
                Console.WriteLine("R8_B1MP - Fatal error!");
                Console.WriteLine("  X < 4.");
                break;
            case <= 8.0:
                z = (128.0 / x / x - 5.0) / 3.0;
                ampl = (0.75 + r8_csevl(z, bm1cs, data.nbm1)) / Math.Sqrt(x);
                theta = x - 3.0 * pi4 + r8_csevl(z, bt12cs, data.nbt12) / x;
                break;
            default:
                z = 128.0 / x / x - 1.0;
                ampl = (0.75 + r8_csevl(z, bm12cs, data.nbm12)) / Math.Sqrt(x);
                theta = x - 3.0 * pi4 + r8_csevl(z, bth1cs, data.nbth1) / x;
                break;
        }
    }

    public class r8BESI0Data
    {
        public int nti0;
        public double xsml;
        public double xmax;

        public r8BESI0EData edata = new();

    }

    public static double r8_besi0(ref BesselData globaldata, ref r8BESI0Data data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESI0 evaluates the Bessel function I of order 0 of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESI0, the Bessel function I of order 0 of X.
        //
    {
        double[] bi0cs = {
                -0.7660547252839144951081894976243285E-01,
                +0.1927337953993808269952408750881196E+01,
                +0.2282644586920301338937029292330415,
                +0.1304891466707290428079334210691888E-01,
                +0.4344270900816487451378682681026107E-03,
                +0.9422657686001934663923171744118766E-05,
                +0.1434006289510691079962091878179957E-06,
                +0.1613849069661749069915419719994611E-08,
                +0.1396650044535669699495092708142522E-10,
                +0.9579451725505445344627523171893333E-13,
                +0.5333981859862502131015107744000000E-15,
                +0.2458716088437470774696785919999999E-17,
                +0.9535680890248770026944341333333333E-20,
                +0.3154382039721427336789333333333333E-22,
                +0.9004564101094637431466666666666666E-25,
                +0.2240647369123670016000000000000000E-27,
                +0.4903034603242837333333333333333333E-30,
                +0.9508172606122666666666666666666666E-33
            }
            ;
        double value;

        switch (data.nti0)
        {
            case 0:
                data.nti0 = r8_inits(bi0cs, 18, 0.1 * r8_mach(3));
                data.xsml = Math.Sqrt(8.0 * r8_mach(3));
                data.xmax = Math.Log(r8_mach(2));
                break;
        }

        double y = Math.Abs(x);

        if (y <= data.xsml)
        {
            value = 1.0;
        }
        else
        {
            switch (y)
            {
                case <= 3.0:
                    value = 2.75 + r8_csevl(y * y / 4.5 - 1.0, bi0cs, data.nti0);
                    break;
                default:
                {
                    if (y <= data.xmax)
                    {
                        value = Math.Exp(y) * r8_besi0e(ref globaldata, ref data.edata, x);
                    }
                    else
                    {
                        Console.WriteLine("");
                        Console.WriteLine("R8_BESI0 - Fatal error!");
                        Console.WriteLine("  |X| too large.");
                        return 1;
                    }

                    break;
                }
            }
        }

        return value;
    }

    public class r8BESI0EData
    {
        public int nti0;
        public int ntai0;
        public int ntai02;
        public double xsml;
    }

    public static double r8_besi0e(ref BesselData globaldata, ref r8BESI0EData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESI0E evaluates the exponentially scaled Bessel function I0(X).
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESI0E, the exponentially scaled Bessel 
        //    function I0(X).
        //
    {
        double[] ai02cs = {
                +0.5449041101410883160789609622680E-01,
                +0.3369116478255694089897856629799E-02,
                +0.6889758346916823984262639143011E-04,
                +0.2891370520834756482966924023232E-05,
                +0.2048918589469063741827605340931E-06,
                +0.2266668990498178064593277431361E-07,
                +0.3396232025708386345150843969523E-08,
                +0.4940602388224969589104824497835E-09,
                +0.1188914710784643834240845251963E-10,
                -0.3149916527963241364538648629619E-10,
                -0.1321581184044771311875407399267E-10,
                -0.1794178531506806117779435740269E-11,
                +0.7180124451383666233671064293469E-12,
                +0.3852778382742142701140898017776E-12,
                +0.1540086217521409826913258233397E-13,
                -0.4150569347287222086626899720156E-13,
                -0.9554846698828307648702144943125E-14,
                +0.3811680669352622420746055355118E-14,
                +0.1772560133056526383604932666758E-14,
                -0.3425485619677219134619247903282E-15,
                -0.2827623980516583484942055937594E-15,
                +0.3461222867697461093097062508134E-16,
                +0.4465621420296759999010420542843E-16,
                -0.4830504485944182071255254037954E-17,
                -0.7233180487874753954562272409245E-17,
                +0.9921475412173698598880460939810E-18,
                +0.1193650890845982085504399499242E-17,
                -0.2488709837150807235720544916602E-18,
                -0.1938426454160905928984697811326E-18,
                +0.6444656697373443868783019493949E-19,
                +0.2886051596289224326481713830734E-19,
                -0.1601954907174971807061671562007E-19,
                -0.3270815010592314720891935674859E-20,
                +0.3686932283826409181146007239393E-20,
                +0.1268297648030950153013595297109E-22,
                -0.7549825019377273907696366644101E-21,
                +0.1502133571377835349637127890534E-21,
                +0.1265195883509648534932087992483E-21,
                -0.6100998370083680708629408916002E-22,
                -0.1268809629260128264368720959242E-22,
                +0.1661016099890741457840384874905E-22,
                -0.1585194335765885579379705048814E-23,
                -0.3302645405968217800953817667556E-23,
                +0.1313580902839239781740396231174E-23,
                +0.3689040246671156793314256372804E-24,
                -0.4210141910461689149219782472499E-24,
                +0.4791954591082865780631714013730E-25,
                +0.8459470390221821795299717074124E-25,
                -0.4039800940872832493146079371810E-25,
                -0.6434714653650431347301008504695E-26,
                +0.1225743398875665990344647369905E-25,
                -0.2934391316025708923198798211754E-26,
                -0.1961311309194982926203712057289E-26,
                +0.1503520374822193424162299003098E-26,
                -0.9588720515744826552033863882069E-28,
                -0.3483339380817045486394411085114E-27,
                +0.1690903610263043673062449607256E-27,
                +0.1982866538735603043894001157188E-28,
                -0.5317498081491816214575830025284E-28,
                +0.1803306629888392946235014503901E-28,
                +0.6213093341454893175884053112422E-29,
                -0.7692189292772161863200728066730E-29,
                +0.1858252826111702542625560165963E-29,
                +0.1237585142281395724899271545541E-29,
                -0.1102259120409223803217794787792E-29,
                +0.1886287118039704490077874479431E-30,
                +0.2160196872243658913149031414060E-30,
                -0.1605454124919743200584465949655E-30,
                +0.1965352984594290603938848073318E-31
            }
            ;
        double[] ai0cs = {
                +0.7575994494023795942729872037438E-01,
                +0.7591380810823345507292978733204E-02,
                +0.4153131338923750501863197491382E-03,
                +0.1070076463439073073582429702170E-04,
                -0.7901179979212894660750319485730E-05,
                -0.7826143501438752269788989806909E-06,
                +0.2783849942948870806381185389857E-06,
                +0.8252472600612027191966829133198E-08,
                -0.1204463945520199179054960891103E-07,
                +0.1559648598506076443612287527928E-08,
                +0.2292556367103316543477254802857E-09,
                -0.1191622884279064603677774234478E-09,
                +0.1757854916032409830218331247743E-10,
                +0.1128224463218900517144411356824E-11,
                -0.1146848625927298877729633876982E-11,
                +0.2715592054803662872643651921606E-12,
                -0.2415874666562687838442475720281E-13,
                -0.6084469888255125064606099639224E-14,
                +0.3145705077175477293708360267303E-14,
                -0.7172212924871187717962175059176E-15,
                +0.7874493403454103396083909603327E-16,
                +0.1004802753009462402345244571839E-16,
                -0.7566895365350534853428435888810E-17,
                +0.2150380106876119887812051287845E-17,
                -0.3754858341830874429151584452608E-18,
                +0.2354065842226992576900757105322E-19,
                +0.1114667612047928530226373355110E-19,
                -0.5398891884396990378696779322709E-20,
                +0.1439598792240752677042858404522E-20,
                -0.2591916360111093406460818401962E-21,
                +0.2238133183998583907434092298240E-22,
                +0.5250672575364771172772216831999E-23,
                -0.3249904138533230784173432285866E-23,
                +0.9924214103205037927857284710400E-24,
                -0.2164992254244669523146554299733E-24,
                +0.3233609471943594083973332991999E-25,
                -0.1184620207396742489824733866666E-26,
                -0.1281671853950498650548338687999E-26,
                +0.5827015182279390511605568853333E-27,
                -0.1668222326026109719364501503999E-27,
                +0.3625309510541569975700684800000E-28,
                -0.5733627999055713589945958399999E-29,
                +0.3736796722063098229642581333333E-30,
                +0.1602073983156851963365512533333E-30,
                -0.8700424864057229884522495999999E-31,
                +0.2741320937937481145603413333333E-31
            }
            ;
        double[] bi0cs = {
                -0.7660547252839144951081894976243285E-01,
                +0.1927337953993808269952408750881196E+01,
                +0.2282644586920301338937029292330415,
                +0.1304891466707290428079334210691888E-01,
                +0.4344270900816487451378682681026107E-03,
                +0.9422657686001934663923171744118766E-05,
                +0.1434006289510691079962091878179957E-06,
                +0.1613849069661749069915419719994611E-08,
                +0.1396650044535669699495092708142522E-10,
                +0.9579451725505445344627523171893333E-13,
                +0.5333981859862502131015107744000000E-15,
                +0.2458716088437470774696785919999999E-17,
                +0.9535680890248770026944341333333333E-20,
                +0.3154382039721427336789333333333333E-22,
                +0.9004564101094637431466666666666666E-25,
                +0.2240647369123670016000000000000000E-27,
                +0.4903034603242837333333333333333333E-30,
                +0.9508172606122666666666666666666666E-33
            }
            ;
        double value;

        switch (data.nti0)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nti0 = r8_inits(bi0cs, 18, eta);
                data.ntai0 = r8_inits(ai0cs, 46, eta);
                data.ntai02 = r8_inits(ai02cs, 69, eta);
                data.xsml = Math.Sqrt(8.0 * r8_mach(3));
                break;
        }

        double y = Math.Abs(x);

        if (y <= data.xsml)
        {
            value = 1.0;
        }
        else
        {
            value = y switch
            {
                <= 3.0 => Math.Exp(-y) * (2.75 + r8_csevl(y * y / 4.5 - 1.0, bi0cs, data.nti0)),
                <= 8.0 => (0.375 + r8_csevl((48.0 / y - 11.0) / 5.0, ai0cs, data.ntai0)) / Math.Sqrt(y),
                _ => (0.375 + r8_csevl(16.0 / y - 1.0, ai02cs, data.ntai02)) / Math.Sqrt(y)
            };
        }

        return value;
    }

    public class r8BESI1Data
    {
        public int nti1;
        public double xmin;
        public double xsml;
        public double xmax;
        public r8BESI1EData edata = new();

    }

    public static double r8_besi1(ref BesselData globaldata, ref r8BESI1Data data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESI1 evaluates the Bessel function I of order 1 of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESI1, the Bessel function I of order 1 of X.
        //
    {
        double[] bi1cs = {
                -0.19717132610998597316138503218149E-02,
                +0.40734887667546480608155393652014,
                +0.34838994299959455866245037783787E-01,
                +0.15453945563001236038598401058489E-02,
                +0.41888521098377784129458832004120E-04,
                +0.76490267648362114741959703966069E-06,
                +0.10042493924741178689179808037238E-07,
                +0.99322077919238106481371298054863E-10,
                +0.76638017918447637275200171681349E-12,
                +0.47414189238167394980388091948160E-14,
                +0.24041144040745181799863172032000E-16,
                +0.10171505007093713649121100799999E-18,
                +0.36450935657866949458491733333333E-21,
                +0.11205749502562039344810666666666E-23,
                +0.29875441934468088832000000000000E-26,
                +0.69732310939194709333333333333333E-29,
                +0.14367948220620800000000000000000E-31
            }
            ;
        double value;

        switch (data.nti1)
        {
            case 0:
                data.nti1 = r8_inits(bi1cs, 17, 0.1 * r8_mach(3));
                data.xmin = 2.0 * r8_mach(1);
                data.xsml = Math.Sqrt(8.0 * r8_mach(3));
                data.xmax = Math.Log(r8_mach(2));
                break;
        }

        double y = Math.Abs(x);

        if (y <= data.xmin)
        {
            value = 0.0;
        }
        else if (y <= data.xsml)
        {
            value = 0.5 * x;
        }
        else
        {
            switch (y)
            {
                case <= 3.0:
                    value = x * (0.875 + r8_csevl(y * y / 4.5 - 1.0, bi1cs, data.nti1));
                    break;
                default:
                {
                    if (y <= data.xmax)
                    {
                        value = Math.Exp(y) * r8_besi1e(ref globaldata, ref data.edata, x);
                    }
                    else
                    {
                        Console.WriteLine("");
                        Console.WriteLine("R8_BESI1 - Fatal error!");
                        Console.WriteLine("  Result overflows.");
                        return 1;
                    }

                    break;
                }
            }
        }

        return value;
    }

    public class r8BESI1EData
    {
        public int nti1;
        public int ntai1;
        public int ntai12;
        public double xmin;
        public double xsml;

    }
        
    public static double r8_besi1e(ref BesselData globaldata, ref r8BESI1EData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESI1E evaluates the exponentially scaled Bessel function I1(X).
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    29 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESI1E, the exponentially scaled Bessel 
        //    function I1(X).
        //
    {
        double[] ai12cs = {
                +0.2857623501828012047449845948469E-01,
                -0.9761097491361468407765164457302E-02,
                -0.1105889387626237162912569212775E-03,
                -0.3882564808877690393456544776274E-05,
                -0.2512236237870208925294520022121E-06,
                -0.2631468846889519506837052365232E-07,
                -0.3835380385964237022045006787968E-08,
                -0.5589743462196583806868112522229E-09,
                -0.1897495812350541234498925033238E-10,
                +0.3252603583015488238555080679949E-10,
                +0.1412580743661378133163366332846E-10,
                +0.2035628544147089507224526136840E-11,
                -0.7198551776245908512092589890446E-12,
                -0.4083551111092197318228499639691E-12,
                -0.2101541842772664313019845727462E-13,
                +0.4272440016711951354297788336997E-13,
                +0.1042027698412880276417414499948E-13,
                -0.3814403072437007804767072535396E-14,
                -0.1880354775510782448512734533963E-14,
                +0.3308202310920928282731903352405E-15,
                +0.2962628997645950139068546542052E-15,
                -0.3209525921993423958778373532887E-16,
                -0.4650305368489358325571282818979E-16,
                +0.4414348323071707949946113759641E-17,
                +0.7517296310842104805425458080295E-17,
                -0.9314178867326883375684847845157E-18,
                -0.1242193275194890956116784488697E-17,
                +0.2414276719454848469005153902176E-18,
                +0.2026944384053285178971922860692E-18,
                -0.6394267188269097787043919886811E-19,
                -0.3049812452373095896084884503571E-19,
                +0.1612841851651480225134622307691E-19,
                +0.3560913964309925054510270904620E-20,
                -0.3752017947936439079666828003246E-20,
                -0.5787037427074799345951982310741E-22,
                +0.7759997511648161961982369632092E-21,
                -0.1452790897202233394064459874085E-21,
                -0.1318225286739036702121922753374E-21,
                +0.6116654862903070701879991331717E-22,
                +0.1376279762427126427730243383634E-22,
                -0.1690837689959347884919839382306E-22,
                +0.1430596088595433153987201085385E-23,
                +0.3409557828090594020405367729902E-23,
                -0.1309457666270760227845738726424E-23,
                -0.3940706411240257436093521417557E-24,
                +0.4277137426980876580806166797352E-24,
                -0.4424634830982606881900283123029E-25,
                -0.8734113196230714972115309788747E-25,
                +0.4045401335683533392143404142428E-25,
                +0.7067100658094689465651607717806E-26,
                -0.1249463344565105223002864518605E-25,
                +0.2867392244403437032979483391426E-26,
                +0.2044292892504292670281779574210E-26,
                -0.1518636633820462568371346802911E-26,
                +0.8110181098187575886132279107037E-28,
                +0.3580379354773586091127173703270E-27,
                -0.1692929018927902509593057175448E-27,
                -0.2222902499702427639067758527774E-28,
                +0.5424535127145969655048600401128E-28,
                -0.1787068401578018688764912993304E-28,
                -0.6565479068722814938823929437880E-29,
                +0.7807013165061145280922067706839E-29,
                -0.1816595260668979717379333152221E-29,
                -0.1287704952660084820376875598959E-29,
                +0.1114548172988164547413709273694E-29,
                -0.1808343145039336939159368876687E-30,
                -0.2231677718203771952232448228939E-30,
                +0.1619029596080341510617909803614E-30,
                -0.1834079908804941413901308439210E-31
            }
            ;
        double[] ai1cs = {
                -0.2846744181881478674100372468307E-01,
                -0.1922953231443220651044448774979E-01,
                -0.6115185857943788982256249917785E-03,
                -0.2069971253350227708882823777979E-04,
                +0.8585619145810725565536944673138E-05,
                +0.1049498246711590862517453997860E-05,
                -0.2918338918447902202093432326697E-06,
                -0.1559378146631739000160680969077E-07,
                +0.1318012367144944705525302873909E-07,
                -0.1448423418183078317639134467815E-08,
                -0.2908512243993142094825040993010E-09,
                +0.1266388917875382387311159690403E-09,
                -0.1664947772919220670624178398580E-10,
                -0.1666653644609432976095937154999E-11,
                +0.1242602414290768265232168472017E-11,
                -0.2731549379672432397251461428633E-12,
                +0.2023947881645803780700262688981E-13,
                +0.7307950018116883636198698126123E-14,
                -0.3332905634404674943813778617133E-14,
                +0.7175346558512953743542254665670E-15,
                -0.6982530324796256355850629223656E-16,
                -0.1299944201562760760060446080587E-16,
                +0.8120942864242798892054678342860E-17,
                -0.2194016207410736898156266643783E-17,
                +0.3630516170029654848279860932334E-18,
                -0.1695139772439104166306866790399E-19,
                -0.1288184829897907807116882538222E-19,
                +0.5694428604967052780109991073109E-20,
                -0.1459597009090480056545509900287E-20,
                +0.2514546010675717314084691334485E-21,
                -0.1844758883139124818160400029013E-22,
                -0.6339760596227948641928609791999E-23,
                +0.3461441102031011111108146626560E-23,
                -0.1017062335371393547596541023573E-23,
                +0.2149877147090431445962500778666E-24,
                -0.3045252425238676401746206173866E-25,
                +0.5238082144721285982177634986666E-27,
                +0.1443583107089382446416789503999E-26,
                -0.6121302074890042733200670719999E-27,
                +0.1700011117467818418349189802666E-27,
                -0.3596589107984244158535215786666E-28,
                +0.5448178578948418576650513066666E-29,
                -0.2731831789689084989162564266666E-30,
                -0.1858905021708600715771903999999E-30,
                +0.9212682974513933441127765333333E-31,
                -0.2813835155653561106370833066666E-31
            }
            ;
        double[] bi1cs = {
                -0.19717132610998597316138503218149E-02,
                +0.40734887667546480608155393652014,
                +0.34838994299959455866245037783787E-01,
                +0.15453945563001236038598401058489E-02,
                +0.41888521098377784129458832004120E-04,
                +0.76490267648362114741959703966069E-06,
                +0.10042493924741178689179808037238E-07,
                +0.99322077919238106481371298054863E-10,
                +0.76638017918447637275200171681349E-12,
                +0.47414189238167394980388091948160E-14,
                +0.24041144040745181799863172032000E-16,
                +0.10171505007093713649121100799999E-18,
                +0.36450935657866949458491733333333E-21,
                +0.11205749502562039344810666666666E-23,
                +0.29875441934468088832000000000000E-26,
                +0.69732310939194709333333333333333E-29,
                +0.14367948220620800000000000000000E-31
            }
            ;
        double value;

        switch (data.nti1)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nti1 = r8_inits(bi1cs, 17, eta);
                data.ntai1 = r8_inits(ai1cs, 46, eta);
                data.ntai12 = r8_inits(ai12cs, 69, eta);
                data.xmin = 2.0 * r8_mach(1);
                data.xsml = Math.Sqrt(8.0 * r8_mach(3));
                break;
        }

        double y = Math.Abs(x);

        if (y <= data.xmin)
        {
            value = 0.0;
        }
        else if (y <= data.xsml)
        {
            value = 0.5 * x * Math.Exp(-y);
        }
        else
        {
            switch (y)
            {
                case <= 3.0:
                    value = x * (0.875 + r8_csevl(y * y / 4.5 - 1.0, bi1cs, data.nti1))
                              * Math.Exp(-y);
                    break;
                case <= 8.0:
                {
                    value = (0.375 + r8_csevl((48.0 / y - 11.0) / 5.0,
                        ai1cs, data.ntai1)) / Math.Sqrt(y);
                    switch (x)
                    {
                        case < 0.0:
                            value = -value;
                            break;
                    }

                    break;
                }
                default:
                {
                    value = (0.375 + r8_csevl(16.0 / y - 1.0, ai12cs, data.ntai12)) / Math.Sqrt(y);
                    switch (x)
                    {
                        case < 0.0:
                            value = -value;
                            break;
                    }

                    break;
                }
            }
        }

        return value;
    }

    public class r8BESJ0Data
    {
        public int ntj0;
        public double xsml;

        public r8B0MPData edata = new();
    }

    public static double r8_besj0(ref BesselData globaldata, ref r8BESJ0Data data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESJ0 evaluates the Bessel function J of order 0 of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESJ0, the Bessel function J of order 0 of X.
        //
    {
        double ampl = 0;
        double[] bj0cs = {
                +0.10025416196893913701073127264074,
                -0.66522300776440513177678757831124,
                +0.24898370349828131370460468726680,
                -0.33252723170035769653884341503854E-01,
                +0.23114179304694015462904924117729E-02,
                -0.99112774199508092339048519336549E-04,
                +0.28916708643998808884733903747078E-05,
                -0.61210858663032635057818407481516E-07,
                +0.98386507938567841324768748636415E-09,
                -0.12423551597301765145515897006836E-10,
                +0.12654336302559045797915827210363E-12,
                -0.10619456495287244546914817512959E-14,
                +0.74706210758024567437098915584000E-17,
                -0.44697032274412780547627007999999E-19,
                +0.23024281584337436200523093333333E-21,
                -0.10319144794166698148522666666666E-23,
                +0.40608178274873322700800000000000E-26,
                -0.14143836005240913919999999999999E-28,
                +0.43910905496698880000000000000000E-31
            }
            ;
        double theta = 0;
        double value;

        switch (data.ntj0)
        {
            case 0:
                data.ntj0 = r8_inits(bj0cs, 19, 0.1 * r8_mach(3));
                data.xsml = Math.Sqrt(4.0 * r8_mach(3));
                break;
        }

        double y = Math.Abs(x);

        if (y <= data.xsml)
        {
            value = 1.0;
        }
        else
        {
            switch (y)
            {
                case <= 4.0:
                    value = r8_csevl(0.125 * y * y - 1.0, bj0cs, data.ntj0);
                    break;
                default:
                    r8_b0mp(ref globaldata, ref data.edata, y, ref ampl, ref theta);
                    value = ampl * Math.Cos(theta);
                    break;
            }
        }

        return value;
    }

    public class r8BESJ1Data
    {
        public int ntj1;
        public double xsml;
        public double xmin;
        public r8B1MPData edata = new();
    }
    public static double r8_besj1(ref BesselData globaldata, ref r8BESJ1Data data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESJ1 evaluates the Bessel function J of order 1 of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESJ1, the Bessel function J of order 1 of X.
        //
    {
        double ampl = 0;
        double[] bj1cs = {
                -0.117261415133327865606240574524003,
                -0.253615218307906395623030884554698,
                +0.501270809844695685053656363203743E-01,
                -0.463151480962508191842619728789772E-02,
                +0.247996229415914024539124064592364E-03,
                -0.867894868627882584521246435176416E-05,
                +0.214293917143793691502766250991292E-06,
                -0.393609307918317979229322764073061E-08,
                +0.559118231794688004018248059864032E-10,
                -0.632761640466139302477695274014880E-12,
                +0.584099161085724700326945563268266E-14,
                -0.448253381870125819039135059199999E-16,
                +0.290538449262502466306018688000000E-18,
                -0.161173219784144165412118186666666E-20,
                +0.773947881939274637298346666666666E-23,
                -0.324869378211199841143466666666666E-25,
                +0.120223767722741022720000000000000E-27,
                -0.395201221265134933333333333333333E-30,
                +0.116167808226645333333333333333333E-32
            }
            ;
        double theta = 0;
        double value;

        switch (data.ntj1)
        {
            case 0:
                data.ntj1 = r8_inits(bj1cs, 19, 0.1 * r8_mach(3));
                data.xsml = Math.Sqrt(4.0 * r8_mach(3));
                data.xmin = 2.0 * r8_mach(1);
                break;
        }

        double y = Math.Abs(x);

        if (y <= data.xmin)
        {
            value = 0.0;
        }
        else if (y <= data.xsml)
        {
            value = 0.5 * x;
        }
        else
        {
            switch (y)
            {
                case <= 4.0:
                    value = x * (0.25 + r8_csevl(0.125 * y * y - 1.0, bj1cs, data.ntj1));
                    break;
                default:
                {
                    r8_b1mp(ref globaldata, ref data.edata, y, ref ampl, ref theta);
                    value = x switch
                    {
                        < 0.0 => -ampl * Math.Cos(theta),
                        _ => +ampl * Math.Cos(theta)
                    };

                    break;
                }
            }
        }

        return value;
    }

    public class r8BESKData
    {
        public r8BESKSData edata = new();
    }
        
    public static double r8_besk(ref BesselData globaldata, ref r8BESKData data, double nu, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESK evaluates the Bessel function K of order NU of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    03 November 2012
        //
        //  Author:
        //
        //    John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double NU, the order.
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESK, the Bessel function K of order NU at X.
        //
    {
        double xnu = nu - (int) nu;
        int nin = (int) nu + 1;
        double[] bke = new double[nin];
        r8_besks(ref globaldata.gdata, ref globaldata.kdata, ref data.edata, xnu, x, nin, ref bke);

        double value = bke[nin - 1];

        return value;
    }

    public class r8BESK0Data
    {
        public int ntk0;
        public double xsml;
        public double xmax;
        public r8BESI0Data edata = new();
        public r8BESK0EData kedata = new();
    }

    public static double r8_besk0(ref BesselData globaldata, ref r8BESK0Data data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESK0 evaluates the Bessel function K of order 0 of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESK0, the Bessel function K of order 0 of X.
        //
    {
        double[] bk0cs = {
                -0.353273932339027687201140060063153E-01,
                +0.344289899924628486886344927529213,
                +0.359799365153615016265721303687231E-01,
                +0.126461541144692592338479508673447E-02,
                +0.228621210311945178608269830297585E-04,
                +0.253479107902614945730790013428354E-06,
                +0.190451637722020885897214059381366E-08,
                +0.103496952576336245851008317853089E-10,
                +0.425981614279108257652445327170133E-13,
                +0.137446543588075089694238325440000E-15,
                +0.357089652850837359099688597333333E-18,
                +0.763164366011643737667498666666666E-21,
                +0.136542498844078185908053333333333E-23,
                +0.207527526690666808319999999999999E-26,
                +0.271281421807298560000000000000000E-29,
                +0.308259388791466666666666666666666E-32
            }
            ;
        double value = 0;
        double y;

        switch (data.ntk0)
        {
            case 0:
                data.ntk0 = r8_inits(bk0cs, 16, 0.1 * r8_mach(3));
                data.xsml = Math.Sqrt(4.0 * r8_mach(3));
                data.xmax = -Math.Log(r8_mach(1));
                data.xmax -= 0.5 * data.xmax * Math.Log(data.xmax) / (data.xmax + 0.5);
                break;
        }

        switch (x)
        {
            case <= 0.0:
                Console.WriteLine("");
                Console.WriteLine("R8_BESK0 = Fatal error!");
                Console.WriteLine("  X <= 0.");
                return 1;
        }

        if (x <= data.xsml)
        {
            y = 0.0;
            value = -Math.Log(0.5 * x) * r8_besi0(ref globaldata, ref data.edata, x)
                - 0.25 + r8_csevl(0.5 * y - 1.0, bk0cs, data.ntk0);
        }
        else
        {
            switch (x)
            {
                case <= 2.0:
                    y = x * x;
                    value = -Math.Log(0.5 * x) * r8_besi0(ref globaldata, ref data.edata, x)
                        - 0.25 + r8_csevl(0.5 * y - 1.0, bk0cs, data.ntk0);
                    break;
                default:
                {
                    if (x <= data.xmax)
                    {
                        value = Math.Exp(-x) * r8_besk0e(ref globaldata, ref data.kedata, x);
                    }
                    else
                    {
                        value = 0.0;
                    }

                    break;
                }
            }
        }

        return value;
    }

    public class r8BESK0EData
    {
        public int  ntk0;
        public int ntak0;
        public int ntak02;
        public double xsml;

        public r8BESI0Data edata = new();

    }
    public static double r8_besk0e(ref BesselData globaldata, ref r8BESK0EData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESK0E evaluates the exponentially scaled Bessel function K0(X).
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESK0E, the exponentially scaled Bessel 
        //    function K0(X).
        //
    {
        double[] ak02cs = {
                -0.1201869826307592239839346212452E-01,
                -0.9174852691025695310652561075713E-02,
                +0.1444550931775005821048843878057E-03,
                -0.4013614175435709728671021077879E-05,
                +0.1567831810852310672590348990333E-06,
                -0.7770110438521737710315799754460E-08,
                +0.4611182576179717882533130529586E-09,
                -0.3158592997860565770526665803309E-10,
                +0.2435018039365041127835887814329E-11,
                -0.2074331387398347897709853373506E-12,
                +0.1925787280589917084742736504693E-13,
                -0.1927554805838956103600347182218E-14,
                +0.2062198029197818278285237869644E-15,
                -0.2341685117579242402603640195071E-16,
                +0.2805902810643042246815178828458E-17,
                -0.3530507631161807945815482463573E-18,
                +0.4645295422935108267424216337066E-19,
                -0.6368625941344266473922053461333E-20,
                +0.9069521310986515567622348800000E-21,
                -0.1337974785423690739845005311999E-21,
                +0.2039836021859952315522088960000E-22,
                -0.3207027481367840500060869973333E-23,
                +0.5189744413662309963626359466666E-24,
                -0.8629501497540572192964607999999E-25,
                +0.1472161183102559855208038400000E-25,
                -0.2573069023867011283812351999999E-26,
                +0.4601774086643516587376640000000E-27,
                -0.8411555324201093737130666666666E-28,
                +0.1569806306635368939301546666666E-28,
                -0.2988226453005757788979199999999E-29,
                +0.5796831375216836520618666666666E-30,
                -0.1145035994347681332155733333333E-30,
                +0.2301266594249682802005333333333E-31
            }
            ;
        double[] ak0cs = {
                -0.7643947903327941424082978270088E-01,
                -0.2235652605699819052023095550791E-01,
                +0.7734181154693858235300618174047E-03,
                -0.4281006688886099464452146435416E-04,
                +0.3081700173862974743650014826660E-05,
                -0.2639367222009664974067448892723E-06,
                +0.2563713036403469206294088265742E-07,
                -0.2742705549900201263857211915244E-08,
                +0.3169429658097499592080832873403E-09,
                -0.3902353286962184141601065717962E-10,
                +0.5068040698188575402050092127286E-11,
                -0.6889574741007870679541713557984E-12,
                +0.9744978497825917691388201336831E-13,
                -0.1427332841884548505389855340122E-13,
                +0.2156412571021463039558062976527E-14,
                -0.3349654255149562772188782058530E-15,
                +0.5335260216952911692145280392601E-16,
                -0.8693669980890753807639622378837E-17,
                +0.1446404347862212227887763442346E-17,
                -0.2452889825500129682404678751573E-18,
                +0.4233754526232171572821706342400E-19,
                -0.7427946526454464195695341294933E-20,
                +0.1323150529392666866277967462400E-20,
                -0.2390587164739649451335981465599E-21,
                +0.4376827585923226140165712554666E-22,
                -0.8113700607345118059339011413333E-23,
                +0.1521819913832172958310378154666E-23,
                -0.2886041941483397770235958613333E-24,
                +0.5530620667054717979992610133333E-25,
                -0.1070377329249898728591633066666E-25,
                +0.2091086893142384300296328533333E-26,
                -0.4121713723646203827410261333333E-27,
                +0.8193483971121307640135680000000E-28,
                -0.1642000275459297726780757333333E-28,
                +0.3316143281480227195890346666666E-29,
                -0.6746863644145295941085866666666E-30,
                +0.1382429146318424677635413333333E-30,
                -0.2851874167359832570811733333333E-31
            }
            ;
        double[] bk0cs = {
                -0.353273932339027687201140060063153E-01,
                +0.344289899924628486886344927529213,
                +0.359799365153615016265721303687231E-01,
                +0.126461541144692592338479508673447E-02,
                +0.228621210311945178608269830297585E-04,
                +0.253479107902614945730790013428354E-06,
                +0.190451637722020885897214059381366E-08,
                +0.103496952576336245851008317853089E-10,
                +0.425981614279108257652445327170133E-13,
                +0.137446543588075089694238325440000E-15,
                +0.357089652850837359099688597333333E-18,
                +0.763164366011643737667498666666666E-21,
                +0.136542498844078185908053333333333E-23,
                +0.207527526690666808319999999999999E-26,
                +0.271281421807298560000000000000000E-29,
                +0.308259388791466666666666666666666E-32
            }
            ;
        double value;
        double y;

        switch (data.ntk0)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.ntk0 = r8_inits(bk0cs, 16, eta);
                data.ntak0 = r8_inits(ak0cs, 38, eta);
                data.ntak02 = r8_inits(ak02cs, 33, eta);
                data.xsml = Math.Sqrt(4.0 * r8_mach(3));
                break;
        }

        switch (x)
        {
            case <= 0.0:
                Console.WriteLine("");
                Console.WriteLine("R8_BESK0E = Fatal error!");
                Console.WriteLine("  X <= 0.");
                return 1;
        }

        if (x <= data.xsml)
        {
            y = 0.0;
            value = Math.Exp(x) * (-Math.Log(0.5 * x) * r8_besi0(ref globaldata, ref data.edata, x) - 0.25
                                   + r8_csevl(0.5 * y - 1.0, bk0cs, data.ntk0));
        }
        else
        {
            switch (x)
            {
                case <= 2.0:
                    y = x * x;
                    value = Math.Exp(x) * (-Math.Log(0.5 * x) * r8_besi0(ref globaldata, ref data.edata, x) - 0.25
                                           + r8_csevl(0.5 * y - 1.0, bk0cs, data.ntk0));
                    break;
                case <= 8.0:
                    value = (1.25 + r8_csevl((16.0 / x - 5.0) / 3.0, ak0cs,
                        data.ntak0)) / Math.Sqrt(x);
                    break;
                default:
                    value = (1.25 + r8_csevl(16.0 / x - 1.0, ak02cs, data.ntak02)) / Math.Sqrt(x);
                    break;
            }
        }

        return value;
    }

    public class r8BESK1Data
    {
        public int ntk1;

        public double xmin = 0;
        public double xsml;
        public double xmax;

        public r8BESI1Data edata = new();
        public r8BESK1EData e1data = new();

    }
        
    public static double r8_besk1(ref BesselData globaldata, ref r8BESK1Data data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESK1 evaluates the Bessel function K of order 1 of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESK1, the Bessel function K of order 1 of X.
        //
    {
        double[] bk1cs = {
                +0.25300227338947770532531120868533E-01,
                -0.35315596077654487566723831691801,
                -0.12261118082265714823479067930042,
                -0.69757238596398643501812920296083E-02,
                -0.17302889575130520630176507368979E-03,
                -0.24334061415659682349600735030164E-05,
                -0.22133876307347258558315252545126E-07,
                -0.14114883926335277610958330212608E-09,
                -0.66669016941993290060853751264373E-12,
                -0.24274498505193659339263196864853E-14,
                -0.70238634793862875971783797120000E-17,
                -0.16543275155100994675491029333333E-19,
                -0.32338347459944491991893333333333E-22,
                -0.53312750529265274999466666666666E-25,
                -0.75130407162157226666666666666666E-28,
                -0.91550857176541866666666666666666E-31
            }
            ;
        double value = 0;

        double y;

        switch (data.ntk1)
        {
            case 0:
                data.ntk1 = r8_inits(bk1cs, 16, 0.1 * r8_mach(3));
                //  xmin = exp ( r8_max ( log ( r8_mach ( 1 ) ), 
                //    - log ( r8_mach ( 2 ) ) ) + 0.01 );
                data.xsml = Math.Sqrt(4.0 * r8_mach(3));
                data.xmax = -Math.Log(r8_mach(1));
                data.xmax = data.xmax - 0.5 * data.xmax * Math.Log(data.xmax)
                    / (data.xmax + 0.5) - 0.01;
                break;
        }

        switch (x)
        {
            case <= 0.0:
                Console.WriteLine("");
                Console.WriteLine("R8_BESK1 = Fatal error!");
                Console.WriteLine("  X <= 0.");
                return 1;
        }

        if (x <= data.xsml)
        {
            y = 0.0;
            value = Math.Log(0.5 * x) * r8_besi1(ref globaldata, ref data.edata, x) + (0.75
                + r8_csevl(0.5 * y - 1.0, bk1cs, data.ntk1)) / x;
        }
        else
        {
            switch (x)
            {
                case <= 2.0:
                    y = x * x;
                    value = Math.Log(0.5 * x) * r8_besi1(ref globaldata, ref data.edata, x) + (0.75
                        + r8_csevl(0.5 * y - 1.0, bk1cs, data.ntk1)) / x;
                    break;
                default:
                {
                    if (x <= data.xmax)
                    {
                        value = Math.Exp(-x) * r8_besk1e(ref globaldata, ref data.e1data, x);
                    }
                    else
                    {
                        value = 0.0;
                    }

                    break;
                }
            }
        }

        return value;
    }

    public class r8BESK1EData
    {
        public int ntk1;
        public int ntak1;
        public int ntak12;
        public double xsml;
        public r8BESI1Data edata = new();
    }
        
    public static double r8_besk1e(ref BesselData globaldata, ref r8BESK1EData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESK1E evaluates the exponentially scaled Bessel function K1(X).
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESK1E, the exponentially scaled Bessel 
        //    function K1(X).
        //
    {
        double[] ak12cs = {
                +0.6379308343739001036600488534102E-01,
                +0.2832887813049720935835030284708E-01,
                -0.2475370673905250345414545566732E-03,
                +0.5771972451607248820470976625763E-05,
                -0.2068939219536548302745533196552E-06,
                +0.9739983441381804180309213097887E-08,
                -0.5585336140380624984688895511129E-09,
                +0.3732996634046185240221212854731E-10,
                -0.2825051961023225445135065754928E-11,
                +0.2372019002484144173643496955486E-12,
                -0.2176677387991753979268301667938E-13,
                +0.2157914161616032453939562689706E-14,
                -0.2290196930718269275991551338154E-15,
                +0.2582885729823274961919939565226E-16,
                -0.3076752641268463187621098173440E-17,
                +0.3851487721280491597094896844799E-18,
                -0.5044794897641528977117282508800E-19,
                +0.6888673850418544237018292223999E-20,
                -0.9775041541950118303002132480000E-21,
                +0.1437416218523836461001659733333E-21,
                -0.2185059497344347373499733333333E-22,
                +0.3426245621809220631645388800000E-23,
                -0.5531064394246408232501248000000E-24,
                +0.9176601505685995403782826666666E-25,
                -0.1562287203618024911448746666666E-25,
                +0.2725419375484333132349439999999E-26,
                -0.4865674910074827992378026666666E-27,
                +0.8879388552723502587357866666666E-28,
                -0.1654585918039257548936533333333E-28,
                +0.3145111321357848674303999999999E-29,
                -0.6092998312193127612416000000000E-30,
                +0.1202021939369815834623999999999E-30,
                -0.2412930801459408841386666666666E-31
            }
            ;
        double[] ak1cs = {
                +0.27443134069738829695257666227266,
                +0.75719899531993678170892378149290E-01,
                -0.14410515564754061229853116175625E-02,
                +0.66501169551257479394251385477036E-04,
                -0.43699847095201407660580845089167E-05,
                +0.35402774997630526799417139008534E-06,
                -0.33111637792932920208982688245704E-07,
                +0.34459775819010534532311499770992E-08,
                -0.38989323474754271048981937492758E-09,
                +0.47208197504658356400947449339005E-10,
                -0.60478356628753562345373591562890E-11,
                +0.81284948748658747888193837985663E-12,
                -0.11386945747147891428923915951042E-12,
                +0.16540358408462282325972948205090E-13,
                -0.24809025677068848221516010440533E-14,
                +0.38292378907024096948429227299157E-15,
                -0.60647341040012418187768210377386E-16,
                +0.98324256232648616038194004650666E-17,
                -0.16284168738284380035666620115626E-17,
                +0.27501536496752623718284120337066E-18,
                -0.47289666463953250924281069568000E-19,
                +0.82681500028109932722392050346666E-20,
                -0.14681405136624956337193964885333E-20,
                +0.26447639269208245978085894826666E-21,
                -0.48290157564856387897969868800000E-22,
                +0.89293020743610130180656332799999E-23,
                -0.16708397168972517176997751466666E-23,
                +0.31616456034040694931368618666666E-24,
                -0.60462055312274989106506410666666E-25,
                +0.11678798942042732700718421333333E-25,
                -0.22773741582653996232867840000000E-26,
                +0.44811097300773675795305813333333E-27,
                -0.88932884769020194062336000000000E-28,
                +0.17794680018850275131392000000000E-28,
                -0.35884555967329095821994666666666E-29,
                +0.72906290492694257991679999999999E-30,
                -0.14918449845546227073024000000000E-30,
                +0.30736573872934276300799999999999E-31
            }
            ;
        double[] bk1cs = {
                +0.25300227338947770532531120868533E-01,
                -0.35315596077654487566723831691801,
                -0.12261118082265714823479067930042,
                -0.69757238596398643501812920296083E-02,
                -0.17302889575130520630176507368979E-03,
                -0.24334061415659682349600735030164E-05,
                -0.22133876307347258558315252545126E-07,
                -0.14114883926335277610958330212608E-09,
                -0.66669016941993290060853751264373E-12,
                -0.24274498505193659339263196864853E-14,
                -0.70238634793862875971783797120000E-17,
                -0.16543275155100994675491029333333E-19,
                -0.32338347459944491991893333333333E-22,
                -0.53312750529265274999466666666666E-25,
                -0.75130407162157226666666666666666E-28,
                -0.91550857176541866666666666666666E-31
            }
            ;
        double value;

        double y;

        switch (data.ntk1)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.ntk1 = r8_inits(bk1cs, 16, eta);
                data.ntak1 = r8_inits(ak1cs, 38, eta);
                data.ntak12 = r8_inits(ak12cs, 33, eta);
                //  xmin = exp ( r8_max ( log ( r8_mach ( 1 ) ), 
                //    - log ( r8_mach ( 2 ) ) ) + 0.01 );
                data.xsml = Math.Sqrt(4.0 * r8_mach(3));
                break;
        }

        switch (x)
        {
            case <= 0.0:
                Console.WriteLine("");
                Console.WriteLine("R8_BESK1E = Fatal error!");
                Console.WriteLine("  X <= 0.");
                return 1;
        }

        if (x <= data.xsml)
        {
            y = 0.0;
            value = Math.Exp(x) * (Math.Log(0.5 * x) * r8_besi1(ref globaldata, ref data.edata, x)
                                   + (0.75 + r8_csevl(0.5 * y - 1.0, bk1cs, data.ntk1)) / x);
        }
        else
        {
            switch (x)
            {
                case <= 2.0:
                    y = x * x;
                    value = Math.Exp(x) * (Math.Log(0.5 * x) * r8_besi1(ref globaldata, ref data.edata, x)
                                           + (0.75 + r8_csevl(0.5 * y - 1.0, bk1cs, data.ntk1)) / x);
                    break;
                case <= 8.0:
                    value = (1.25
                             + r8_csevl((16.0 / x - 5.0) / 3.0, ak1cs, data.ntak1)) / Math.Sqrt(x);
                    break;
                default:
                    value = (1.25 +
                             r8_csevl(16.0 / x - 1.0, ak12cs, data.ntak12)) / Math.Sqrt(x);
                    break;
            }
        }

        return value;
    }

    private static void r8_beskes(ref r8GammaData gdata, ref r8KnusData kdata, double xnu, double x, int nin, ref double[] bke)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESKES: a sequence of exponentially scaled K Bessel functions at X.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double XNU, ?
        //    |XNU| < 1.
        //
        //    Input, double X, the argument.
        //
        //    Input, int NIN, indicates the number of terms to compute.
        //
        //    Output, double BKE(abs(NIN)), the exponentially scaled 
        //    K Bessel functions.
        //
    {
        double bknu1 = 0;
        int i;
        //double vend;
        int iswtch = 0;
            
        double v = Math.Abs(xnu);
        int n = i4_abs(nin);

        switch (v)
        {
            case >= 1.0:
                Console.WriteLine("");
                Console.WriteLine("R8_BESKES - Fatal error!");
                Console.WriteLine("  |XNU| must be less than 1.");
                return;
        }

        switch (x)
        {
            case <= 0.0:
                Console.WriteLine("");
                Console.WriteLine("R8_BESKES - Fatal error!");
                Console.WriteLine("  X <= 0.");
                return;
        }

        switch (n)
        {
            case 0:
                Console.WriteLine("");
                Console.WriteLine("R8_BESKES - Fatal error!");
                Console.WriteLine("  N = 0.");
                return;
        }

        r8_knus(ref gdata, ref kdata, v, x, ref bke[0], ref bknu1, ref iswtch);

        switch (n)
        {
            case 1:
                return;
        }

        double vincr = nin switch
        {
            < 0 => -1.0,
            _ => +1.0
        };

        double direct = xnu switch
        {
            < 0.0 => -vincr,
            _ => vincr
        };

        bke[1] = bknu1;

        switch (direct)
        {
            case < 0.0:
                r8_knus(ref gdata, ref kdata, Math.Abs(xnu + vincr), x, ref bke[1], ref bknu1, ref iswtch);
                break;
        }

        switch (n)
        {
            case 2:
                return;
        }

        //vend = fabs ( xnu + ( double ) ( nin ) ) - 1.0;

        v = xnu;
        for (i = 3; i <= n; i++)
        {
            v += vincr;
            bke[i - 1] = 2.0 * v * bke[i - 2] / x + bke[i - 3];
        }
    }

    public class r8BESKSData
    {
        public double xmax;
    }

    private static void r8_besks(ref r8GammaData gdata, ref r8KnusData kdata, ref r8BESKSData data, double xnu, double x, int nin, ref double[] bk)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESKS evaluates a sequence of K Bessel functions at X.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double XNU, ?
        //    |XNU| < 1.
        //
        //    Input, double X, the argument.
        //
        //    Input, int NIN, indicates the number of terms to compute.
        //
        //    Output, double BK(abs(NIN)), the K Bessel functions.
        //
    {
        int i;

        switch (data.xmax)
        {
            case 0.0:
                data.xmax = -Math.Log(r8_mach(1));
                data.xmax += 0.5 * Math.Log(3.14 * 0.5 / data.xmax);
                break;
        }

        r8_beskes(ref gdata, ref kdata, xnu, x, nin, ref bk);

        double expxi = Math.Exp(-x);
        int n = i4_abs(nin);

        for (i = 0; i < n; i++)
        {
            bk[i] = expxi * bk[i];
        }
    }

    public class r8BESY0Data
    {
        public int nty0;
        public double xsml;

        public r8B0MPData edata = new();
        public r8BESJ0Data jdata = new();
    }
        
    public static double r8_besy0(ref BesselData globaldata, ref r8BESY0Data data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESY0 evaluates the Bessel function Y of order 0 of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESY0, the Bessel function Y of order 0 of X.
        //
    {
        const double alnhaf = -0.69314718055994530941723212145818;
        double ampl = 0;
        double[] by0cs = {
                -0.1127783939286557321793980546028E-01,
                -0.1283452375604203460480884531838,
                -0.1043788479979424936581762276618,
                +0.2366274918396969540924159264613E-01,
                -0.2090391647700486239196223950342E-02,
                +0.1039754539390572520999246576381E-03,
                -0.3369747162423972096718775345037E-05,
                +0.7729384267670667158521367216371E-07,
                -0.1324976772664259591443476068964E-08,
                +0.1764823261540452792100389363158E-10,
                -0.1881055071580196200602823012069E-12,
                +0.1641865485366149502792237185749E-14,
                -0.1195659438604606085745991006720E-16,
                +0.7377296297440185842494112426666E-19,
                -0.3906843476710437330740906666666E-21,
                +0.1795503664436157949829120000000E-23,
                -0.7229627125448010478933333333333E-26,
                +0.2571727931635168597333333333333E-28,
                -0.8141268814163694933333333333333E-31
            }
            ;
        double theta = 0;
        const double twodpi = 0.636619772367581343075535053490057;
        double value = 0;
        double y;

        switch (data.nty0)
        {
            case 0:
                data.nty0 = r8_inits(by0cs, 19, 0.1 * r8_mach(3));
                data.xsml = Math.Sqrt(4.0 * r8_mach(3));
                break;
        }

        switch (x)
        {
            case <= 0.0:
                Console.WriteLine("");
                Console.WriteLine("R8_BESY0 - Fatal error!");
                Console.WriteLine("  X <= 0.");
                return 1;
        }

        if (x <= data.xsml)
        {
            y = 0.0;
            value = twodpi * (alnhaf + Math.Log(x)) * r8_besj0(ref globaldata, ref data.jdata, x)
                    + 0.375 + r8_csevl(0.125 * y - 1.0, by0cs, data.nty0);
        }
        else
        {
            switch (x)
            {
                case <= 4.0:
                    y = x * x;
                    value = twodpi * (alnhaf + Math.Log(x)) * r8_besj0(ref globaldata, ref data.jdata, x) + 0.375
                        + r8_csevl(0.125 * y - 1.0, by0cs, data.nty0);
                    break;
                default:
                    r8_b0mp(ref globaldata, ref data.edata, x, ref ampl, ref theta);
                    value = ampl * Math.Sin(theta);
                    break;
            }
        }

        return value;
    }

    public class r8BESY1Data
    {
        public int nty1;
        public double xmin;

        public r8B1MPData edata = new();
        public r8BESJ1Data jdata = new();
    }

    public static double r8_besy1(ref BesselData globaldata, ref r8BESY1Data data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BESY1 evaluates the Bessel function Y of order 1 of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    13 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BESY1, the Bessel function Y of order 1 of X.
        //
    {
        double ampl = 0;
        double[] by1cs = {
                +0.320804710061190862932352018628015E-01,
                +0.126270789743350044953431725999727E+01,
                +0.649996189992317500097490637314144E-02,
                -0.893616452886050411653144160009712E-01,
                +0.132508812217570954512375510370043E-01,
                -0.897905911964835237753039508298105E-03,
                +0.364736148795830678242287368165349E-04,
                -0.100137438166600055549075523845295E-05,
                +0.199453965739017397031159372421243E-07,
                -0.302306560180338167284799332520743E-09,
                +0.360987815694781196116252914242474E-11,
                -0.348748829728758242414552947409066E-13,
                +0.278387897155917665813507698517333E-15,
                -0.186787096861948768766825352533333E-17,
                +0.106853153391168259757070336000000E-19,
                -0.527472195668448228943872000000000E-22,
                +0.227019940315566414370133333333333E-24,
                -0.859539035394523108693333333333333E-27,
                +0.288540437983379456000000000000000E-29,
                -0.864754113893717333333333333333333E-32
            }
            ;
        double theta = 0;
        const double twodpi = 0.636619772367581343075535053490057;
        double value = 0;
        double y;

        switch (data.nty1)
        {
            case 0:
                data.nty1 = r8_inits(by1cs, 20, 0.1 * r8_mach(3));
                data.xmin = 1.571 * Math.Exp(r8_max(Math.Log(r8_mach(1)),
                    -Math.Log(r8_mach(2))) + 0.01);
                //  xsml = sqrt ( 4.0 * r8_mach ( 3 ) );
                break;
        }

        switch (x)
        {
            case <= 0.0:
                Console.WriteLine("");
                Console.WriteLine("R8_BESY1 - Fatal error!");
                Console.WriteLine("  X <= 0.");
                return 1;
        }

        if (x <= data.xmin)
        {
            y = 0.0;
            value = twodpi * Math.Log(0.5 * x) * r8_besj1(ref globaldata, ref data.jdata, x)
                    + (0.5 + r8_csevl(0.125 * y - 1.0, by1cs, data.nty1)) / x;
        }
        else
        {
            switch (x)
            {
                case <= 4.0:
                    y = x * x;
                    value = twodpi * Math.Log(0.5 * x) * r8_besj1(ref globaldata, ref data.jdata, x)
                            + (0.5 + r8_csevl(0.125 * y - 1.0, by1cs, data.nty1)) / x;
                    break;
                default:
                    r8_b1mp(ref globaldata, ref data.edata, x, ref ampl, ref theta);
                    value = ampl * Math.Sin(theta);
                    break;
            }
        }

        return value;
    }

    public class r8BetaData
    {
        public double xmin;
        public double xmax;
        public r8LBetaData lbetadata = new();
    }
        
    public static double r8_beta(ref r8GammaData gdata, ref BesselData globaldata, ref r8BetaData data, double a, double b)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BETA evaluates the beta function of R8 arguments.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    05 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double A, B, the arguments.
        //
        //    Output, double R8_BETA, the beta function of A and B.
        //
    {
        double value = 0;

        switch (data.xmax)
        {
            case 0.0:
                r8_gaml(ref data.xmin, ref data.xmax);
                //  alnsml = log ( r8_mach ( 1 ) );
                break;
        }

        if (a <= 0.0 || b <= 0.0)
        {
            Console.WriteLine("");
            Console.WriteLine("R8_BETA - Fatal error!");
            Console.WriteLine("  A and B must be greater than 0.");
            return 1;
        }

        if (a + b < data.xmax)
        {
            value = r8_gamma(ref gdata, a) * r8_gamma(ref gdata, b) / r8_gamma(ref gdata, a + b);
            return value;
        }

        value = r8_lbeta(ref data.lbetadata, ref gdata, a, b);

        value = Math.Exp(value);

        return value;
    }

    public class r8Beta1Data
    {
        public double eps;
        public double alneps;
        public double alnsml;
        public double sml;
        public r8LBetaData lbetadata = new();
    }
        
    public static double r8_betai(ref r8Beta1Data data, ref r8GammaData gammadata, double x, double pin, double qin)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BETAI evaluates the incomplete beta ratio of R8 arguments.
        //
        //  Discussion:
        //
        //    The incomplete Beta function ratio is the probability that a
        //    random variable from a beta distribution having parameters
        //    P and Q will be less than or equal to X.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    13 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Nancy Bosten, EL Battiste,
        //    Remark on Algorithm 179: 
        //    Incomplete Beta Ratio,
        //    Communications of the ACM,
        //    Volume 17, Number 3, March 1974, pages 156-157.
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the upper limit of integration.
        //    0.0 <= X <= 1.0.
        //
        //    Input, double PIN, the first distribution parameter.
        //    0.0 < PIN.
        //
        //    Input, double QIN, the second distribution parameter.
        //    0.0 < QIN.
        //
        //    Output, double R8_BETAI, the incomplete beta function ratio.
        //
    {
        int i;
        int n;
        double term;
        double value;
        double xb;
        double xi;

        switch (data.eps)
        {
            case 0.0:
                data.eps = r8_mach(3);
                data.alneps = Math.Log(data.eps);
                data.sml = r8_mach(1);
                data.alnsml = Math.Log(data.sml);
                break;
        }

        switch (x)
        {
            case < 0.0:
            case > 1.0:
                Console.WriteLine("");
                Console.WriteLine("R8_BETAI - Fatal error!");
                Console.WriteLine("  0 <= X <= 1 is required.");
                return 1;
        }

        if (pin <= 0.0 || qin <= 0.0)
        {
            Console.WriteLine("");
            Console.WriteLine("R8_BETAI - Fatal error!");
            Console.WriteLine("  P or Q <= 0.0.");
            return 1;
        }

        double y = x;
        double p = pin;
        double q = qin;

        if (p < q || 0.8 <= x)
        {
            switch (x)
            {
                case >= 0.2:
                    y = 1.0 - y;
                    p = qin;
                    q = pin;
                    break;
            }
        }

        if ((p + q) * y / (p + 1.0) < data.eps)
        {
            value = 0.0;
            xb = p * Math.Log(r8_max(y, data.sml)) - Math.Log(p) - r8_lbeta(ref data.lbetadata, ref gammadata, p, q);
            if (data.alnsml < xb && y != 0.0)
            {
                value = Math.Exp(xb);
            }

            if (Math.Abs(y - x) > typeMethods.r8_epsilon() || Math.Abs(p - pin) > typeMethods.r8_epsilon())
            {
                value = 1.0 - value;
            }

            return value;
        }

        double ps = q - r8_aint(q);
        switch (ps)
        {
            case 0.0:
                ps = 1.0;
                break;
        }

        xb = p * Math.Log(y) - r8_lbeta(ref data.lbetadata, ref gammadata, ps, p) - Math.Log(p);

        if (xb < data.alnsml)
        {
            value = 0.0;
        }
        else
        {
            value = Math.Exp(xb);
            term = value * p;
            if (Math.Abs(ps - 1.0) > typeMethods.r8_epsilon())
            {
                n = (int) r8_max(data.alneps / Math.Log(y), 4.0);
                for (i = 1; i <= n; i++)
                {
                    xi = i;
                    term = term * (xi - ps) * y / xi;
                    value += term / (p + xi);
                }
            }
        }

        switch (q)
        {
            case > 1.0:
            {
                xb = p * Math.Log(y) + q * Math.Log(1.0 - y)
                     - r8_lbeta(ref data.lbetadata, ref gammadata, p, q) - Math.Log(q);
                int ib = (int) r8_max(xb / data.alnsml, 0.0);
                term = Math.Exp(xb - ib * data.alnsml);
                double c = 1.0 / (1.0 - y);
                double p1 = q * c / (p + q - 1.0);

                double finsum = 0.0;
                n = (int) q;
                if (Math.Abs(q - n) <= typeMethods.r8_epsilon())
                {
                    n -= 1;
                }

                for (i = 1; i <= n; i++)
                {
                    if (p1 <= 1.0 && term / data.eps <= finsum)
                    {
                        break;
                    }

                    xi = i;
                    term = (q - xi + 1.0) * c * term / (p + q - xi);

                    switch (term)
                    {
                        case > 1.0:
                            ib -= 1;
                            term *= data.sml;
                            break;
                    }

                    switch (ib)
                    {
                        case 0:
                            finsum += term;
                            break;
                    }
                }

                value += finsum;
                break;
            }
        }

        if (Math.Abs(y - x) > typeMethods.r8_epsilon() || Math.Abs(p - pin) > typeMethods.r8_epsilon())
        {
            value = 1.0 - value;
        }

        value = value switch
        {
            > 1.0 => 1.0,
            _ => value switch
            {
                < 0.0 => 0.0,
                _ => value
            }
        };

        return value;
    }


    public class r8BiData
    {
        public int nbif;
        public int nbif2;
        public int nbig;
        public int nbig2;
        public double x3sml;
        public r8AIMPData aimpdata = new();
        public r8BieData biedata = new();
    }
    public static double r8_bi(ref r8BiData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BI evaluates the Airy function Bi of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    14 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BI, the Airy function Bi of X.
        //
    {
        double[] bifcs = {
                -0.16730216471986649483537423928176E-01,
                +0.10252335834249445611426362777757,
                +0.17083092507381516539429650242013E-02,
                +0.11862545467744681179216459210040E-04,
                +0.44932907017792133694531887927242E-07,
                +0.10698207143387889067567767663628E-09,
                +0.17480643399771824706010517628573E-12,
                +0.20810231071761711025881891834399E-15,
                +0.18849814695665416509927971733333E-18,
                +0.13425779173097804625882666666666E-21,
                +0.77159593429658887893333333333333E-25,
                +0.36533879617478566399999999999999E-28,
                +0.14497565927953066666666666666666E-31
            }
            ;
        double[] bif2cs = {
                +0.0998457269381604104468284257993,
                +0.47862497786300553772211467318231,
                +0.25155211960433011771324415436675E-01,
                +0.58206938852326456396515697872216E-03,
                +0.74997659644377865943861457378217E-05,
                +0.61346028703493836681403010356474E-07,
                +0.34627538851480632900434268733359E-09,
                +0.14288910080270254287770846748931E-11,
                +0.44962704298334641895056472179200E-14,
                +0.11142323065833011708428300106666E-16,
                +0.22304791066175002081517866666666E-19,
                +0.36815778736393142842922666666666E-22,
                +0.50960868449338261333333333333333E-25,
                +0.60003386926288554666666666666666E-28,
                +0.60827497446570666666666666666666E-31
            }
            ;
        double[] bigcs = {
                +0.22466223248574522283468220139024E-01,
                +0.37364775453019545441727561666752E-01,
                +0.44476218957212285696215294326639E-03,
                +0.24708075636329384245494591948882E-05,
                +0.79191353395149635134862426285596E-08,
                +0.16498079851827779880887872402706E-10,
                +0.24119906664835455909247501122841E-13,
                +0.26103736236091436985184781269333E-16,
                +0.21753082977160323853123792000000E-19,
                +0.14386946400390433219483733333333E-22,
                +0.77349125612083468629333333333333E-26,
                +0.34469292033849002666666666666666E-29,
                +0.12938919273216000000000000000000E-32
            }
            ;
        double[] big2cs = {
                +0.033305662145514340465176188111647,
                +0.161309215123197067613287532084943,
                +0.631900730961342869121615634921173E-02,
                +0.118790456816251736389780192304567E-03,
                +0.130453458862002656147116485012843E-05,
                +0.937412599553521729546809615508936E-08,
                +0.474580188674725153788510169834595E-10,
                +0.178310726509481399800065667560946E-12,
                +0.516759192784958180374276356640000E-15,
                +0.119004508386827125129496251733333E-17,
                +0.222982880666403517277063466666666E-20,
                +0.346551923027689419722666666666666E-23,
                +0.453926336320504514133333333333333E-26,
                +0.507884996513522346666666666666666E-29,
                +0.491020674696533333333333333333333E-32
            }
            ;
        double theta = 0;
        double value;
        double xm = 0;
        //static double xmax = 0.0;

        switch (data.nbif)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nbif = r8_inits(bifcs, 13, eta);
                data.nbig = r8_inits(bigcs, 13, eta);
                data.nbif2 = r8_inits(bif2cs, 15, eta);
                data.nbig2 = r8_inits(big2cs, 15, eta);
                data.x3sml = r8_power(eta, 0.3333);
                //  xmax = r8_power ( 1.5 * log ( r8_mach ( 2 ) ), 0.6666 );
                break;
        }

        switch (x)
        {
            case < -1.0:
                r8_aimp(ref data.aimpdata, x, ref xm, ref theta);
                value = xm * Math.Sin(theta);
                break;
            default:
            {
                double z;
                if (Math.Abs(x) <= data.x3sml)
                {
                    z = 0.0;
                    value = 0.625 + r8_csevl(z, bifcs, data.nbif)
                                  + x * (0.4375 + r8_csevl(z, bigcs, data.nbig));
                }
                else
                {
                    switch (x)
                    {
                        case <= 1.0:
                            z = x * x * x;
                            value = 0.625 + r8_csevl(z, bifcs, data.nbif)
                                          + x * (0.4375 + r8_csevl(z, bigcs, data.nbig));
                            break;
                        case <= 2.0:
                            z = (2.0 * x * x * x - 9.0) / 7.0;
                            value = 1.125 + r8_csevl(z, bif2cs, data.nbif2)
                                          + x * (0.625 + r8_csevl(z, big2cs, data.nbig2));
                            break;
                        default:
                            value = r8_bie(ref data.biedata, x) * Math.Exp(2.0 * x * Math.Sqrt(x) / 3.0);
                            break;
                    }
                }

                break;
            }
        }

        return value;
    }

    public class r8BidData
    {
        public int nbif;
        public int nbif2;
        public int nbig;
        public int nbig2;
        public double x2sml;
        public double x3sml;
        public r8ADMPData admpdata = new();
        public r8BideData bidedata = new();

    }
    public static double r8_bid(ref r8BidData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BID evaluates the derivative of the Airy function Bi of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BID, the derivative of the Airy function Bi of X.
        //
    {
        double[] bif2cs = {
                0.32349398760352203352119193596266015,
                0.08629787153556355913888835323811100,
                0.00299402555265539742613821050727155,
                0.00005143052836466163720464316950821,
                0.00000052584025003681146026033098613,
                0.00000000356175137395770028102730600,
                0.00000000001714686400714584830518308,
                0.00000000000006166351969232555406693,
                0.00000000000000017191082154315985806,
                0.00000000000000000038236889518803943,
                0.00000000000000000000069424173624884,
                0.00000000000000000000000104833932510,
                0.00000000000000000000000000133721972,
                0.00000000000000000000000000000145986,
                0.00000000000000000000000000000000138
            }
            ;
        double[] bifcs = {
                0.115353679082857024267474446284908879,
                0.020500789404919287530357789445940252,
                0.000213529027890287581892679619451158,
                0.000001078396061467683042209155523569,
                0.000000003209470883320666783353670420,
                0.000000000006293040671833540390213316,
                0.000000000000008740304300063083340121,
                0.000000000000000009047915683496049529,
                0.000000000000000000007249923164709251,
                0.000000000000000000000004629576649604,
                0.000000000000000000000000002411236436,
                0.000000000000000000000000000001043825,
                0.000000000000000000000000000000000382
            }
            ;
        double[] big2cs = {
                1.606299946362129457759284537862622883,
                0.744908881987608865201476685194753972,
                0.047013873861027737964095177635353019,
                0.001228442206254823907016188785848091,
                0.000017322241225662362670987355613727,
                0.000000152190165236801893711508366563,
                0.000000000911356024911957704145528786,
                0.000000000003954791842356644201722554,
                0.000000000000013001737033862320007309,
                0.000000000000000033493506858269079763,
                0.000000000000000000069419094403694057,
                0.000000000000000000000118248256604581,
                0.000000000000000000000000168462493472,
                0.000000000000000000000000000203684674,
                0.000000000000000000000000000000211619,
                0.000000000000000000000000000000000191
            }
            ;
        double[] bigcs = {
                -0.0971964404164435373897790974606802,
                0.1495035768431670665710843445326264,
                0.0031135253871213260419419176839631,
                0.0000247085705798212967777021920569,
                0.0000001029496277313786081987324295,
                0.0000000002639703739869432892676778,
                0.0000000000004582792707803206608181,
                0.0000000000000005742829740893447321,
                0.0000000000000000005438275385238549,
                0.0000000000000000000004028347267083,
                0.0000000000000000000000002397823826,
                0.0000000000000000000000000001171956,
                0.0000000000000000000000000000000479
            }
            ;
        double phi = 0;
        double value;
        //static double xmax = 0.0;
        double xn = 0;
        switch (data.nbif)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nbif = r8_inits(bifcs, 13, eta);
                data.nbig = r8_inits(bigcs, 13, eta);
                data.nbif2 = r8_inits(bif2cs, 15, eta);
                data.nbig2 = r8_inits(big2cs, 16, eta);
                data.x2sml = Math.Sqrt(eta);
                data.x3sml = r8_power(eta, 0.3333);
                //  xmax = r8_power ( 1.5 * log ( r8_mach ( 2 ) ), 0.6666 );
                break;
        }

        switch (x)
        {
            case < -1.0:
                r8_admp(ref data.admpdata, x, ref xn, ref phi);
                value = xn * Math.Sin(phi);
                break;
            default:
            {
                double x2;
                double x3;
                if (Math.Abs(x) <= data.x2sml)
                {
                    x2 = 0.0;
                    x3 = 0.0;
                    value = x2 * (r8_csevl(x3, bifcs, data.nbif) + 0.25)
                            + r8_csevl(x3, bigcs, data.nbig) + 0.5;
                }
                else if (Math.Abs(x) <= data.x3sml)
                {
                    x2 = x * x;
                    x3 = 0.0;
                    value = x2 * (r8_csevl(x3, bifcs, data.nbif) + 0.25)
                            + r8_csevl(x3, bigcs, data.nbig) + 0.5;
                }
                else
                {
                    switch (x)
                    {
                        case <= 1.0:
                            x2 = x * x;
                            x3 = x * x * x;
                            value = x2 * (r8_csevl(x3, bifcs, data.nbif) + 0.25)
                                    + r8_csevl(x3, bigcs, data.nbig) + 0.5;
                            break;
                        case <= 2.0:
                            double z = (2.0 * x * x * x - 9.0) / 7.0;
                            value = x * x * (r8_csevl(z, bif2cs, data.nbif2) + 0.25)
                                    + r8_csevl(z, big2cs, data.nbig2) + 0.5;
                            break;
                        default:
                            value = r8_bide(ref data.bidedata, x) * Math.Exp(2.0 * x * Math.Sqrt(x) / 3.0);
                            break;
                    }
                }

                break;
            }
        }

        return value;
    }

    public class r8BideData
    {
        public int nbif;
        public int nbif2;
        public int nbig;
        public int nbig2;
        public int nbip1;
        public int nbip2;
        public double x2sml;
        public double x3sml;
        public double x32sml;
        public double xbig;

        public r8ADMPData admpdata = new();
    }

    public static double r8_bide(ref r8BideData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BIDE: exponentially scaled derivative, Airy function Bi of an R8 argument.
        //
        //  Discussion:
        //
        //    if X < 0,
        //      R8_BIDE ( X ) = R8_BID ( X )
        //    else
        //      R8_BIDE ( X ) = R8_BID ( X ) * exp ( - 2/3 * X^(3/2) )
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BIDE, the exponentially scaled derivative of 
        //    the Airy function Bi of X.
        //
    {
        const double atr = 8.75069057084843450880771988210148;
        double[] bif2cs = {
                0.32349398760352203352119193596266015,
                0.08629787153556355913888835323811100,
                0.00299402555265539742613821050727155,
                0.00005143052836466163720464316950821,
                0.00000052584025003681146026033098613,
                0.00000000356175137395770028102730600,
                0.00000000001714686400714584830518308,
                0.00000000000006166351969232555406693,
                0.00000000000000017191082154315985806,
                0.00000000000000000038236889518803943,
                0.00000000000000000000069424173624884,
                0.00000000000000000000000104833932510,
                0.00000000000000000000000000133721972,
                0.00000000000000000000000000000145986,
                0.00000000000000000000000000000000138
            }
            ;
        double[] bifcs = {
                0.115353679082857024267474446284908879,
                0.020500789404919287530357789445940252,
                0.000213529027890287581892679619451158,
                0.000001078396061467683042209155523569,
                0.000000003209470883320666783353670420,
                0.000000000006293040671833540390213316,
                0.000000000000008740304300063083340121,
                0.000000000000000009047915683496049529,
                0.000000000000000000007249923164709251,
                0.000000000000000000000004629576649604,
                0.000000000000000000000000002411236436,
                0.000000000000000000000000000001043825,
                0.000000000000000000000000000000000382
            }
            ;
        double[] big2cs = {
                1.606299946362129457759284537862622883,
                0.744908881987608865201476685194753972,
                0.047013873861027737964095177635353019,
                0.001228442206254823907016188785848091,
                0.000017322241225662362670987355613727,
                0.000000152190165236801893711508366563,
                0.000000000911356024911957704145528786,
                0.000000000003954791842356644201722554,
                0.000000000000013001737033862320007309,
                0.000000000000000033493506858269079763,
                0.000000000000000000069419094403694057,
                0.000000000000000000000118248256604581,
                0.000000000000000000000000168462493472,
                0.000000000000000000000000000203684674,
                0.000000000000000000000000000000211619,
                0.000000000000000000000000000000000191
            }
            ;
        double[] bigcs = {
                -0.0971964404164435373897790974606802,
                0.1495035768431670665710843445326264,
                0.0031135253871213260419419176839631,
                0.0000247085705798212967777021920569,
                0.0000001029496277313786081987324295,
                0.0000000002639703739869432892676778,
                0.0000000000004582792707803206608181,
                0.0000000000000005742829740893447321,
                0.0000000000000000005438275385238549,
                0.0000000000000000000004028347267083,
                0.0000000000000000000000002397823826,
                0.0000000000000000000000000001171956,
                0.0000000000000000000000000000000479
            }
            ;
        double[] bip1cs = {
                -0.17291873510795537186124679823741003,
                -0.01493584929846943639486231021818675,
                -0.00054711049516785663990658697874460,
                0.00015379662929584083449573727856666,
                0.00001543534761921794131028948022869,
                -0.00000654341138519060129226087106765,
                0.00000037280824078787032232152275240,
                0.00000020720783881887480080810710514,
                -0.00000006581733364696191689495883922,
                0.00000000749267463539288212986048985,
                0.00000000111013368840707147698890101,
                -0.00000000072651405529159512323880794,
                0.00000000017827235598470153962165668,
                -0.00000000002173463524809506269656807,
                -0.00000000000203020349653882594017049,
                0.00000000000193118272294077519319859,
                -0.00000000000060449525048290296023117,
                0.00000000000012094496248933664277802,
                -0.00000000000001251088360074479784619,
                -0.00000000000000199173832424881344036,
                0.00000000000000151540816342864303038,
                -0.00000000000000049768927059816240250,
                0.00000000000000011545959731810501403,
                -0.00000000000000001863286862907983871,
                0.00000000000000000099330392344759104,
                0.00000000000000000068182083667412417,
                -0.00000000000000000034854456479650551,
                0.00000000000000000010860382134235961,
                -0.00000000000000000002599290185240166,
                0.00000000000000000000476895370459000,
                -0.00000000000000000000051946940777177,
                -0.00000000000000000000005925575044912,
                0.00000000000000000000005746008970972,
                -0.00000000000000000000002186119806494,
                0.00000000000000000000000624124294738,
                -0.00000000000000000000000146003421785,
                0.00000000000000000000000027493893904,
                -0.00000000000000000000000003474678018,
                -0.00000000000000000000000000109303694,
                0.00000000000000000000000000261972744,
                -0.00000000000000000000000000112365018,
                0.00000000000000000000000000035152059,
                -0.00000000000000000000000000009167601,
                0.00000000000000000000000000002040203,
                -0.00000000000000000000000000000373038,
                0.00000000000000000000000000000046070,
                0.00000000000000000000000000000001748
            }
            ;
        double[] bip2cs = {
                -0.13269705443526630494937031210217135,
                -0.00568443626045977481306046339037428,
                -0.00015643601119611609623698471216660,
                -0.00001136737203679562267336053207940,
                -0.00000143464350991283669643136951338,
                -0.00000018098531185164131868746481700,
                0.00000000926177343610865546229511422,
                0.00000001710005490720592181887296162,
                0.00000000476698163503781708252686849,
                -0.00000000035195022023163141945397159,
                -0.00000000058890614315886871574147635,
                -0.00000000006678499607795537597612089,
                0.00000000006395565101720391190697713,
                0.00000000001554529427064394106403245,
                -0.00000000000792396999744612971684001,
                -0.00000000000258326242689717798947525,
                0.00000000000121655047787849117978773,
                0.00000000000038707207172899985942258,
                -0.00000000000022487045479618229130656,
                -0.00000000000004953476515684046293493,
                0.00000000000004563781601526912756017,
                0.00000000000000332998314345014118494,
                -0.00000000000000921750185832874202719,
                0.00000000000000094156670658958205765,
                0.00000000000000167153952640716157721,
                -0.00000000000000055134268782182410852,
                -0.00000000000000022368651572006617795,
                0.00000000000000017486948976520089209,
                0.00000000000000000206518666352329750,
                -0.00000000000000003973060018130712479,
                0.00000000000000001154836935724892335,
                0.00000000000000000553906053678276421,
                -0.00000000000000000457174427396478267,
                0.00000000000000000026567111858284432,
                0.00000000000000000101599148154167823,
                -0.00000000000000000044821231272196246,
                -0.00000000000000000007959149661617295,
                0.00000000000000000014583615616165794,
                -0.00000000000000000004015127893061405,
                -0.00000000000000000002079152963743616,
                0.00000000000000000001972630449634388,
                -0.00000000000000000000336033404001683,
                -0.00000000000000000000376504832685507,
                0.00000000000000000000269935508825595,
                -0.00000000000000000000026985946069808,
                -0.00000000000000000000061794011788222,
                0.00000000000000000000038782693311711,
                -0.00000000000000000000002420094005071,
                -0.00000000000000000000009844051058925,
                0.00000000000000000000005954353358494,
                -0.00000000000000000000000361274446366,
                -0.00000000000000000000001552634578088,
                0.00000000000000000000000977819380304,
                -0.00000000000000000000000092239447509,
                -0.00000000000000000000000241545903934,
                0.00000000000000000000000169558652255,
                -0.00000000000000000000000026762408641,
                -0.00000000000000000000000036188116265,
                0.00000000000000000000000030372404951,
                -0.00000000000000000000000007422876903,
                -0.00000000000000000000000004930678544,
                0.00000000000000000000000005468790028,
                -0.00000000000000000000000001920315188,
                -0.00000000000000000000000000516335154,
                0.00000000000000000000000000957723167,
                -0.00000000000000000000000000463659079,
                -0.00000000000000000000000000004509226,
                0.00000000000000000000000000155617519,
                -0.00000000000000000000000000104156509,
                0.00000000000000000000000000019565323,
                0.00000000000000000000000000021335380,
                -0.00000000000000000000000000021461958,
                0.00000000000000000000000000007875791,
                0.00000000000000000000000000001713768,
                -0.00000000000000000000000000003917137,
                0.00000000000000000000000000002233559,
                -0.00000000000000000000000000000269383,
                -0.00000000000000000000000000000577764,
                0.00000000000000000000000000000519650,
                -0.00000000000000000000000000000183361,
                -0.00000000000000000000000000000045763,
                0.00000000000000000000000000000099235,
                -0.00000000000000000000000000000058938,
                0.00000000000000000000000000000009568,
                0.00000000000000000000000000000013758,
                -0.00000000000000000000000000000014066,
                0.00000000000000000000000000000005964,
                0.00000000000000000000000000000000437
            }
            ;
        const double btr = -2.09383632135605431360096498526268;
        double phi = 0;
        double value;
        double xn = 0;

        switch (data.nbif)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nbif = r8_inits(bifcs, 13, eta);
                data.nbig = r8_inits(bigcs, 13, eta);
                data.nbif2 = r8_inits(bif2cs, 15, eta);
                data.nbig2 = r8_inits(big2cs, 16, eta);
                data.nbip1 = r8_inits(bip1cs, 47, eta);
                data.nbip2 = r8_inits(bip2cs, 88, eta);
                data.x2sml = Math.Sqrt(eta);
                data.x3sml = r8_power(eta, 0.3333);
                data.x32sml = 1.3104 * data.x3sml * data.x3sml;
                data.xbig = r8_power(r8_mach(2), 0.6666);
                break;
        }

        switch (x)
        {
            case < -1.0:
                r8_admp(ref data.admpdata, x, ref xn, ref phi);
                value = xn * Math.Sin(phi);
                break;
            default:
            {
                double x2;
                double x3;
                if (Math.Abs(x) <= data.x2sml)
                {
                    x2 = 0.0;
                    x3 = 0.0;
                    value = x2 * (r8_csevl(x3, bifcs, data.nbif)
                                  + 0.25) + r8_csevl(x3, bigcs, data.nbig) + 0.5;
                    if (data.x32sml < x)
                    {
                        value *= Math.Exp(-2.0 * x * Math.Sqrt(x) / 3.0);
                    }
                }
                else if (Math.Abs(x) <= data.x3sml)
                {
                    x2 = x * x;
                    x3 = 0.0;
                    value = x2 * (r8_csevl(x3, bifcs, data.nbif)
                                  + 0.25) + r8_csevl(x3, bigcs, data.nbig) + 0.5;
                    if (data.x32sml < x)
                    {
                        value *= Math.Exp(-2.0 * x * Math.Sqrt(x) / 3.0);
                    }
                }
                else
                {
                    double sqrtx;
                    double z;
                    switch (x)
                    {
                        case <= 1.0:
                        {
                            x2 = x * x;
                            x3 = x * x * x;
                            value = x2 * (r8_csevl(x3, bifcs, data.nbif)
                                          + 0.25) + r8_csevl(x3, bigcs, data.nbig) + 0.5;
                            if (data.x32sml < x)
                            {
                                value *= Math.Exp(-2.0 * x * Math.Sqrt(x) / 3.0);
                            }

                            break;
                        }
                        case <= 2.0:
                            z = (2.0 * x * x * x - 9.0) / 7.0;
                            value = Math.Exp(-2.0 * x * Math.Sqrt(x) / 3.0)
                                    * (x * x * (0.25 + r8_csevl(z, bif2cs, data.nbif2))
                                       + 0.5 + r8_csevl(z, big2cs, data.nbig2));
                            break;
                        case <= 4.0:
                            sqrtx = Math.Sqrt(x);
                            z = atr / x / sqrtx + btr;
                            value = (0.625 + r8_csevl(z, bip1cs, data.nbip1)) * Math.Sqrt(sqrtx);
                            break;
                        default:
                        {
                            if (x <= data.xbig)
                            {
                                sqrtx = Math.Sqrt(x);
                                z = 16.0 / x / sqrtx - 1.0;
                                value = (0.625 + r8_csevl(z, bip2cs, data.nbip2)) * Math.Sqrt(sqrtx);
                            }
                            else
                            {
                                sqrtx = Math.Sqrt(x);
                                z = -1.0;
                                value = (0.625 + r8_csevl(z, bip2cs, data.nbip2)) * Math.Sqrt(sqrtx);
                            }

                            break;
                        }
                    }
                }

                break;
            }
        }

        return value;
    }

    public class r8BieData
    {
        public int nbif;
        public int nbif2;
        public int nbig;
        public int nbig2;
        public int nbip1;
        public int nbip2;
        public double x32sml;
        public double x3sml;
        public double xbig;

        public r8AIMPData aimpdata = new();

    }
    public static double r8_bie(ref r8BieData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BIE evaluates the exponentially scaled Airy function Bi of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_BIE, the exponentially scaled Airy function Bi of X.
        //
    {
        const double atr = 8.75069057084843450880771988210148;
        double[] bif2cs = {
                +0.0998457269381604104468284257993,
                +0.47862497786300553772211467318231,
                +0.25155211960433011771324415436675E-01,
                +0.58206938852326456396515697872216E-03,
                +0.74997659644377865943861457378217E-05,
                +0.61346028703493836681403010356474E-07,
                +0.34627538851480632900434268733359E-09,
                +0.14288910080270254287770846748931E-11,
                +0.44962704298334641895056472179200E-14,
                +0.11142323065833011708428300106666E-16,
                +0.22304791066175002081517866666666E-19,
                +0.36815778736393142842922666666666E-22,
                +0.50960868449338261333333333333333E-25,
                +0.60003386926288554666666666666666E-28,
                +0.60827497446570666666666666666666E-31
            }
            ;
        double[] bifcs = {
                -0.16730216471986649483537423928176E-01,
                +0.10252335834249445611426362777757,
                +0.17083092507381516539429650242013E-02,
                +0.11862545467744681179216459210040E-04,
                +0.44932907017792133694531887927242E-07,
                +0.10698207143387889067567767663628E-09,
                +0.17480643399771824706010517628573E-12,
                +0.20810231071761711025881891834399E-15,
                +0.18849814695665416509927971733333E-18,
                +0.13425779173097804625882666666666E-21,
                +0.77159593429658887893333333333333E-25,
                +0.36533879617478566399999999999999E-28,
                +0.14497565927953066666666666666666E-31
            }
            ;
        double[] big2cs = {
                +0.033305662145514340465176188111647,
                +0.161309215123197067613287532084943,
                +0.631900730961342869121615634921173E-02,
                +0.118790456816251736389780192304567E-03,
                +0.130453458862002656147116485012843E-05,
                +0.937412599553521729546809615508936E-08,
                +0.474580188674725153788510169834595E-10,
                +0.178310726509481399800065667560946E-12,
                +0.516759192784958180374276356640000E-15,
                +0.119004508386827125129496251733333E-17,
                +0.222982880666403517277063466666666E-20,
                +0.346551923027689419722666666666666E-23,
                +0.453926336320504514133333333333333E-26,
                +0.507884996513522346666666666666666E-29,
                +0.491020674696533333333333333333333E-32
            }
            ;
        double[] bigcs = {
                +0.22466223248574522283468220139024E-01,
                +0.37364775453019545441727561666752E-01,
                +0.44476218957212285696215294326639E-03,
                +0.24708075636329384245494591948882E-05,
                +0.79191353395149635134862426285596E-08,
                +0.16498079851827779880887872402706E-10,
                +0.24119906664835455909247501122841E-13,
                +0.26103736236091436985184781269333E-16,
                +0.21753082977160323853123792000000E-19,
                +0.14386946400390433219483733333333E-22,
                +0.77349125612083468629333333333333E-26,
                +0.34469292033849002666666666666666E-29,
                +0.12938919273216000000000000000000E-32
            }
            ;
        double[] bip1cs = {
                -0.83220474779434474687471864707973E-01,
                +0.11461189273711742889920226128031E-01,
                +0.42896440718911509494134472566635E-03,
                -0.14906639379950514017847677732954E-03,
                -0.13076597267876290663136340998881E-04,
                +0.63275983961030344754535716032494E-05,
                -0.42226696982681924884778515889433E-06,
                -0.19147186298654689632835494181277E-06,
                +0.64531062845583173611038157880934E-07,
                -0.78448546771397719289748310448628E-08,
                -0.96077216623785085879198533565432E-09,
                +0.70004713316443966339006074402068E-09,
                -0.17731789132814932022083128056698E-09,
                +0.22720894783465236347282126389311E-10,
                +0.16540456313972049847032860681891E-11,
                -0.18517125559292316390755369896693E-11,
                +0.59576312477117290165680715534277E-12,
                -0.12194348147346564781055769498986E-12,
                +0.13347869253513048815386347813597E-13,
                +0.17278311524339746664384792889731E-14,
                -0.14590732013016720735268871713166E-14,
                +0.49010319927115819978994989520104E-15,
                -0.11556545519261548129262972762521E-15,
                +0.19098807367072411430671732441524E-16,
                -0.11768966854492179886913995957862E-17,
                -0.63271925149530064474537459677047E-18,
                +0.33861838880715361614130191322316E-18,
                -0.10725825321758625254992162219622E-18,
                +0.25995709605617169284786933115562E-19,
                -0.48477583571081193660962309494101E-20,
                +0.55298913982121625361505513198933E-21,
                +0.49421660826069471371748197444266E-22,
                -0.55162121924145707458069720814933E-22,
                +0.21437560417632550086631884499626E-22,
                -0.61910313387655605798785061137066E-23,
                +0.14629362707391245659830967336959E-23,
                -0.27918484471059005576177866069333E-24,
                +0.36455703168570246150906795349333E-25,
                +0.58511821906188711839382459733333E-27,
                -0.24946950487566510969745047551999E-26,
                +0.10979323980338380977919579477333E-26,
                -0.34743388345961115015034088106666E-27,
                +0.91373402635349697363171082240000E-28,
                -0.20510352728210629186247720959999E-28,
                +0.37976985698546461748651622399999E-29,
                -0.48479458497755565887848448000000E-30,
                -0.10558306941230714314205866666666E-31
            }
            ;
        double[] bip2cs = {
                -0.11359673758598867913797310895527,
                +0.41381473947881595760052081171444E-02,
                +0.13534706221193329857696921727508E-03,
                +0.10427316653015353405887183456780E-04,
                +0.13474954767849907889589911958925E-05,
                +0.16965374054383983356062511163756E-06,
                -0.10096500865641624301366228396373E-07,
                -0.16729119493778475127836973095943E-07,
                -0.45815364485068383217152795613391E-08,
                +0.37366813665655477274064749384284E-09,
                +0.57669303201452448119584643502111E-09,
                +0.62181265087850324095393408792371E-10,
                -0.63294120282743068241589177281354E-10,
                -0.14915047908598767633999091989487E-10,
                +0.78896213942486771938172394294891E-11,
                +0.24960513721857797984888064000127E-11,
                -0.12130075287291659477746664734814E-11,
                -0.37404939108727277887343460402716E-12,
                +0.22377278140321476798783446931091E-12,
                +0.47490296312192466341986077472514E-13,
                -0.45261607991821224810605655831294E-13,
                -0.30172271841986072645112245876020E-14,
                +0.91058603558754058327592683478908E-14,
                -0.98149238033807062926643864207709E-15,
                -0.16429400647889465253601245251589E-14,
                +0.55334834214274215451182114635164E-15,
                +0.21750479864482655984374381998156E-15,
                -0.17379236200220656971287029558087E-15,
                -0.10470023471443714959283909313604E-17,
                +0.39219145986056386925441403311462E-16,
                -0.11621293686345196925824005665910E-16,
                -0.54027474491754245533735411307773E-17,
                +0.45441582123884610882675428553304E-17,
                -0.28775599625221075729427585480086E-18,
                -0.10017340927225341243596162960440E-17,
                +0.44823931215068369856332561906313E-18,
                +0.76135968654908942328948982366775E-19,
                -0.14448324094881347238956060145422E-18,
                +0.40460859449205362251624847392112E-19,
                +0.20321085700338446891325190707277E-19,
                -0.19602795471446798718272758041962E-19,
                +0.34273038443944824263518958211738E-20,
                +0.37023705853905135480024651593154E-20,
                -0.26879595172041591131400332966712E-20,
                +0.28121678463531712209714454683364E-21,
                +0.60933963636177797173271119680329E-21,
                -0.38666621897150844994172977893413E-21,
                +0.25989331253566943450895651927228E-22,
                +0.97194393622938503767281175216084E-22,
                -0.59392817834375098415630478204591E-22,
                +0.38864949977113015409591960439444E-23,
                +0.15334307393617272869721512868769E-22,
                -0.97513555209762624036336521409724E-23,
                +0.96340644440489471424741339383726E-24,
                +0.23841999400208880109946748792454E-23,
                -0.16896986315019706184848044205207E-23,
                +0.27352715888928361222578444801478E-24,
                +0.35660016185409578960111685025730E-24,
                -0.30234026608258827249534280666954E-24,
                +0.75002041605973930653144204823232E-25,
                +0.48403287575851388827455319838748E-25,
                -0.54364137654447888432698010297766E-25,
                +0.19281214470820962653345978809756E-25,
                +0.50116355020532656659611814172172E-26,
                -0.95040744582693253786034620869972E-26,
                +0.46372646157101975948696332245611E-26,
                +0.21177170704466954163768170577046E-28,
                -0.15404850268168594303692204548726E-26,
                +0.10387944293201213662047889194441E-26,
                -0.19890078156915416751316728235153E-27,
                -0.21022173878658495471177044522532E-27,
                +0.21353099724525793150633356670491E-27,
                -0.79040810747961342319023537632627E-28,
                -0.16575359960435585049973741763592E-28,
                +0.38868342850124112587625586496537E-28,
                -0.22309237330896866182621562424717E-28,
                +0.27777244420176260265625977404382E-29,
                +0.57078543472657725368712433782772E-29,
                -0.51743084445303852800173371555280E-29,
                +0.18413280751095837198450927071569E-29,
                +0.44422562390957094598544071068647E-30,
                -0.98504142639629801547464958226943E-30,
                +0.58857201353585104884754198881995E-30,
                -0.97636075440429787961402312628595E-31,
                -0.13581011996074695047063597884122E-30,
                +0.13999743518492413270568048380345E-30,
                -0.59754904545248477620884562981118E-31,
                -0.40391653875428313641045327529856E-32
            }
            ;
        const double btr = -2.09383632135605431360096498526268;
        double theta = 0;
        double value;
        double xm = 0;


        switch (data.nbif)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nbif = r8_inits(bifcs, 13, eta);
                data.nbig = r8_inits(bigcs, 13, eta);
                data.nbif2 = r8_inits(bif2cs, 15, eta);
                data.nbig2 = r8_inits(big2cs, 15, eta);
                data.nbip1 = r8_inits(bip1cs, 47, eta);
                data.nbip2 = r8_inits(bip2cs, 88, eta);
                data.x3sml = r8_power(eta, 0.3333);
                data.x32sml = 1.3104 * data.x3sml * data.x3sml;
                data.xbig = r8_power(r8_mach(2), 0.6666);
                break;
        }

        switch (x)
        {
            case < -1.0:
                r8_aimp(ref data.aimpdata, x, ref xm, ref theta);
                value = xm * Math.Sin(theta);
                break;
            default:
            {
                double z;
                if (Math.Abs(x) <= data.x3sml)
                {
                    z = 0.0;
                    value = 0.625 + r8_csevl(z, bifcs, data.nbif)
                                  + x * (0.4375 + r8_csevl(z, bigcs, data.nbig));
                    if (data.x32sml <= x)
                    {
                        value *= Math.Exp(-2.0 * x * Math.Sqrt(x) / 3.0);
                    }
                }
                else
                {
                    double sqrtx;
                    switch (x)
                    {
                        case <= 1.0:
                        {
                            z = x * x * x;
                            value = 0.625 + r8_csevl(z, bifcs, data.nbif)
                                          + x * (0.4375 + r8_csevl(z, bigcs, data.nbig));
                            if (data.x32sml <= x)
                            {
                                value *= Math.Exp(-2.0 * x * Math.Sqrt(x) / 3.0);
                            }

                            break;
                        }
                        case <= 2.0:
                            z = (2.0 * x * x * x - 9.0) / 7.0;
                            value = Math.Exp(-2.0 * x * Math.Sqrt(x) / 3.0)
                                    * (1.125 + r8_csevl(z, bif2cs, data.nbif2)
                                             + x * (0.625 + r8_csevl(z, big2cs, data.nbig2)));
                            break;
                        case <= 4.0:
                            sqrtx = Math.Sqrt(x);
                            z = atr / x / sqrtx + btr;
                            value = (0.625 + r8_csevl(z, bip1cs, data.nbip1)) / Math.Sqrt(sqrtx);
                            break;
                        default:
                        {
                            if (x < data.xbig)
                            {
                                sqrtx = Math.Sqrt(x);
                                z = 16.0 / (x * sqrtx) - 1.0;
                                value = (0.625 + r8_csevl(z, bip2cs, data.nbip2)) / Math.Sqrt(sqrtx);
                            }
                            else
                            {
                                sqrtx = Math.Sqrt(x);
                                z = -1.0;
                                value = (0.625 + r8_csevl(z, bip2cs, data.nbip2)) / Math.Sqrt(sqrtx);
                            }

                            break;
                        }
                    }
                }

                break;
            }
        }

        return value;
    }

    public class r8BinomData
    {
        public double bilnmx;
        public double fintmx;
        public r8LgmcData lgmcdata = new();
        public r8LnrelData lnreldata = new();

    }
    public static double r8_binom(ref r8BinomData data, int n, int m)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_BINOM evaluates the binomial coefficient using R8 arithmetic.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    13 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, int N, M, the arguments.
        //
        //    Output, double R8_BINOM, the binomial coefficient.
        //
    {
        const double sq2pil = 0.91893853320467274178032973640562;
        double value;

        switch (data.bilnmx)
        {
            case 0.0:
                data.bilnmx = Math.Log(r8_mach(2)) - 0.0001;
                data.fintmx = 0.9 / r8_mach(3);
                break;
        }

        switch (n)
        {
            case < 0:
                Console.WriteLine("");
                Console.WriteLine("R8_BINOM - Fatal error!");
                Console.WriteLine("  N < 0.");
                return 1;
        }

        switch (m)
        {
            case < 0:
                Console.WriteLine("");
                Console.WriteLine("R8_BINOM - Fatal error!");
                Console.WriteLine("  M < 0.");
                return 1;
        }

        if (n < m)
        {
            Console.WriteLine("");
            Console.WriteLine("R8_BINOM - Fatal error!");
            Console.WriteLine("  N < M.");
            return 1;
        }

        int k = i4_min(m, n - m);

        switch (k)
        {
            case <= 20 when k * Math.Log(i4_max(n, 1)) <= data.bilnmx:
            {
                value = 1.0;
                int i;
                for (i = 1; i <= k; i++)
                {
                    value = value * (n - i + 1) / i;
                }

                break;
            }
            default:
            {
                switch (k)
                {
                    case < 9:
                        Console.WriteLine("");
                        Console.WriteLine("R8_BINOM - Fatal error!");
                        Console.WriteLine("  Result overflows.");
                        Console.WriteLine("  N or M is too big.");
                        return 1;
                }

                double xn = n + 1;
                double xk = k + 1;
                double xnk = n - k + 1;

                double corr = r8_lgmc(ref data.lgmcdata, xn) - r8_lgmc(ref data.lgmcdata, xk) - r8_lgmc(ref data.lgmcdata, xnk);

                value = xk * Math.Log(xnk / xk)
                    - xn * r8_lnrel(ref data.lnreldata, -(xk - 1.0) / xn)
                    - 0.5 * Math.Log(xn * xnk / xk) + 1.0 - sq2pil + corr;

                if (data.bilnmx < value)
                {
                    Console.WriteLine("");
                    Console.WriteLine("R8_BINOM - Fatal error!");
                    Console.WriteLine("  Result overflows.");
                    Console.WriteLine("  N or M is too big.");
                    return 1;
                }

                value = Math.Exp(value);
                break;
            }
        }

        if (value < data.fintmx)
        {
            value = r8_aint(value + 0.5);
        }

        return value;
    }
}