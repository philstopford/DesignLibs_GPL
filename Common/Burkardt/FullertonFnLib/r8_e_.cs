using System;

namespace Burkardt.FullertonFnLib;

public static partial class FullertonLib
{
    public class r8E1Data
    {
        public int ntae10;
        public int ntae11;
        public int ntae12;
        public int ntae13;
        public int ntae14;
        public int nte11;
        public int nte12;
        public double xmax;

    }
    public static double r8_e1( ref r8E1Data data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_E1 evaluates the exponential integral E1 for an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_E1, the exponential integral E1 evaluated at X.
        //
    {
        double[] ae10cs = {
                +0.3284394579616699087873844201881E-01,
                -0.1669920452031362851476184343387E-01,
                +0.2845284724361346807424899853252E-03,
                -0.7563944358516206489487866938533E-05,
                +0.2798971289450859157504843180879E-06,
                -0.1357901828534531069525563926255E-07,
                +0.8343596202040469255856102904906E-09,
                -0.6370971727640248438275242988532E-10,
                +0.6007247608811861235760831561584E-11,
                -0.7022876174679773590750626150088E-12,
                +0.1018302673703687693096652346883E-12,
                -0.1761812903430880040406309966422E-13,
                +0.3250828614235360694244030353877E-14,
                -0.5071770025505818678824872259044E-15,
                +0.1665177387043294298172486084156E-16,
                +0.3166753890797514400677003536555E-16,
                -0.1588403763664141515133118343538E-16,
                +0.4175513256138018833003034618484E-17,
                -0.2892347749707141906710714478852E-18,
                -0.2800625903396608103506340589669E-18,
                +0.1322938639539270903707580023781E-18,
                -0.1804447444177301627283887833557E-19,
                -0.7905384086522616076291644817604E-20,
                +0.4435711366369570103946235838027E-20,
                -0.4264103994978120868865309206555E-21,
                -0.3920101766937117541553713162048E-21,
                +0.1527378051343994266343752326971E-21,
                +0.1024849527049372339310308783117E-22,
                -0.2134907874771433576262711405882E-22,
                +0.3239139475160028267061694700366E-23,
                +0.2142183762299889954762643168296E-23,
                -0.8234609419601018414700348082312E-24,
                -0.1524652829645809479613694401140E-24,
                +0.1378208282460639134668480364325E-24,
                +0.2131311202833947879523224999253E-26,
                -0.2012649651526484121817466763127E-25,
                +0.1995535662263358016106311782673E-26,
                +0.2798995808984003464948686520319E-26,
                -0.5534511845389626637640819277823E-27,
                -0.3884995396159968861682544026146E-27,
                +0.1121304434507359382850680354679E-27,
                +0.5566568152423740948256563833514E-28,
                -0.2045482929810499700448533938176E-28,
                -0.8453813992712336233411457493674E-29,
                +0.3565758433431291562816111116287E-29,
                +0.1383653872125634705539949098871E-29,
                -0.6062167864451372436584533764778E-30,
                -0.2447198043989313267437655119189E-30,
                +0.1006850640933998348011548180480E-30,
                +0.4623685555014869015664341461674E-31
            }
            ;
        double[] ae11cs = {
                +0.20263150647078889499401236517381,
                -0.73655140991203130439536898728034E-01,
                +0.63909349118361915862753283840020E-02,
                -0.60797252705247911780653153363999E-03,
                -0.73706498620176629330681411493484E-04,
                +0.48732857449450183453464992488076E-04,
                -0.23837064840448290766588489460235E-05,
                -0.30518612628561521027027332246121E-05,
                +0.17050331572564559009688032992907E-06,
                +0.23834204527487747258601598136403E-06,
                +0.10781772556163166562596872364020E-07,
                -0.17955692847399102653642691446599E-07,
                -0.41284072341950457727912394640436E-08,
                +0.68622148588631968618346844526664E-09,
                +0.53130183120506356147602009675961E-09,
                +0.78796880261490694831305022893515E-10,
                -0.26261762329356522290341675271232E-10,
                -0.15483687636308261963125756294100E-10,
                -0.25818962377261390492802405122591E-11,
                +0.59542879191591072658903529959352E-12,
                +0.46451400387681525833784919321405E-12,
                +0.11557855023255861496288006203731E-12,
                -0.10475236870835799012317547189670E-14,
                -0.11896653502709004368104489260929E-13,
                -0.47749077490261778752643019349950E-14,
                -0.81077649615772777976249734754135E-15,
                +0.13435569250031554199376987998178E-15,
                +0.14134530022913106260248873881287E-15,
                +0.49451592573953173115520663232883E-16,
                +0.79884048480080665648858587399367E-17,
                -0.14008632188089809829248711935393E-17,
                -0.14814246958417372107722804001680E-17,
                -0.55826173646025601904010693937113E-18,
                -0.11442074542191647264783072544598E-18,
                +0.25371823879566853500524018479923E-20,
                +0.13205328154805359813278863389097E-19,
                +0.62930261081586809166287426789485E-20,
                +0.17688270424882713734999261332548E-20,
                +0.23266187985146045209674296887432E-21,
                -0.67803060811125233043773831844113E-22,
                -0.59440876959676373802874150531891E-22,
                -0.23618214531184415968532592503466E-22,
                -0.60214499724601478214168478744576E-23,
                -0.65517906474348299071370444144639E-24,
                +0.29388755297497724587042038699349E-24,
                +0.22601606200642115173215728758510E-24,
                +0.89534369245958628745091206873087E-25,
                +0.24015923471098457555772067457706E-25,
                +0.34118376888907172955666423043413E-26,
                -0.71617071694630342052355013345279E-27,
                -0.75620390659281725157928651980799E-27,
                -0.33774612157467324637952920780800E-27,
                -0.10479325703300941711526430332245E-27,
                -0.21654550252170342240854880201386E-28,
                -0.75297125745288269994689298432000E-30,
                +0.19103179392798935768638084000426E-29,
                +0.11492104966530338547790728833706E-29,
                +0.43896970582661751514410359193600E-30,
                +0.12320883239205686471647157725866E-30,
                +0.22220174457553175317538581162666E-31
            }
            ;
        double[] ae12cs = {
                +0.63629589796747038767129887806803,
                -0.13081168675067634385812671121135,
                -0.84367410213053930014487662129752E-02,
                +0.26568491531006685413029428068906E-02,
                +0.32822721781658133778792170142517E-03,
                -0.23783447771430248269579807851050E-04,
                -0.11439804308100055514447076797047E-04,
                -0.14405943433238338455239717699323E-05,
                +0.52415956651148829963772818061664E-08,
                +0.38407306407844323480979203059716E-07,
                +0.85880244860267195879660515759344E-08,
                +0.10219226625855003286339969553911E-08,
                +0.21749132323289724542821339805992E-10,
                -0.22090238142623144809523503811741E-10,
                -0.63457533544928753294383622208801E-11,
                -0.10837746566857661115340539732919E-11,
                -0.11909822872222586730262200440277E-12,
                -0.28438682389265590299508766008661E-14,
                +0.25080327026686769668587195487546E-14,
                +0.78729641528559842431597726421265E-15,
                +0.15475066347785217148484334637329E-15,
                +0.22575322831665075055272608197290E-16,
                +0.22233352867266608760281380836693E-17,
                +0.16967819563544153513464194662399E-19,
                -0.57608316255947682105310087304533E-19,
                -0.17591235774646878055625369408853E-19,
                -0.36286056375103174394755328682666E-20,
                -0.59235569797328991652558143488000E-21,
                -0.76030380926310191114429136895999E-22,
                -0.62547843521711763842641428479999E-23,
                +0.25483360759307648606037606400000E-24,
                +0.25598615731739857020168874666666E-24,
                +0.71376239357899318800207052800000E-25,
                +0.14703759939567568181578956800000E-25,
                +0.25105524765386733555198634666666E-26,
                +0.35886666387790890886583637333333E-27,
                +0.39886035156771301763317759999999E-28,
                +0.21763676947356220478805333333333E-29,
                -0.46146998487618942367607466666666E-30,
                -0.20713517877481987707153066666666E-30,
                -0.51890378563534371596970666666666E-31
            }
            ;
        double[] ae13cs = {
                -0.60577324664060345999319382737747,
                -0.11253524348366090030649768852718,
                +0.13432266247902779492487859329414E-01,
                -0.19268451873811457249246838991303E-02,
                +0.30911833772060318335586737475368E-03,
                -0.53564132129618418776393559795147E-04,
                +0.98278128802474923952491882717237E-05,
                -0.18853689849165182826902891938910E-05,
                +0.37494319356894735406964042190531E-06,
                -0.76823455870552639273733465680556E-07,
                +0.16143270567198777552956300060868E-07,
                -0.34668022114907354566309060226027E-08,
                +0.75875420919036277572889747054114E-09,
                -0.16886433329881412573514526636703E-09,
                +0.38145706749552265682804250927272E-10,
                -0.87330266324446292706851718272334E-11,
                +0.20236728645867960961794311064330E-11,
                -0.47413283039555834655210340820160E-12,
                +0.11221172048389864324731799928920E-12,
                -0.26804225434840309912826809093395E-13,
                +0.64578514417716530343580369067212E-14,
                -0.15682760501666478830305702849194E-14,
                +0.38367865399315404861821516441408E-15,
                -0.94517173027579130478871048932556E-16,
                +0.23434812288949573293896666439133E-16,
                -0.58458661580214714576123194419882E-17,
                +0.14666229867947778605873617419195E-17,
                -0.36993923476444472706592538274474E-18,
                +0.93790159936721242136014291817813E-19,
                -0.23893673221937873136308224087381E-19,
                +0.61150624629497608051934223837866E-20,
                -0.15718585327554025507719853288106E-20,
                +0.40572387285585397769519294491306E-21,
                -0.10514026554738034990566367122773E-21,
                +0.27349664930638667785806003131733E-22,
                -0.71401604080205796099355574271999E-23,
                +0.18705552432235079986756924211199E-23,
                -0.49167468166870480520478020949333E-24,
                +0.12964988119684031730916087125333E-24,
                -0.34292515688362864461623940437333E-25,
                +0.90972241643887034329104820906666E-26,
                -0.24202112314316856489934847999999E-26,
                +0.64563612934639510757670475093333E-27,
                -0.17269132735340541122315987626666E-27,
                +0.46308611659151500715194231466666E-28,
                -0.12448703637214131241755170133333E-28,
                +0.33544574090520678532907007999999E-29,
                -0.90598868521070774437543935999999E-30,
                +0.24524147051474238587273216000000E-30,
                -0.66528178733552062817107967999999E-31
            }
            ;
        double[] ae14cs = {
                -0.1892918000753016825495679942820,
                -0.8648117855259871489968817056824E-01,
                +0.7224101543746594747021514839184E-02,
                -0.8097559457557386197159655610181E-03,
                +0.1099913443266138867179251157002E-03,
                -0.1717332998937767371495358814487E-04,
                +0.2985627514479283322825342495003E-05,
                -0.5659649145771930056560167267155E-06,
                +0.1152680839714140019226583501663E-06,
                -0.2495030440269338228842128765065E-07,
                +0.5692324201833754367039370368140E-08,
                -0.1359957664805600338490030939176E-08,
                +0.3384662888760884590184512925859E-09,
                -0.8737853904474681952350849316580E-10,
                +0.2331588663222659718612613400470E-10,
                -0.6411481049213785969753165196326E-11,
                +0.1812246980204816433384359484682E-11,
                -0.5253831761558460688819403840466E-12,
                +0.1559218272591925698855028609825E-12,
                -0.4729168297080398718476429369466E-13,
                +0.1463761864393243502076199493808E-13,
                -0.4617388988712924102232173623604E-14,
                +0.1482710348289369323789239660371E-14,
                -0.4841672496239229146973165734417E-15,
                +0.1606215575700290408116571966188E-15,
                -0.5408917538957170947895023784252E-16,
                +0.1847470159346897881370231402310E-16,
                -0.6395830792759094470500610425050E-17,
                +0.2242780721699759457250233276170E-17,
                -0.7961369173983947552744555308646E-18,
                +0.2859308111540197459808619929272E-18,
                -0.1038450244701137145900697137446E-18,
                +0.3812040607097975780866841008319E-19,
                -0.1413795417717200768717562723696E-19,
                +0.5295367865182740958305442594815E-20,
                -0.2002264245026825902137211131439E-20,
                +0.7640262751275196014736848610918E-21,
                -0.2941119006868787883311263523362E-21,
                +0.1141823539078927193037691483586E-21,
                -0.4469308475955298425247020718489E-22,
                +0.1763262410571750770630491408520E-22,
                -0.7009968187925902356351518262340E-23,
                +0.2807573556558378922287757507515E-23,
                -0.1132560944981086432141888891562E-23,
                +0.4600574684375017946156764233727E-24,
                -0.1881448598976133459864609148108E-24,
                +0.7744916111507730845444328478037E-25,
                -0.3208512760585368926702703826261E-25,
                +0.1337445542910839760619930421384E-25,
                -0.5608671881802217048894771735210E-26,
                +0.2365839716528537483710069473279E-26,
                -0.1003656195025305334065834526856E-26,
                +0.4281490878094161131286642556927E-27,
                -0.1836345261815318199691326958250E-27,
                +0.7917798231349540000097468678144E-28,
                -0.3431542358742220361025015775231E-28,
                +0.1494705493897103237475066008917E-28,
                -0.6542620279865705439739042420053E-29,
                +0.2877581395199171114340487353685E-29,
                -0.1271557211796024711027981200042E-29,
                +0.5644615555648722522388044622506E-30,
                -0.2516994994284095106080616830293E-30,
                +0.1127259818927510206370368804181E-30,
                -0.5069814875800460855562584719360E-31
            }
            ;
        double[] e11cs = {
                -0.16113461655571494025720663927566180E+02,
                +0.77940727787426802769272245891741497E+01,
                -0.19554058188631419507127283812814491E+01,
                +0.37337293866277945611517190865690209,
                -0.56925031910929019385263892220051166E-01,
                +0.72110777696600918537847724812635813E-02,
                -0.78104901449841593997715184089064148E-03,
                +0.73880933562621681878974881366177858E-04,
                -0.62028618758082045134358133607909712E-05,
                +0.46816002303176735524405823868362657E-06,
                -0.32092888533298649524072553027228719E-07,
                +0.20151997487404533394826262213019548E-08,
                -0.11673686816697793105356271695015419E-09,
                +0.62762706672039943397788748379615573E-11,
                -0.31481541672275441045246781802393600E-12,
                +0.14799041744493474210894472251733333E-13,
                -0.65457091583979673774263401588053333E-15,
                +0.27336872223137291142508012748799999E-16,
                -0.10813524349754406876721727624533333E-17,
                +0.40628328040434303295300348586666666E-19,
                -0.14535539358960455858914372266666666E-20,
                +0.49632746181648636830198442666666666E-22,
                -0.16208612696636044604866560000000000E-23,
                +0.50721448038607422226431999999999999E-25,
                -0.15235811133372207813973333333333333E-26,
                +0.44001511256103618696533333333333333E-28,
                -0.12236141945416231594666666666666666E-29,
                +0.32809216661066001066666666666666666E-31,
                -0.84933452268306432000000000000000000E-33
            }
            ;
        double[] e12cs = {
                -0.3739021479220279511668698204827E-01,
                +0.4272398606220957726049179176528E-01,
                -0.130318207984970054415392055219726,
                +0.144191240246988907341095893982137E-01,
                -0.134617078051068022116121527983553E-02,
                +0.107310292530637799976115850970073E-03,
                -0.742999951611943649610283062223163E-05,
                +0.453773256907537139386383211511827E-06,
                -0.247641721139060131846547423802912E-07,
                +0.122076581374590953700228167846102E-08,
                -0.548514148064092393821357398028261E-10,
                +0.226362142130078799293688162377002E-11,
                -0.863589727169800979404172916282240E-13,
                +0.306291553669332997581032894881279E-14,
                -0.101485718855944147557128906734933E-15,
                +0.315482174034069877546855328426666E-17,
                -0.923604240769240954484015923200000E-19,
                +0.255504267970814002440435029333333E-20,
                -0.669912805684566847217882453333333E-22,
                +0.166925405435387319431987199999999E-23,
                -0.396254925184379641856000000000000E-25,
                +0.898135896598511332010666666666666E-27,
                -0.194763366993016433322666666666666E-28,
                +0.404836019024630033066666666666666E-30,
                -0.807981567699845120000000000000000E-32
            }
            ;
        double value;

        switch (data.ntae10)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.ntae10 = r8_inits(ae10cs, 50, eta);
                data.ntae11 = r8_inits(ae11cs, 60, eta);
                data.ntae12 = r8_inits(ae12cs, 41, eta);
                data.nte11 = r8_inits(e11cs, 29, eta);
                data.nte12 = r8_inits(e12cs, 25, eta);
                data.ntae13 = r8_inits(ae13cs, 50, eta);
                data.ntae14 = r8_inits(ae14cs, 64, eta);
                data.xmax = -Math.Log(r8_mach(1));
                data.xmax -= Math.Log(data.xmax);
                break;
        }

        switch (x)
        {
            case <= -32.0:
                value = Math.Exp(-x) / x * (1.0
                                            + r8_csevl(64.0 / x + 1.0, ae10cs, data.ntae10));
                break;
            case <= -8.0:
                value = Math.Exp(-x) / x * (1.0
                                            + r8_csevl((64.0 / x + 5.0) / 3.0, ae11cs, data.ntae11));
                break;
            case <= -4.0:
                value = Math.Exp(-x) / x * (1.0
                                            + r8_csevl(16.0 / x + 3.0, ae12cs, data.ntae12));
                break;
            case <= -1.0:
                value = -Math.Log(-x)
                        + r8_csevl((2.0 * x + 5.0) / 3.0, e11cs, data.nte11);
                break;
            case 0.0:
                Console.WriteLine("");
                Console.WriteLine("R8_E1 - Fatal error!");
                Console.WriteLine("  X is zero.");
                return 1;
            case <= 1.0:
                value = -Math.Log(Math.Abs(x)) - 0.6875 + x
                                                        + r8_csevl(x, e12cs, data.nte12);
                break;
            case <= 4.0:
                value = Math.Exp(-x) / x * (1.0
                                            + r8_csevl((8.0 / x - 5.0) / 3.0, ae13cs, data.ntae13));
                break;
            default:
            {
                if (x <= data.xmax)
                {
                    value = Math.Exp(-x) / x * (1.0
                                                + r8_csevl(8.0 / x - 1.0, ae14cs, data.ntae14));
                }
                else
                {
                    value = 0.0;
                }

                break;
            }
        }

        return value;
    }

    public static double r8_ei(double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_EI evaluates the exponential integral Ei for an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    13 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_EI, the exponential integral Ei evaluated at X.
        //
    {
        double value = 0;

        r8E1Data data = new();
            
        value = -r8_e1(ref data, -x);

        return value;
    }

    public class r8ErfData
    {
        public int nterf;
        public double sqeps;
        public double xbig;
        public r8ErfCData erfcdata = new();
    }
    public static double r8_erf( ref r8ErfData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ERF evaluates the error function of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    15 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_ERF, the error function of X.
        //
    {
        double[] erfcs = {
                -0.49046121234691808039984544033376E-01,
                -0.14226120510371364237824741899631,
                +0.10035582187599795575754676712933E-01,
                -0.57687646997674847650827025509167E-03,
                +0.27419931252196061034422160791471E-04,
                -0.11043175507344507604135381295905E-05,
                +0.38488755420345036949961311498174E-07,
                -0.11808582533875466969631751801581E-08,
                +0.32334215826050909646402930953354E-10,
                -0.79910159470045487581607374708595E-12,
                +0.17990725113961455611967245486634E-13,
                -0.37186354878186926382316828209493E-15,
                +0.71035990037142529711689908394666E-17,
                -0.12612455119155225832495424853333E-18,
                +0.20916406941769294369170500266666E-20,
                -0.32539731029314072982364160000000E-22,
                +0.47668672097976748332373333333333E-24,
                -0.65980120782851343155199999999999E-26,
                +0.86550114699637626197333333333333E-28,
                -0.10788925177498064213333333333333E-29,
                +0.12811883993017002666666666666666E-31
            }
            ;
        const double sqrtpi = 1.77245385090551602729816748334115;
        double value = 0;

        switch (data.nterf)
        {
            case 0:
                data.nterf = r8_inits(erfcs, 21, 0.1 * r8_mach(3));
                data.xbig = Math.Sqrt(-Math.Log(sqrtpi * r8_mach(3)));
                data.sqeps = Math.Sqrt(2.0 * r8_mach(3));
                break;
        }

        double y = Math.Abs(x);

        if (y <= data.sqeps)
        {
            value = 2.0 * x / sqrtpi;
        }
        else
        {
            switch (y)
            {
                case <= 1.0:
                    value = x * (1.0 + r8_csevl(2.0 * x * x - 1.0, erfcs, data.nterf));
                    break;
                default:
                {
                    if (y <= data.xbig)
                    {
                        value = 1.0 - r8_erfc(ref data.erfcdata, y);
                        switch (x)
                        {
                            case < 0.0:
                                value = -value;
                                break;
                        }
                    }
                    else
                    {
                        value = x switch
                        {
                            < 0.0 => -value,
                            _ => 1.0
                        };
                    }

                    break;
                }
            }
        }

        return value;
    }

    public class r8ErfCData
    {
        public int nterc2;
        public int nterf;
        public int nterfc;
        public double sqeps;
        public double xmax;
        public double xsml;
    }
    public static double r8_erfc(ref r8ErfCData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_ERFC evaluates the co-error function of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    13 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_ERFC, the co-error function of X.
        //
    {
        double[] erc2cs = {
                -0.6960134660230950112739150826197E-01,
                -0.4110133936262089348982212084666E-01,
                +0.3914495866689626881561143705244E-02,
                -0.4906395650548979161280935450774E-03,
                +0.7157479001377036380760894141825E-04,
                -0.1153071634131232833808232847912E-04,
                +0.1994670590201997635052314867709E-05,
                -0.3642666471599222873936118430711E-06,
                +0.6944372610005012589931277214633E-07,
                -0.1371220902104366019534605141210E-07,
                +0.2788389661007137131963860348087E-08,
                -0.5814164724331161551864791050316E-09,
                +0.1238920491752753181180168817950E-09,
                -0.2690639145306743432390424937889E-10,
                +0.5942614350847910982444709683840E-11,
                -0.1332386735758119579287754420570E-11,
                +0.3028046806177132017173697243304E-12,
                -0.6966648814941032588795867588954E-13,
                +0.1620854541053922969812893227628E-13,
                -0.3809934465250491999876913057729E-14,
                +0.9040487815978831149368971012975E-15,
                -0.2164006195089607347809812047003E-15,
                +0.5222102233995854984607980244172E-16,
                -0.1269729602364555336372415527780E-16,
                +0.3109145504276197583836227412951E-17,
                -0.7663762920320385524009566714811E-18,
                +0.1900819251362745202536929733290E-18,
                -0.4742207279069039545225655999965E-19,
                +0.1189649200076528382880683078451E-19,
                -0.3000035590325780256845271313066E-20,
                +0.7602993453043246173019385277098E-21,
                -0.1935909447606872881569811049130E-21,
                +0.4951399124773337881000042386773E-22,
                -0.1271807481336371879608621989888E-22,
                +0.3280049600469513043315841652053E-23,
                -0.8492320176822896568924792422399E-24,
                +0.2206917892807560223519879987199E-24,
                -0.5755617245696528498312819507199E-25,
                +0.1506191533639234250354144051199E-25,
                -0.3954502959018796953104285695999E-26,
                +0.1041529704151500979984645051733E-26,
                -0.2751487795278765079450178901333E-27,
                +0.7290058205497557408997703680000E-28,
                -0.1936939645915947804077501098666E-28,
                +0.5160357112051487298370054826666E-29,
                -0.1378419322193094099389644800000E-29,
                +0.3691326793107069042251093333333E-30,
                -0.9909389590624365420653226666666E-31,
                +0.2666491705195388413323946666666E-31
            }
            ;
        double[] erfccs = {
                +0.715179310202924774503697709496E-01,
                -0.265324343376067157558893386681E-01,
                +0.171115397792085588332699194606E-02,
                -0.163751663458517884163746404749E-03,
                +0.198712935005520364995974806758E-04,
                -0.284371241276655508750175183152E-05,
                +0.460616130896313036969379968464E-06,
                -0.822775302587920842057766536366E-07,
                +0.159214187277090112989358340826E-07,
                -0.329507136225284321486631665072E-08,
                +0.722343976040055546581261153890E-09,
                -0.166485581339872959344695966886E-09,
                +0.401039258823766482077671768814E-10,
                -0.100481621442573113272170176283E-10,
                +0.260827591330033380859341009439E-11,
                -0.699111056040402486557697812476E-12,
                +0.192949233326170708624205749803E-12,
                -0.547013118875433106490125085271E-13,
                +0.158966330976269744839084032762E-13,
                -0.472689398019755483920369584290E-14,
                +0.143587337678498478672873997840E-14,
                -0.444951056181735839417250062829E-15,
                +0.140481088476823343737305537466E-15,
                -0.451381838776421089625963281623E-16,
                +0.147452154104513307787018713262E-16,
                -0.489262140694577615436841552532E-17,
                +0.164761214141064673895301522827E-17,
                -0.562681717632940809299928521323E-18,
                +0.194744338223207851429197867821E-18,
                -0.682630564294842072956664144723E-19,
                +0.242198888729864924018301125438E-19,
                -0.869341413350307042563800861857E-20,
                +0.315518034622808557122363401262E-20,
                -0.115737232404960874261239486742E-20,
                +0.428894716160565394623737097442E-21,
                -0.160503074205761685005737770964E-21,
                +0.606329875745380264495069923027E-22,
                -0.231140425169795849098840801367E-22,
                +0.888877854066188552554702955697E-23,
                -0.344726057665137652230718495566E-23,
                +0.134786546020696506827582774181E-23,
                -0.531179407112502173645873201807E-24,
                +0.210934105861978316828954734537E-24,
                -0.843836558792378911598133256738E-25,
                +0.339998252494520890627359576337E-25,
                -0.137945238807324209002238377110E-25,
                +0.563449031183325261513392634811E-26,
                -0.231649043447706544823427752700E-26,
                +0.958446284460181015263158381226E-27,
                -0.399072288033010972624224850193E-27,
                +0.167212922594447736017228709669E-27,
                -0.704599152276601385638803782587E-28,
                +0.297976840286420635412357989444E-28,
                -0.126252246646061929722422632994E-28,
                +0.539543870454248793985299653154E-29,
                -0.238099288253145918675346190062E-29,
                +0.109905283010276157359726683750E-29,
                -0.486771374164496572732518677435E-30,
                +0.152587726411035756763200828211E-30
            }
            ;
        double[] erfcs = {
                -0.49046121234691808039984544033376E-01,
                -0.14226120510371364237824741899631,
                +0.10035582187599795575754676712933E-01,
                -0.57687646997674847650827025509167E-03,
                +0.27419931252196061034422160791471E-04,
                -0.11043175507344507604135381295905E-05,
                +0.38488755420345036949961311498174E-07,
                -0.11808582533875466969631751801581E-08,
                +0.32334215826050909646402930953354E-10,
                -0.79910159470045487581607374708595E-12,
                +0.17990725113961455611967245486634E-13,
                -0.37186354878186926382316828209493E-15,
                +0.71035990037142529711689908394666E-17,
                -0.12612455119155225832495424853333E-18,
                +0.20916406941769294369170500266666E-20,
                -0.32539731029314072982364160000000E-22,
                +0.47668672097976748332373333333333E-24,
                -0.65980120782851343155199999999999E-26,
                +0.86550114699637626197333333333333E-28,
                -0.10788925177498064213333333333333E-29,
                +0.12811883993017002666666666666666E-31
            }
            ;
        const double sqrtpi = 1.77245385090551602729816748334115;
        double value;

        switch (data.nterf)
        {
            case 0:
                double eta = 0.1 * r8_mach(3);
                data.nterf = r8_inits(erfcs, 21, eta);
                data.nterfc = r8_inits(erfccs, 59, eta);
                data.nterc2 = r8_inits(erc2cs, 49, eta);

                data.xsml = -Math.Sqrt(-Math.Log(sqrtpi * r8_mach(3)));
                data.xmax = Math.Sqrt(-Math.Log(sqrtpi * r8_mach(1)));
                data.xmax = data.xmax - 0.5 * Math.Log(data.xmax) / data.xmax - 0.01;
                data.sqeps = Math.Sqrt(2.0 * r8_mach(3));
                break;
        }

        if (x <= data.xsml)
        {
            value = 2.0;
            return value;
        }

        if (data.xmax < x)
        {
            Console.WriteLine("");
            Console.WriteLine("R8_ERFC - Warning!");
            Console.WriteLine("  X so big that ERFC underflows.");
            value = 0.0;
            return value;
        }

        double y = Math.Abs(x);

        if (y < data.sqeps)
        {
            value = 1.0 - 2.0 * x / sqrtpi;
            return value;
        }

        switch (y)
        {
            case <= 1.0:
                value = 1.0 - x * (1.0
                                   + r8_csevl(2.0 * x * x - 1.0, erfcs, data.nterf));
                return value;
        }

        y *= y;

        value = y switch
        {
            <= 4.0 => Math.Exp(-y) / Math.Abs(x) * (0.5 + r8_csevl((8.0 / y - 5.0) / 3.0, erc2cs, data.nterc2)),
            _ => Math.Exp(-y) / Math.Abs(x) * (0.5 + r8_csevl(8.0 / y - 1.0, erfccs, data.nterfc))
        };

        switch (x)
        {
            case < 0.0:
                value = 2.0 - value;
                break;
        }

        return value;
    }

    public class r8ExpData
    {
        public int nterms;
        public double xmax;
        public double xmin;
        public r8PakData pakdata = new();

    }
    public static double r8_exp( ref r8ExpData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_EXP evaluates the exponential of an R8 argument.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    13 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_EXP, the exponential of X.
        //
    {
        const double aln216 = +0.83120654223414517758794896030274E-01;
        double[] expcs = {
                +0.866569493314985712733404647266231E-01,
                +0.938494869299839561896336579701203E-03,
                +0.677603970998168264074353014653601E-05,
                +0.366931200393805927801891250687610E-07,
                +0.158959053617461844641928517821508E-09,
                +0.573859878630206601252990815262106E-12,
                +0.177574448591421511802306980226000E-14,
                +0.480799166842372422675950244533333E-17,
                +0.115716376881828572809260000000000E-19,
                +0.250650610255497719932458666666666E-22,
                +0.493571708140495828480000000000000E-25,
                +0.890929572740634240000000000000000E-28,
                +0.148448062907997866666666666666666E-30,
                +0.229678916630186666666666666666666E-33
            }
            ;
        double[] twon16 = {
                +0.0,
                +0.44273782427413840321966478739929E-01,
                +0.90507732665257659207010655760707E-01,
                +0.13878863475669165370383028384151,
                +0.18920711500272106671749997056047,
                +0.24185781207348404859367746872659,
                +0.29683955465100966593375411779245,
                +0.35425554693689272829801474014070,
                +0.41421356237309504880168872420969,
                +0.47682614593949931138690748037404,
                +0.54221082540794082361229186209073,
                +0.61049033194925430817952066735740,
                +0.68179283050742908606225095246642,
                +0.75625216037329948311216061937531,
                +0.83400808640934246348708318958828,
                +0.91520656139714729387261127029583,
                +1.0
            }
            ;
        double value;

        switch (data.nterms)
        {
            case 0:
                data.nterms = r8_inits(expcs, 14, 0.1 * r8_mach(3));
                data.xmin = Math.Log(r8_mach(1)) + 0.01;
                data.xmax = Math.Log(r8_mach(2)) - 0.001;
                break;
        }

        if (x < data.xmin)
        {
            Console.WriteLine("");
            Console.WriteLine("R8_EXP - Warning!");
            Console.WriteLine("  X so small that exp(X) underflows.");
            value = 0.0;
        }
        else if (x <= data.xmax)
        {
            double xint = r8_aint(x);
            double y = x - xint;

            y = 23.0 * y + x * aln216;
            int n = (int) y;
            double f = y - n;
            n = (int)(23.0 * xint + n);
            int n16 = n / 16;
            switch (n)
            {
                case < 0:
                    n16 -= 1;
                    break;
            }

            int ndx = n - 16 * n16 + 1;

            value = 1.0 + (twon16[ndx - 1] + f * (1.0 + twon16[ndx - 1])
                                               * r8_csevl(f, expcs, data.nterms));

            value = r8_pak(ref data.pakdata, value, n16);
        }
        else
        {
            Console.WriteLine("");
            Console.WriteLine("R8_EXP - Fatal error!");
            Console.WriteLine("  X so large that exp(X) overflows.");
            return 1;
        }

        return value;
    }

    public class r8ExprelData
    {
        public int nterms;
        public double xbnd;

    }
    public static double r8_exprel( ref r8ExprelData data, double x)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    R8_EXPREL evaluates the exponential relative error term of an R8 argument.
        //
        //  Discussion:
        //
        //    The relative error term is ( exp ( x ) - 1 ) / x.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    13 September 2011
        //
        //  Author:
        //
        //    Original FORTRAN77 version by Wayne Fullerton.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Wayne Fullerton,
        //    Portable Special Function Routines,
        //    in Portability of Numerical Software,
        //    edited by Wayne Cowell,
        //    Lecture Notes in Computer Science, Volume 57,
        //    Springer 1977,
        //    ISBN: 978-3-540-08446-4,
        //    LC: QA297.W65.
        //
        //  Parameters:
        //
        //    Input, double X, the argument.
        //
        //    Output, double R8_EXPREL, the exponential relative error term
        //    at X.
        //
    {
        double value;

        switch (data.nterms)
        {
            case 0:
                double alneps = Math.Log(r8_mach(3));
                double xn = 3.72 - 0.3 * alneps;
                double xln = Math.Log((xn + 1.0) / 1.36);
                data.nterms = (int) (xn - (xn * xln + alneps) / (xln + 1.36) + 1.5);
                data.xbnd = r8_mach(3);
                break;
        }

        double absx = Math.Abs(x);

        if (absx < data.xbnd)
        {
            value = 1.0;
        }
        else
        {
            switch (absx)
            {
                case <= 0.5:
                {
                    value = 0.0;
                    int i;
                    for (i = 1; i <= data.nterms; i++)
                    {
                        value = 1.0 + value * x / (data.nterms + 2 - i);
                    }

                    break;
                }
                default:
                    value = (Math.Exp(x) - 1.0) / x;
                    break;
            }
        }

        return value;
    }
}