using System;
using Burkardt.ClenshawCurtisNS;
using Burkardt.Sequence;
using Burkardt.Types;

namespace Burkardt.Quadrature;

public static class GaussQuadrature
{
    public static void gauss(int n, double[] alpha, double[] beta, ref double[] x, ref double[] w)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    GAUSS computes a Gauss quadrature rule.
        //
        //  Discussion:
        //
        //    Given a weight function W encoded by the first N recurrence coefficients 
        //    ALPHA and BETA for the associated orthogonal polynomials, the call 
        //      call gauss ( n, alpha, beta, x, w ) 
        //    generates the nodes and weights of the N-point Gauss quadrature rule 
        //    for the weight function W.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    16 July 2013
        //
        //  Author:
        //
        //    Original MATLAB version by Walter Gautschi.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Walter Gautschi,
        //    Orthogonal Polynomials: Computation and Approximation,
        //    Oxford, 2004,
        //    ISBN: 0-19-850672-4,
        //    LC: QA404.5 G3555.
        //
        //  Parameters:
        //
        //    Input, int N, the order of the desired quadrature rule.
        //
        //    Input, double ALPHA[N], BETA[N], the alpha and beta recurrence 
        //    coefficients for the othogonal polynomials associated with the
        //    weight function.
        //
        //    Output, double X[N], W[N], the nodes and  weights of the desired 
        //    quadrature rule.  The nodes are listed in increasing order.
        //
    {
        int it_num = 0;
        int j;
        int rot_num = 0;
        //
        //  Define the tridiagonal Jacobi matrix.
        //
        double[] a = new double[n * n];

        for (j = 0; j < n; j++)
        {
            int i;
            for (i = 0; i < n; i++)
            {
                if (i == j)
                {
                    a[i + j * n] = alpha[i];
                }
                else if (i == j - 1)
                {
                    a[i + j * n] = Math.Sqrt(beta[j]);
                }
                else if (i - 1 == j)
                {
                    a[i + j * n] = Math.Sqrt(beta[i]);
                }
                else
                {
                    a[i + j * n] = 0.0;
                }
            }
        }

        //
        //  Get the eigenvectors and eigenvalues.
        //
        const int it_max = 100;

        double[] v = new double[n * n];

        Jacobi.jacobi_eigenvalue(n, a, it_max, ref v, ref x, ref it_num, ref rot_num);

        for (j = 0; j < n; j++)
        {
            w[j] = beta[0] * v[0 + j * n] * v[0 + j * n];
        }
    }

    public static double[] product_weight_gl(int dim_num, int[] order_1d, int order_nd)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    PRODUCT_WEIGHT_GL: weights for a product Gauss-Legendre rule.
        //
        //  Discussion:
        //
        //    This routine computes the weights for a quadrature rule which is
        //    a product of 1D Gauss-Legendre rules of varying order.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    25 September 2007
        //
        //  Author:
        //
        //    John Burkardt
        //
        //  Parameters:
        //
        //    Input, int DIM_NUM, the spatial dimension.
        //
        //    Input, int ORDER_1D[DIM_NUM], the order of the 1D rules.
        //
        //    Input, int ORDER_ND, the order of the product rule.
        //
        //    Output, double PRODUCT_WEIGHT_GL[ORDER_ND], the product rule weights.
        //
    {
        int dim;
        int order;

        typeMethods.r8vecDPData data = new();

        double[] w_nd = new double[order_nd];

        for (order = 0; order < order_nd; order++)
        {
            w_nd[order] = 1.0;
        }

        for (dim = 0; dim < dim_num; dim++)
        {
            double[] w_1d = new double[order_1d[dim]];

            gl_weights(order_1d[dim], ref w_1d);

            typeMethods.r8vec_direct_product2(ref data, dim, order_1d[dim], w_1d, dim_num,
                order_nd, ref w_nd);

        }

        return w_nd;
    }

    public static ClenshawCurtis.ccResult gqn(int n, double[] x_, double[] w_)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    GQN provides data for Gauss quadrature with a normal weight.
        //
        //  Discussion:
        //
        //    This data assumes integration over the interval (-oo,+oo) with 
        //    weight function w(x) = exp(-x*x/2)/sqrt(2*pi).
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    10 December 2012
        //
        //  Author:
        //
        //    Original MATLAB version by Florian Heiss, Viktor Winschel.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Florian Heiss, Viktor Winschel,
        //    Likelihood approximation by numerical integration on sparse grids,
        //    Journal of Econometrics,
        //    Volume 144, 2008, pages 62-80.
        //
        //  Parameters:
        //
        //    Input, int N, the number of points and weights.
        //    1 <= N <= 25.
        //
        //    Output, double X[N], the nodes.
        //
        //    Output, double W[N], the weights.
        //
    {
        ClenshawCurtis.ccResult result = new()
        {
            x = x_,
            w = w_
        };

        double[] x01 =
        {
            0.00000000000000000
        };
        double[] w01 =
        {
            1.00000000000000000
        };
        double[] x02 =
        {
            -1.00000000000000000, 1.00000000000000000
        };
        double[] w02 =
        {
            0.50000000000000000, 0.50000000000000000
        };
        double[] x03 =
        {
            -1.73205080756887719, 0.00000000000000000, 1.73205080756887719
        };
        double[] w03 =
        {
            0.166666666666666741, 0.66666666666666663, 0.166666666666666741
        };
        double[] x04 =
        {
            -2.33441421833897733, -0.741963784302725915, 0.741963784302725915,
            2.33441421833897733
        };
        double[] w04 =
        {
            0.0458758547680684983, 0.454124145231931453, 0.454124145231931453,
            0.0458758547680684983
        };
        double[] x05 =
        {
            -2.85697001387280558, -1.35562617997426593, 0.00000000000000000,
            1.35562617997426593, 2.85697001387280558
        };
        double[] w05 =
        {
            0.011257411327720691, 0.22207592200561263, 0.533333333333333437,
            0.22207592200561263, 0.011257411327720691
        };
        double[] x06 =
        {
            -3.32425743355211933, -1.88917587775371087, -0.616706590192594217,
            0.616706590192594217, 1.88917587775371087, 3.32425743355211933
        };
        double[] w06 =
        {
            0.00255578440205624308, 0.0886157460419145226, 0.408828469556029195,
            0.408828469556029195, 0.0886157460419145226, 0.00255578440205624308
        };
        double[] x07 =
        {
            -3.75043971772574247, -2.36675941073454155, -1.15440539473996817,
            0.00000000000000000, 1.15440539473996817, 2.36675941073454155,
            3.75043971772574247
        };
        double[] w07 =
        {
            0.000548268855972218754, 0.0307571239675864909, 0.240123178605012505,
            0.457142857142857573, 0.240123178605012505, 0.0307571239675864909,
            0.000548268855972218754
        };
        double[] x08 =
        {
            -4.14454718612589446, -2.80248586128754162, -1.63651904243510815,
            -0.539079811351375171, 0.539079811351375171, 1.63651904243510815,
            2.80248586128754162, 4.14454718612589446
        };
        double[] w08 =
        {
            0.000112614538375367836, 0.00963522012078826297, 0.117239907661758971,
            0.373012257679077364, 0.373012257679077364, 0.117239907661758971,
            0.00963522012078826297, 0.000112614538375367836
        };
        double[] x09 =
        {
            -4.51274586339978256, -3.20542900285647026, -2.07684797867783022,
            -1.02325566378913257, 0.00000000000000000, 1.02325566378913257,
            2.07684797867783022, 3.20542900285647026, 4.51274586339978256
        };
        double[] w09 =
        {
            2.23458440077465626E-05, 0.0027891413212317675, 0.0499164067652179688,
            0.244097502894939089, 0.406349206349206848, 0.244097502894939089,
            0.0499164067652179688, 0.0027891413212317675, 2.23458440077465626E-05
        };
        double[] x10 =
        {
            -4.85946282833231269, -3.58182348355192692, -2.48432584163895465,
            -1.46598909439115821, -0.484935707515497638, 0.484935707515497638,
            1.46598909439115821, 2.48432584163895465, 3.58182348355192692,
            4.85946282833231269
        };
        double[] w10 =
        {
            4.3106526307183106E-06, 0.000758070934312219725, 0.0191115805007703171,
            0.135483702980267295, 0.344642334932019401, 0.344642334932019401,
            0.135483702980267295, 0.0191115805007703171, 0.000758070934312219725,
            4.3106526307183106E-06
        };
        double[] x11 =
        {
            -5.18800122437487143, -3.93616660712997746, -2.8651231606436447,
            -1.87603502015484591, -0.928868997381063877, 0.00000000000000000,
            0.928868997381063877, 1.87603502015484591, 2.8651231606436447,
            3.93616660712997746, 5.18800122437487143
        };
        double[] w11 =
        {
            8.12184979021490357E-07, 0.000195671930271223244, 0.0067202852355372697,
            0.0661387460710576441, 0.242240299873970027, 0.369408369408369575,
            0.242240299873970027, 0.0661387460710576441, 0.0067202852355372697,
            0.000195671930271223244, 8.12184979021490357E-07
        };
        double[] x12 =
        {
            -5.50090170446774795, -4.27182584793228148, -3.22370982877009737,
            -2.25946445100079929, -1.34037519715161668, -0.444403001944139009,
            0.444403001944139009, 1.34037519715161668, 2.25946445100079929,
            3.22370982877009737, 4.27182584793228148, 5.50090170446774795
        };
        double[] w12 =
        {
            1.49992716763715968E-07, 4.83718492259060763E-05, 0.00220338068753318491,
            0.0291166879123641378, 0.146967048045329951, 0.321664361512830066,
            0.321664361512830066, 0.146967048045329951, 0.0291166879123641378,
            0.00220338068753318491, 4.83718492259060763E-05, 1.49992716763715968E-07
        };
        double[] x13 =
        {
            -5.8001672523865011, -4.59139844893652072, -3.56344438028163468,
            -2.62068997343221488, -1.7254183795882394, -0.856679493519450053,
            0.00000000000000000, 0.856679493519450053, 1.7254183795882394,
            2.62068997343221488, 3.56344438028163468, 4.59139844893652072,
            5.8001672523865011
        };
        double[] w13 =
        {
            2.72262764280590389E-08, 1.15265965273338848E-05, 0.000681236350442926191,
            0.0117705605059965426, 0.0791689558604501409, 0.237871522964135884,
            0.340992340992341492, 0.237871522964135884, 0.0791689558604501409,
            0.0117705605059965426, 0.000681236350442926191, 1.15265965273338848E-05,
            2.72262764280590389E-08
        };
        double[] x14 =
        {
            -6.08740954690129144, -4.89693639734556463, -3.88692457505976963,
            -2.96303657983866753, -2.08834474570194439, -1.24268895548546432,
            -0.412590457954601808, 0.412590457954601808, 1.24268895548546432,
            2.08834474570194439, 2.96303657983866753, 3.88692457505976963,
            4.89693639734556463, 6.08740954690129144
        };
        double[] w14 =
        {
            4.86816125774838718E-09, 2.66099134406763342E-06, 0.00020033955376074381,
            0.00442891910694740657, 0.0386501088242534319, 0.154083339842513656,
            0.302634626813019447, 0.302634626813019447, 0.154083339842513656,
            0.0386501088242534319, 0.00442891910694740657, 0.00020033955376074381,
            2.66099134406763342E-06, 4.86816125774838718E-09
        };
        double[] x15 =
        {
            -6.36394788882983775, -5.19009359130478209, -4.19620771126901548,
            -3.28908242439876641, -2.43243682700975805, -1.60671006902873015,
            -0.799129068324548109, 0.00000000000000000, 0.799129068324548109,
            1.60671006902873015, 2.43243682700975805, 3.28908242439876641,
            4.19620771126901548, 5.19009359130478209, 6.36394788882983775
        };
        double[] w15 =
        {
            8.58964989963318053E-10, 5.97541959792059611E-07, 5.64214640518901565E-05,
            0.00156735750354995707, 0.0173657744921376159, 0.0894177953998444436,
            0.232462293609732223, 0.318259518259518204, 0.232462293609732223,
            0.0894177953998444436, 0.0173657744921376159, 0.00156735750354995707,
            5.64214640518901565E-05, 5.97541959792059611E-07, 8.58964989963318053E-10
        };
        double[] x16 =
        {
            -6.63087819839312953, -5.47222570594934332, -4.49295530252001196,
            -3.60087362417154866, -2.76024504763070189, -1.95198034571633361,
            -1.1638291005549648, -0.386760604500557381, 0.386760604500557381,
            1.1638291005549648, 1.95198034571633361, 2.76024504763070189,
            3.60087362417154866, 4.49295530252001196, 5.47222570594934332,
            6.63087819839312953
        };
        double[] w16 =
        {
            1.49781472316183141E-10, 1.30947321628682029E-07, 1.53000321624872858E-05,
            0.000525984926573909786, 0.0072669376011847411, 0.0472847523540140674,
            0.158338372750949252, 0.286568521238012408, 0.286568521238012408,
            0.158338372750949252, 0.0472847523540140674, 0.0072669376011847411,
            0.000525984926573909786, 1.53000321624872858E-05, 1.30947321628682029E-07,
            1.49781472316183141E-10
        };
        double[] x17 =
        {
            -6.88912243989533302, -5.74446007865940711, -4.77853158962998403,
            -3.90006571719801043, -3.07379717532819408, -2.28101944025298886,
            -1.50988330779674085, -0.751842600703896302, 0.00000000000000000,
            0.751842600703896302, 1.50988330779674085, 2.28101944025298886,
            3.07379717532819408, 3.90006571719801043, 4.77853158962998403,
            5.74446007865940711, 6.88912243989533302
        };
        double[] w17 =
        {
            2.58431491937491514E-11, 2.80801611793057831E-08, 4.0126794479798725E-06,
            0.000168491431551339447, 0.00285894606228464989, 0.023086657025711152,
            0.0974063711627180806, 0.226706308468978768, 0.299538370126607556,
            0.226706308468978768, 0.0974063711627180806, 0.023086657025711152,
            0.00285894606228464989, 0.000168491431551339447, 4.0126794479798725E-06,
            2.80801611793057831E-08, 2.58431491937491514E-11
        };
        double[] x18 =
        {
            -7.13946484914647961, -6.00774591135959746, -5.05407268544274046,
            -4.1880202316294044, -3.37473653577809074, -2.59583368891124033,
            -1.83977992150864567, -1.09839551809150127, -0.365245755507697667,
            0.365245755507697667, 1.09839551809150127, 1.83977992150864567,
            2.59583368891124033, 3.37473653577809074, 4.1880202316294044,
            5.05407268544274046, 6.00774591135959746, 7.13946484914647961
        };
        double[] w18 =
        {
            4.41658876935870775E-12, 5.90548847883654844E-09, 1.02155239763698159E-06,
            5.17989614411619621E-05, 0.00106548479629164959, 0.0105165177519413525,
            0.0548966324802226541, 0.160685303893512627, 0.272783234654287887,
            0.272783234654287887, 0.160685303893512627, 0.0548966324802226541,
            0.0105165177519413525, 0.00106548479629164959, 5.17989614411619621E-05,
            1.02155239763698159E-06, 5.90548847883654844E-09, 4.41658876935870775E-12
        };
        double[] x19 =
        {
            -7.38257902403043165, -6.2628911565132519, -5.32053637733603857,
            -4.46587262683103159, -3.66441654745063827, -2.89805127651575356,
            -2.15550276131693508, -1.4288766760783731, -0.712085044042379933,
            0.00000000000000000, 0.712085044042379933, 1.4288766760783731,
            2.15550276131693508, 2.89805127651575356, 3.66441654745063827,
            4.46587262683103159, 5.32053637733603857, 6.2628911565132519,
            7.38257902403043165
        };
        double[] w19 =
        {
            7.4828300540572308E-13, 1.22037084844747862E-09, 2.53222003209286807E-07,
            1.53511459546667444E-05, 0.000378502109414267593, 0.00450723542034203555,
            0.0286666910301184956, 0.103603657276143998, 0.220941712199143658,
            0.283773192751521075, 0.220941712199143658, 0.103603657276143998,
            0.0286666910301184956, 0.00450723542034203555, 0.000378502109414267593,
            1.53511459546667444E-05, 2.53222003209286807E-07, 1.22037084844747862E-09,
            7.4828300540572308E-13
        };
        double[] x20 =
        {
            -7.61904854167975909, -6.51059015701365507, -5.57873880589320148,
            -4.73458133404605519, -3.9439673506573163, -3.18901481655339003,
            -2.45866361117236787, -1.74524732081412703, -1.04294534880275092,
            -0.346964157081355917, 0.346964157081355917, 1.04294534880275092,
            1.74524732081412703, 2.45866361117236787, 3.18901481655339003,
            3.9439673506573163, 4.73458133404605519, 5.57873880589320148,
            6.51059015701365507, 7.61904854167975909
        };
        double[] w20 =
        {
            1.25780067243793047E-13, 2.4820623623151838E-10, 6.12749025998295973E-08,
            4.40212109023086457E-06, 0.000128826279961928981, 0.00183010313108049175,
            0.0139978374471010428, 0.0615063720639760295, 0.161739333984000255,
            0.26079306344955544, 0.26079306344955544, 0.161739333984000255,
            0.0615063720639760295, 0.0139978374471010428, 0.00183010313108049175,
            0.000128826279961928981, 4.40212109023086457E-06, 6.12749025998295973E-08,
            2.4820623623151838E-10, 1.25780067243793047E-13
        };
        double[] x21 =
        {
            -7.84938289511382248, -6.75144471871746088, -5.82938200730447065,
            -4.99496394478202532, -4.21434398168842161, -3.46984669047537642,
            -2.75059298105237326, -2.0491024682571628, -1.35976582321123041,
            -0.678045692440644054, 0.00000000000000000, 0.678045692440644054,
            1.35976582321123041, 2.0491024682571628, 2.75059298105237326,
            3.46984669047537642, 4.21434398168842161, 4.99496394478202532,
            5.82938200730447065, 6.75144471871746088, 7.84938289511382248
        };
        double[] w21 =
        {
            2.09899121956566525E-14, 4.97536860412174643E-11, 1.45066128449307397E-08,
            1.22535483614825217E-06, 4.21923474255158655E-05, 0.000708047795481537364,
            0.00643969705140877684, 0.0339527297865428387, 0.10839228562641938,
            0.215333715695059824, 0.270260183572877066, 0.215333715695059824,
            0.10839228562641938, 0.0339527297865428387, 0.00643969705140877684,
            0.000708047795481537364, 4.21923474255158655E-05, 1.22535483614825217E-06,
            1.45066128449307397E-08, 4.97536860412174643E-11, 2.09899121956566525E-14
        };
        double[] x22 =
        {
            -8.07402998402171157, -6.98598042401881525, -6.07307495112289786,
            -5.2477244337144251, -4.47636197731086849, -3.74149635026651772,
            -3.03240422783167629, -2.34175999628770803, -1.6641248391179071,
            -0.995162422271215541, -0.331179315715273814, 0.331179315715273814,
            0.995162422271215541, 1.6641248391179071, 2.34175999628770803,
            3.03240422783167629, 3.74149635026651772, 4.47636197731086849,
            5.2477244337144251, 6.07307495112289786, 6.98598042401881525,
            8.07402998402171157
        };
        double[] w22 =
        {
            3.47946064787714279E-15, 9.84137898234601051E-12, 3.36651415945821088E-09,
            3.31985374981400429E-07, 1.33459771268087124E-05, 0.000262283303255964159,
            0.00280876104757721073, 0.0175690728808057736, 0.0671963114288898905,
            0.161906293413675378, 0.250243596586935013, 0.250243596586935013,
            0.161906293413675378, 0.0671963114288898905, 0.0175690728808057736,
            0.00280876104757721073, 0.000262283303255964159, 1.33459771268087124E-05,
            3.31985374981400429E-07, 3.36651415945821088E-09, 9.84137898234601051E-12,
            3.47946064787714279E-15
        };
        double[] x23 =
        {
            -8.29338602741735365, -7.21465943505186225, -6.31034985444839958,
            -5.49347398647179475, -4.73072419745147332, -4.00477532173330442,
            -3.30504002175296518, -2.62432363405918201, -1.9573275529334242,
            -1.29987646830397896, -0.648471153534495803, 0.00000000000000000,
            0.648471153534495803, 1.29987646830397896, 1.9573275529334242,
            2.62432363405918201, 3.30504002175296518, 4.00477532173330442,
            4.73072419745147332, 5.49347398647179475, 6.31034985444839958,
            7.21465943505186225, 8.29338602741735365
        };
        double[] w23 =
        {
            5.73238316780208728E-16, 1.92293531156779128E-12, 7.67088886239990765E-10,
            8.77506248386171607E-08, 4.08997724499215494E-06, 9.34081860903129835E-05,
            0.00116762863749786134, 0.00857967839146566401, 0.0388671837034809467,
            0.112073382602620911, 0.209959669577542613, 0.258509740808839039,
            0.209959669577542613, 0.112073382602620911, 0.0388671837034809467,
            0.00857967839146566401, 0.00116762863749786134, 9.34081860903129835E-05,
            4.08997724499215494E-06, 8.77506248386171607E-08, 7.67088886239990765E-10,
            1.92293531156779128E-12, 5.73238316780208728E-16
        };
        double[] x24 =
        {
            -8.50780351919525835, -7.43789066602166304, -6.54167500509863409,
            -5.73274717525120092, -4.97804137463912078, -4.26038360501990532,
            -3.56930676407356096, -2.89772864322331403, -2.24046785169175244,
            -1.59348042981642024, -0.953421922932109256, -0.317370096629452314,
            0.317370096629452314, 0.953421922932109256, 1.59348042981642024,
            2.24046785169175244, 2.89772864322331403, 3.56930676407356096,
            4.26038360501990532, 4.97804137463912078, 5.73274717525120092,
            6.54167500509863409, 7.43789066602166304, 8.50780351919525835
        };
        double[] w24 =
        {
            9.39019368904192022E-17, 3.71497415276241595E-13, 1.71866492796486901E-10,
            2.26746167348046514E-08, 1.21765974544258296E-06, 3.20950056527459886E-05,
            0.000464718718779397633, 0.00397660892918131129, 0.0211263444089670287,
            0.0720693640171784361, 0.161459512867000249, 0.240870115546640562,
            0.240870115546640562, 0.161459512867000249, 0.0720693640171784361,
            0.0211263444089670287, 0.00397660892918131129, 0.000464718718779397633,
            3.20950056527459886E-05, 1.21765974544258296E-06, 2.26746167348046514E-08,
            1.71866492796486901E-10, 3.71497415276241595E-13, 9.39019368904192022E-17
        };
        double[] x25 =
        {
            -8.71759767839958855, -7.65603795539307619, -6.76746496380971685,
            -5.96601469060670198, -5.21884809364427937, -4.50892992296728501,
            -3.82590056997249173, -3.16277567938819271, -2.51447330395220581,
            -1.8770583699478387, -1.24731197561678919, -0.622462279186076106,
            0.00000000000000000, 0.622462279186076106, 1.24731197561678919,
            1.8770583699478387, 2.51447330395220581, 3.16277567938819271,
            3.82590056997249173, 4.50892992296728501, 5.21884809364427937,
            5.96601469060670198, 6.76746496380971685, 7.65603795539307619,
            8.71759767839958855
        };
        double[] w25 =
        {
            1.53003899799868247E-17, 7.10210303700392527E-14, 3.79115000047718706E-11,
            5.7380238688993763E-09, 3.53015256024549785E-07, 1.06721949052025363E-05,
            0.0001777669069265266, 0.00175785040526379608, 0.0108567559914623159,
            0.0433799701676449712, 0.114880924303951637, 0.204851025650340413,
            0.248169351176485475, 0.204851025650340413, 0.114880924303951637,
            0.0433799701676449712, 0.0108567559914623159, 0.00175785040526379608,
            0.0001777669069265266, 1.06721949052025363E-05, 3.53015256024549785E-07,
            5.7380238688993763E-09, 3.79115000047718706E-11, 7.10210303700392527E-14,
            1.53003899799868247E-17
        };

        switch (n)
        {
            case 1:
                typeMethods.r8vec_copy(n, x01, ref result.x);
                typeMethods.r8vec_copy(n, w01, ref result.w);
                break;
            case 2:
                typeMethods.r8vec_copy(n, x02, ref result.x);
                typeMethods.r8vec_copy(n, w02, ref result.w);
                break;
            case 3:
                typeMethods.r8vec_copy(n, x03, ref result.x);
                typeMethods.r8vec_copy(n, w03, ref result.w);
                break;
            case 4:
                typeMethods.r8vec_copy(n, x04, ref result.x);
                typeMethods.r8vec_copy(n, w04, ref result.w);
                break;
            case 5:
                typeMethods.r8vec_copy(n, x05, ref result.x);
                typeMethods.r8vec_copy(n, w05, ref result.w);
                break;
            case 6:
                typeMethods.r8vec_copy(n, x06, ref result.x);
                typeMethods.r8vec_copy(n, w06, ref result.w);
                break;
            case 7:
                typeMethods.r8vec_copy(n, x07, ref result.x);
                typeMethods.r8vec_copy(n, w07, ref result.w);
                break;
            case 8:
                typeMethods.r8vec_copy(n, x08, ref result.x);
                typeMethods.r8vec_copy(n, w08, ref result.w);
                break;
            case 9:
                typeMethods.r8vec_copy(n, x09, ref result.x);
                typeMethods.r8vec_copy(n, w09, ref result.w);
                break;
            case 10:
                typeMethods.r8vec_copy(n, x10, ref result.x);
                typeMethods.r8vec_copy(n, w10, ref result.w);
                break;
            case 11:
                typeMethods.r8vec_copy(n, x11, ref result.x);
                typeMethods.r8vec_copy(n, w11, ref result.w);
                break;
            case 12:
                typeMethods.r8vec_copy(n, x12, ref result.x);
                typeMethods.r8vec_copy(n, w12, ref result.w);
                break;
            case 13:
                typeMethods.r8vec_copy(n, x13, ref result.x);
                typeMethods.r8vec_copy(n, w13, ref result.w);
                break;
            case 14:
                typeMethods.r8vec_copy(n, x14, ref result.x);
                typeMethods.r8vec_copy(n, w14, ref result.w);
                break;
            case 15:
                typeMethods.r8vec_copy(n, x15, ref result.x);
                typeMethods.r8vec_copy(n, w15, ref result.w);
                break;
            case 16:
                typeMethods.r8vec_copy(n, x16, ref result.x);
                typeMethods.r8vec_copy(n, w16, ref result.w);
                break;
            case 17:
                typeMethods.r8vec_copy(n, x17, ref result.x);
                typeMethods.r8vec_copy(n, w17, ref result.w);
                break;
            case 18:
                typeMethods.r8vec_copy(n, x18, ref result.x);
                typeMethods.r8vec_copy(n, w18, ref result.w);
                break;
            case 19:
                typeMethods.r8vec_copy(n, x19, ref result.x);
                typeMethods.r8vec_copy(n, w19, ref result.w);
                break;
            case 20:
                typeMethods.r8vec_copy(n, x20, ref result.x);
                typeMethods.r8vec_copy(n, w20, ref result.w);
                break;
            case 21:
                typeMethods.r8vec_copy(n, x21, ref result.x);
                typeMethods.r8vec_copy(n, w21, ref result.w);
                break;
            case 22:
                typeMethods.r8vec_copy(n, x22, ref result.x);
                typeMethods.r8vec_copy(n, w22, ref result.w);
                break;
            case 23:
                typeMethods.r8vec_copy(n, x23, ref result.x);
                typeMethods.r8vec_copy(n, w23, ref result.w);
                break;
            case 24:
                typeMethods.r8vec_copy(n, x24, ref result.x);
                typeMethods.r8vec_copy(n, w24, ref result.w);
                break;
            case 25:
                typeMethods.r8vec_copy(n, x25, ref result.x);
                typeMethods.r8vec_copy(n, w25, ref result.w);
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("GQN - Fatal error!");
                Console.WriteLine("  Value of N must be between 1 and 25.");
                break;
        }

        return result;

    }

    public static int gqn_order(int l)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    GQN_ORDER computes the order of a GQN rule from the level.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    08 December 2012
        //
        //  Author:
        //
        //    John Burkardt.
        //
        //  Parameters:
        //
        //    Input, int L, the level of the rule.  
        //    1 <= L.
        //
        //    Output, int GQN_ORDER, the order of the rule.
        //
    {
        int n;

        switch (l)
        {
            case < 1:
                Console.WriteLine("");
                Console.WriteLine("GQN_ORDER - Fatal error!");
                Console.WriteLine("  1 <= L required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
            case <= 25:
                n = l;
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("GQN_ORDER - Fatal error!");
                Console.WriteLine("  L <= 25 required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
        }

        return n;
    }

    public static int gqn2_order(int l)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    GQN2_ORDER computes the order of a GQN rule from the level.
        //
        //  Discussion:
        //
        //    For this version of the order routine, we have
        //
        //      n = 2 * l - 1
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    07 February 2014
        //
        //  Author:
        //
        //    John Burkardt.
        //
        //  Parameters:
        //
        //    Input, int L, the level of the rule.  
        //    1 <= L.
        //
        //    Output, int GQN_ORDER2, the order of the rule.
        //
    {
        int n;

        switch (l)
        {
            case < 1:
                Console.WriteLine("");
                Console.WriteLine("GQN_ORDER2 - Fatal error!");
                Console.WriteLine("  1 <= L required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
            case <= 13:
                n = 2 * l - 1;
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("GQN_ORDER2 - Fatal error!");
                Console.WriteLine("  L <= 13 required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
        }

        return n;
    }

    public static ClenshawCurtis.ccResult gqu(int n, double[] x_, double[] w_)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    GQU provides data for Gauss quadrature with a uniform weight.
        //
        //  Discussion:
        //
        //    This data assumes integration over the interval [0,1] with 
        //    weight function w(x) = 1.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    10 December 2012
        //
        //  Author:
        //
        //    John Burkardt.
        //
        //  Reference:
        //
        //    Florian Heiss, Viktor Winschel,
        //    Likelihood approximation by numerical integration on sparse grids,
        //    Journal of Econometrics,
        //    Volume 144, 2008, pages 62-80.
        //
        //  Parameters:
        //
        //    Input, int N, the number of points and weights.
        //    1 <= N <= 25.
        //
        //    Output, double X[N], the nodes.
        //
        //    Output, double W[N], the weights.
        //
    {
        ClenshawCurtis.ccResult result = new()
        {
            x = x_,
            w = w_
        };
        double[] x01 =
        {
            0.500000000000000000
        };
        double[] w01 =
        {
            1.000000000000000000
        };
        double[] x02 =
        {
            0.211324865405187134, 0.788675134594812866
        };
        double[] w02 =
        {
            0.500000000000000000, 0.500000000000000000
        };
        double[] x03 =
        {
            0.112701665379258298, 0.500000000000000000, 0.887298334620741702
        };
        double[] w03 =
        {
            0.277777777777777124, 0.444444444444445697, 0.277777777777777124
        };
        double[] x04 =
        {
            0.0694318442029737692, 0.330009478207571871, 0.669990521792428129,
            0.930568155797026231
        };
        double[] w04 =
        {
            0.173927422568724843, 0.326072577431275157, 0.326072577431275157,
            0.173927422568724843
        };
        double[] x05 =
        {
            0.0469100770306680737, 0.230765344947158502, 0.500000000000000000,
            0.769234655052841498, 0.953089922969331926
        };
        double[] w05 =
        {
            0.118463442528091739, 0.239314335249685012, 0.284444444444446554,
            0.239314335249685012, 0.118463442528091739
        };
        double[] x06 =
        {
            0.033765242898423975, 0.169395306766867648, 0.380690406958401506,
            0.619309593041598494, 0.830604693233132352, 0.966234757101576025
        };
        double[] w06 =
        {
            0.0856622461895818338, 0.180380786524070719, 0.233956967286347461,
            0.233956967286347461, 0.180380786524070719, 0.0856622461895818338
        };
        double[] x07 =
        {
            0.0254460438286208124, 0.12923440720030277, 0.297077424311301463,
            0.500000000000000000, 0.702922575688698537, 0.87076559279969723,
            0.974553956171379188
        };
        double[] w07 =
        {
            0.0647424830844317012, 0.139852695744639349, 0.190915025252560905,
            0.2089795918367362, 0.190915025252560905, 0.139852695744639349,
            0.0647424830844317012
        };
        double[] x08 =
        {
            0.0198550717512319119, 0.101666761293186525, 0.237233795041835505,
            0.408282678752175054, 0.591717321247824946, 0.762766204958164495,
            0.898333238706813475, 0.980144928248768088
        };
        double[] w08 =
        {
            0.0506142681451851803, 0.111190517226687935, 0.156853322938944689,
            0.181341891689182133, 0.181341891689182133, 0.156853322938944689,
            0.111190517226687935, 0.0506142681451851803
        };
        double[] x09 =
        {
            0.0159198802461869571, 0.0819844463366821152, 0.193314283649704821,
            0.337873288298095487, 0.500000000000000000, 0.662126711701904513,
            0.806685716350295179, 0.918015553663317885, 0.984080119753813043
        };
        double[] w09 =
        {
            0.0406371941807845832, 0.0903240803474292531, 0.130305348201468441,
            0.156173538520002264, 0.165119677500630752, 0.156173538520002264,
            0.130305348201468441, 0.0903240803474292531, 0.0406371941807845832
        };
        double[] x10 =
        {
            0.0130467357414141283, 0.0674683166555076763, 0.160295215850487782,
            0.283302302935376393, 0.42556283050918442, 0.57443716949081558,
            0.716697697064623607, 0.839704784149512218, 0.932531683344492324,
            0.986953264258585872
        };
        double[] w10 =
        {
            0.0333356721543420012, 0.0747256745752905988, 0.109543181257991576,
            0.13463335965499873, 0.147762112357377129, 0.147762112357377129,
            0.13463335965499873, 0.109543181257991576, 0.0747256745752905988,
            0.0333356721543420012
        };
        double[] x11 =
        {
            0.010885670926971569, 0.0564687001159522861, 0.134923997212975322,
            0.240451935396594152, 0.365228422023827548, 0.500000000000000000,
            0.634771577976172452, 0.759548064603405848, 0.865076002787024678,
            0.943531299884047714, 0.989114329073028431
        };
        double[] w11 =
        {
            0.0278342835580849164, 0.0627901847324526252, 0.0931451054638675197,
            0.11659688229599563, 0.131402272255123881, 0.136462543388950863,
            0.131402272255123881, 0.11659688229599563, 0.0931451054638675197,
            0.0627901847324526252, 0.0278342835580849164
        };
        double[] x12 =
        {
            0.00921968287664043373, 0.0479413718147625456, 0.115048662902847654,
            0.206341022856691314, 0.316084250500909936, 0.437383295744265488,
            0.562616704255734512, 0.683915749499090064, 0.793658977143308686,
            0.884951337097152346, 0.952058628185237454, 0.990780317123359566
        };
        double[] w12 =
        {
            0.0235876681932543145, 0.0534696629976592758, 0.0800391642716734436,
            0.101583713361533282, 0.116746268269177805, 0.124573522906701886,
            0.124573522906701886, 0.116746268269177805, 0.101583713361533282,
            0.0800391642716734436, 0.0534696629976592758, 0.0235876681932543145
        };
        double[] x13 =
        {
            0.00790847264070593248, 0.0412008003885109275, 0.0992109546333450609,
            0.178825330279829942, 0.275753624481776649, 0.384770842022432613,
            0.500000000000000000, 0.615229157977567387, 0.724246375518223351,
            0.821174669720170058, 0.900789045366654939, 0.958799199611489072,
            0.992091527359294068
        };
        double[] w13 =
        {
            0.0202420023826562281, 0.0460607499188643785, 0.0694367551098938746,
            0.0890729903809732021, 0.103908023768444616, 0.113141590131449032,
            0.116275776615437407, 0.113141590131449032, 0.103908023768444616,
            0.0890729903809732021, 0.0694367551098938746, 0.0460607499188643785,
            0.0202420023826562281
        };
        double[] x14 =
        {
            0.00685809565159378742, 0.0357825581682131855, 0.0863993424651174902,
            0.156353547594157316, 0.24237568182092295, 0.340443815536055183,
            0.445972525646328166, 0.554027474353671834, 0.659556184463944817,
            0.75762431817907705, 0.843646452405842684, 0.91360065753488251,
            0.964217441831786815, 0.993141904348406213
        };
        double[] w14 =
        {
            0.0175597301658745736, 0.0400790435798802913, 0.0607592853439517105,
            0.0786015835790969952, 0.0927691987389691608, 0.102599231860648107,
            0.107631926731579161, 0.107631926731579161, 0.102599231860648107,
            0.0927691987389691608, 0.0786015835790969952, 0.0607592853439517105,
            0.0400790435798802913, 0.0175597301658745736
        };
        double[] x15 =
        {
            0.0060037409897573113, 0.0313633037996470243, 0.0758967082947863414,
            0.137791134319914965, 0.214513913695730585, 0.302924326461218252,
            0.399402953001282701, 0.500000000000000000, 0.600597046998717299,
            0.697075673538781748, 0.785486086304269415, 0.862208865680085035,
            0.924103291705213659, 0.968636696200352976, 0.993996259010242689
        };
        double[] w15 =
        {
            0.0153766209980574341, 0.0351830237440541593, 0.0535796102335861571,
            0.0697853389630773147, 0.083134602908497196, 0.0930805000077812861,
            0.0992157426635560391, 0.101289120962780907, 0.0992157426635560391,
            0.0930805000077812861, 0.083134602908497196, 0.0697853389630773147,
            0.0535796102335861571, 0.0351830237440541593, 0.0153766209980574341
        };
        double[] x16 =
        {
            0.00529953250417503074, 0.0277124884633836999, 0.0671843988060840669,
            0.122297795822498445, 0.191061877798678115, 0.270991611171386371,
            0.359198224610370542, 0.452493745081181231, 0.547506254918818769,
            0.640801775389629458, 0.729008388828613629, 0.808938122201321885,
            0.877702204177501555, 0.932815601193915933, 0.9722875115366163,
            0.994700467495824969
        };
        double[] w16 =
        {
            0.0135762297058759553, 0.0311267619693239538, 0.0475792558412465455,
            0.062314485627767105, 0.0747979944082885623, 0.0845782596975014622,
            0.0913017075224620001, 0.0947253052275344315, 0.0947253052275344315,
            0.0913017075224620001, 0.0845782596975014622, 0.0747979944082885623,
            0.062314485627767105, 0.0475792558412465455, 0.0311267619693239538,
            0.0135762297058759553
        };
        double[] x17 =
        {
            0.00471226234279131795, 0.024662239115616158, 0.0598804231365070994,
            0.109242998051599316, 0.171164420391654692, 0.243654731456761531,
            0.324384118273061794, 0.410757909252076114, 0.500000000000000000,
            0.589242090747923886, 0.675615881726938206, 0.756345268543238469,
            0.828835579608345308, 0.890757001948400684, 0.940119576863492901,
            0.975337760884383842, 0.995287737657208682
        };
        double[] w17 =
        {
            0.01207415143427314, 0.0277297646869936118, 0.0425180741585896443,
            0.0559419235967020534, 0.0675681842342628902, 0.0770228805384053083,
            0.0840020510782251428, 0.0882813526834964474, 0.0897232351781034193,
            0.0882813526834964474, 0.0840020510782251428, 0.0770228805384053083,
            0.0675681842342628902, 0.0559419235967020534, 0.0425180741585896443,
            0.0277297646869936118, 0.01207415143427314
        };
        double[] x18 =
        {
            0.00421741578953449547, 0.022088025214301199, 0.0536987667512220934,
            0.0981475205137384288, 0.154156478469823388, 0.22011458446302623,
            0.294124419268578685, 0.374056887154247231, 0.457612493479132354,
            0.542387506520867646, 0.625943112845752769, 0.705875580731421315,
            0.77988541553697377, 0.845843521530176612, 0.901852479486261571,
            0.946301233248777907, 0.977911974785698801, 0.995782584210465505
        };
        double[] w18 =
        {
            0.0108080067632407191, 0.0248572744474849679, 0.0382128651274446646,
            0.0504710220531437159, 0.061277603355739306, 0.0703214573353254518,
            0.0773423375631328014, 0.0821382418729165037, 0.084571191481571939,
            0.084571191481571939, 0.0821382418729165037, 0.0773423375631328014,
            0.0703214573353254518, 0.061277603355739306, 0.0504710220531437159,
            0.0382128651274446646, 0.0248572744474849679, 0.0108080067632407191
        };
        double[] x19 =
        {
            0.00379657807820787951, 0.0198959239325849913, 0.048422048192590994,
            0.0886426717314285906, 0.139516911332385307, 0.19972734766915945,
            0.267714629312019503, 0.341717950018185057, 0.419820677179887358,
            0.500000000000000000, 0.580179322820112642, 0.658282049981814943,
            0.732285370687980497, 0.80027265233084055, 0.860483088667614693,
            0.911357328268571409, 0.951577951807409006, 0.980104076067415009,
            0.99620342192179212
        };
        double[] w19 =
        {
            0.00973089411486243415, 0.0224071133828498206, 0.0345222713688206687,
            0.0457450108112251244, 0.0557833227736671128, 0.064376981269668232,
            0.0713033510868034126, 0.0763830210329299597, 0.0794844216969773365,
            0.0805272249243919463, 0.0794844216969773365, 0.0763830210329299597,
            0.0713033510868034126, 0.064376981269668232, 0.0557833227736671128,
            0.0457450108112251244, 0.0345222713688206687, 0.0224071133828498206,
            0.00973089411486243415
        };
        double[] x20 =
        {
            0.00343570040745255767, 0.0180140363610430398, 0.0438827858743370269,
            0.0804415140888905533, 0.126834046769924602, 0.181973159636742432,
            0.244566499024586381, 0.313146955642290226, 0.386107074429177466,
            0.461736739433251331, 0.538263260566748669, 0.613892925570822534,
            0.686853044357709774, 0.755433500975413619, 0.818026840363257568,
            0.873165953230075398, 0.919558485911109447, 0.956117214125662973,
            0.98198596363895696, 0.996564299592547442
        };
        double[] w20 =
        {
            0.0088070035695753026, 0.0203007149001935561, 0.0313360241670545686,
            0.0416383707883524329, 0.0509650599086203179, 0.0590972659807592476,
            0.0658443192245883463, 0.0710480546591911871, 0.0745864932363019956,
            0.0763766935653631129, 0.0763766935653631129, 0.0745864932363019956,
            0.0710480546591911871, 0.0658443192245883463, 0.0590972659807592476,
            0.0509650599086203179, 0.0416383707883524329, 0.0313360241670545686,
            0.0203007149001935561, 0.0088070035695753026
        };
        double[] x21 =
        {
            0.00312391468980521836, 0.0163865807168468436, 0.0399503329247996586,
            0.0733183177083414073, 0.115780018262161111, 0.166430597901293886,
            0.224190582056390086, 0.287828939896280556, 0.355989341598799469,
            0.427219072919552412, 0.500000000000000000, 0.572780927080447588,
            0.644010658401200531, 0.712171060103719444, 0.775809417943609914,
            0.833569402098706114, 0.884219981737838889, 0.926681682291658593,
            0.960049667075200341, 0.983613419283153156, 0.996876085310194782
        };
        double[] w21 =
        {
            0.00800861412888644909, 0.018476894885426285, 0.0285672127134286406,
            0.0380500568141897075, 0.0467222117280169935, 0.0543986495835743558,
            0.06091570802686435, 0.0661344693166688452, 0.0699436973955366581,
            0.0722622019949851341, 0.073040566824845346, 0.0722622019949851341,
            0.0699436973955366581, 0.0661344693166688452, 0.06091570802686435,
            0.0543986495835743558, 0.0467222117280169935, 0.0380500568141897075,
            0.0285672127134286406, 0.018476894885426285, 0.00800861412888644909
        };
        double[] x22 =
        {
            0.0028527072588003799, 0.0149697510822857094, 0.036521613906413064,
            0.0670937111398499653, 0.106091597010395944, 0.152756368406658627,
            0.206179798246544199, 0.265322081006621469, 0.329032089553957907,
            0.396069786655889322, 0.465130363340138908, 0.534869636659861092,
            0.603930213344110678, 0.670967910446042093, 0.734677918993378531,
            0.793820201753455801, 0.847243631593341373, 0.893908402989604056,
            0.932906288860150035, 0.963478386093586936, 0.985030248917714291,
            0.99714729274119962
        };
        double[] w22 =
        {
            0.00731399764913532799, 0.0168874507924071104, 0.0261466675763416916,
            0.0348982342122602998, 0.0429708031085339753, 0.0502070722214406004,
            0.0564661480402697119, 0.0616261884052562506, 0.0655867523935313168,
            0.0682707491730076971, 0.0696259364278161291, 0.0696259364278161291,
            0.0682707491730076971, 0.0655867523935313168, 0.0616261884052562506,
            0.0564661480402697119, 0.0502070722214406004, 0.0429708031085339753,
            0.0348982342122602998, 0.0261466675763416916, 0.0168874507924071104,
            0.00731399764913532799
        };
        double[] x23 =
        {
            0.00261533250122392147, 0.013728764390942394, 0.0335144565869919253,
            0.061623820864779244, 0.0975557991905799948, 0.140669318434024859,
            0.190195062118176939, 0.245249261076996294, 0.304849480984854537,
            0.367932159514827495, 0.433371587850766904, 0.500000000000000000,
            0.566628412149233096, 0.632067840485172505, 0.695150519015145463,
            0.754750738923003706, 0.809804937881823061, 0.859330681565975141,
            0.902444200809420005, 0.938376179135220756, 0.966485543413008075,
            0.986271235609057606, 0.997384667498776079
        };
        double[] w23 =
        {
            0.0067059297435702412, 0.015494002928489686, 0.0240188358655423692,
            0.0321162107042629943, 0.0396407058883595509, 0.0464578830300175633,
            0.052446045732270824, 0.057498320111205814, 0.0615245421533648154,
            0.06445286109404115, 0.0662310197023484037, 0.0668272860930531759,
            0.0662310197023484037, 0.06445286109404115, 0.0615245421533648154,
            0.057498320111205814, 0.052446045732270824, 0.0464578830300175633,
            0.0396407058883595509, 0.0321162107042629943, 0.0240188358655423692,
            0.015494002928489686, 0.0067059297435702412
        };
        double[] x24 =
        {
            0.00240639000148934468, 0.0126357220143452631, 0.0308627239986336566,
            0.0567922364977995198, 0.0899990070130485265, 0.129937904210722821,
            0.175953174031512227, 0.227289264305580163, 0.283103246186977464,
            0.342478660151918302, 0.404440566263191803, 0.467971553568697241,
            0.532028446431302759, 0.595559433736808197, 0.657521339848081698,
            0.716896753813022536, 0.772710735694419837, 0.824046825968487773,
            0.870062095789277179, 0.910000992986951474, 0.94320776350220048,
            0.969137276001366343, 0.987364277985654737, 0.997593609998510655
        };
        double[] w24 =
        {
            0.00617061489999283508, 0.014265694314466934, 0.0221387194087098796,
            0.0296492924577183847, 0.0366732407055402054, 0.0430950807659766927,
            0.0488093260520570393, 0.0537221350579829143, 0.0577528340268628829,
            0.0608352364639017928, 0.0629187281734143178, 0.0639690976733762462,
            0.0639690976733762462, 0.0629187281734143178, 0.0608352364639017928,
            0.0577528340268628829, 0.0537221350579829143, 0.0488093260520570393,
            0.0430950807659766927, 0.0366732407055402054, 0.0296492924577183847,
            0.0221387194087098796, 0.014265694314466934, 0.00617061489999283508
        };
        double[] x25 =
        {
            0.00222151510475088187, 0.0116680392702412927, 0.0285127143855128384,
            0.052504001060862393, 0.0832786856195830705, 0.120370368481321099,
            0.163216815763265854, 0.211168534879388581, 0.263498634277142485,
            0.319413847095306069, 0.378066558139505737, 0.438567653694644788,
            0.500000000000000000, 0.561432346305355212, 0.621933441860494263,
            0.680586152904693931, 0.736501365722857515, 0.788831465120611419,
            0.836783184236734146, 0.879629631518678901, 0.91672131438041693,
            0.947495998939137607, 0.971487285614487162, 0.988331960729758707,
            0.997778484895249118
        };
        double[] w25 =
        {
            0.00569689925051255347, 0.0131774933075161083, 0.0204695783506531476,
            0.0274523479879176906, 0.0340191669061785454, 0.0400703501675005319,
            0.0455141309914819034, 0.0502679745335253628, 0.0542598122371318672,
            0.0574291295728558623, 0.0597278817678924615, 0.0611212214951551217,
            0.061588026863357799, 0.0611212214951551217, 0.0597278817678924615,
            0.0574291295728558623, 0.0542598122371318672, 0.0502679745335253628,
            0.0455141309914819034, 0.0400703501675005319, 0.0340191669061785454,
            0.0274523479879176906, 0.0204695783506531476, 0.0131774933075161083,
            0.00569689925051255347
        };

        switch (n)
        {
            case 1:
                typeMethods.r8vec_copy(n, x01, ref result.x);
                typeMethods.r8vec_copy(n, w01, ref result.w);
                break;
            case 2:
                typeMethods.r8vec_copy(n, x02, ref result.x);
                typeMethods.r8vec_copy(n, w02, ref result.w);
                break;
            case 3:
                typeMethods.r8vec_copy(n, x03, ref result.x);
                typeMethods.r8vec_copy(n, w03, ref result.w);
                break;
            case 4:
                typeMethods.r8vec_copy(n, x04, ref result.x);
                typeMethods.r8vec_copy(n, w04, ref result.w);
                break;
            case 5:
                typeMethods.r8vec_copy(n, x05, ref result.x);
                typeMethods.r8vec_copy(n, w05, ref result.w);
                break;
            case 6:
                typeMethods.r8vec_copy(n, x06, ref result.x);
                typeMethods.r8vec_copy(n, w06, ref result.w);
                break;
            case 7:
                typeMethods.r8vec_copy(n, x07, ref result.x);
                typeMethods.r8vec_copy(n, w07, ref result.w);
                break;
            case 8:
                typeMethods.r8vec_copy(n, x08, ref result.x);
                typeMethods.r8vec_copy(n, w08, ref result.w);
                break;
            case 9:
                typeMethods.r8vec_copy(n, x09, ref result.x);
                typeMethods.r8vec_copy(n, w09, ref result.w);
                break;
            case 10:
                typeMethods.r8vec_copy(n, x10, ref result.x);
                typeMethods.r8vec_copy(n, w10, ref result.w);
                break;
            case 11:
                typeMethods.r8vec_copy(n, x11, ref result.x);
                typeMethods.r8vec_copy(n, w11, ref result.w);
                break;
            case 12:
                typeMethods.r8vec_copy(n, x12, ref result.x);
                typeMethods.r8vec_copy(n, w12, ref result.w);
                break;
            case 13:
                typeMethods.r8vec_copy(n, x13, ref result.x);
                typeMethods.r8vec_copy(n, w13, ref result.w);
                break;
            case 14:
                typeMethods.r8vec_copy(n, x14, ref result.x);
                typeMethods.r8vec_copy(n, w14, ref result.w);
                break;
            case 15:
                typeMethods.r8vec_copy(n, x15, ref result.x);
                typeMethods.r8vec_copy(n, w15, ref result.w);
                break;
            case 16:
                typeMethods.r8vec_copy(n, x16, ref result.x);
                typeMethods.r8vec_copy(n, w16, ref result.w);
                break;
            case 17:
                typeMethods.r8vec_copy(n, x17, ref result.x);
                typeMethods.r8vec_copy(n, w17, ref result.w);
                break;
            case 18:
                typeMethods.r8vec_copy(n, x18, ref result.x);
                typeMethods.r8vec_copy(n, w18, ref result.w);
                break;
            case 19:
                typeMethods.r8vec_copy(n, x19, ref result.x);
                typeMethods.r8vec_copy(n, w19, ref result.w);
                break;
            case 20:
                typeMethods.r8vec_copy(n, x20, ref result.x);
                typeMethods.r8vec_copy(n, w20, ref result.w);
                break;
            case 21:
                typeMethods.r8vec_copy(n, x21, ref result.x);
                typeMethods.r8vec_copy(n, w21, ref result.w);
                break;
            case 22:
                typeMethods.r8vec_copy(n, x22, ref result.x);
                typeMethods.r8vec_copy(n, w22, ref result.w);
                break;
            case 23:
                typeMethods.r8vec_copy(n, x23, ref result.x);
                typeMethods.r8vec_copy(n, w23, ref result.w);
                break;
            case 24:
                typeMethods.r8vec_copy(n, x24, ref result.x);
                typeMethods.r8vec_copy(n, w24, ref result.w);
                break;
            case 25:
                typeMethods.r8vec_copy(n, x25, ref result.x);
                typeMethods.r8vec_copy(n, w25, ref result.w);
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("GQU - Fatal error!");
                Console.WriteLine("  Value of N must be between 1 and 25.");
                break;
        }

        return result;
    }

    public static int gqu_order(int l)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    GQU_ORDER computes the order of a GQU rule from the level.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    08 December 2012
        //
        //  Author:
        //
        //    John Burkardt.
        //
        //  Parameters:
        //
        //    Input, int L, the level of the rule.  
        //    1 <= L <= 25.
        //
        //    Output, int GQU_ORDER, the order of the rule.
        //
    {
        int n;

        switch (l)
        {
            case < 1:
                Console.WriteLine("");
                Console.WriteLine("GQU_ORDER - Fatal error!");
                Console.WriteLine("  L <= 25 required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
            case <= 25:
                n = l;
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("GQU_ORDER - Fatal error!");
                Console.WriteLine("  L <= 25 required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
        }

        return n;
    }



    public static void gl_abscissa(int dim_num, int point_num, int[] grid_index,
            int[] grid_base, ref double[] grid_point, int gridIndex = 0, int gridBaseIndex = 0,
            int gridPointIndex = 0)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    GL_ABSCISSA sets abscissas for multidimensional Gauss-Legendre quadrature.
        //
        //  Discussion:
        //
        //    The "nesting" as it occurs for Gauss-Legendre sparse grids simply
        //    involves the use of a specified set of permissible orders for the
        //    rule.  
        //
        //    The X array lists the (complete) Gauss-Legendre abscissas for rules 
        //    of order 1, 3, 7, 15, 31, 63 or 127, in order. 
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    02 October 2007
        //
        //  Author:
        //
        //    John Burkardt
        //
        //  Parameters:
        //
        //    Input, int DIM_NUM, the spatial dimension.
        //
        //    Input, int POINT_NUM, the number of points.
        //
        //    Input, int GRID_INDEX[DIM_NUM*POINT_NUM], the index of the abscissa
        //    from the Gauss-Legendre rule, for each dimension and point.
        //
        //    Input, int GRID_BASE[DIM_NUM], the number of points used in the 
        //    Gauss-Legendre rule for a given dimension.
        //
        //    Output, double GRID_POINT[DIM_NUM], the grid points of
        //    Gauss-Legendre abscissas.
        //
    {
        int dim;
        int point;
        int[] skip =
            {
                0, 1, 4, 11, 26, 57, 120, 247
            }
            ;
        double[] x =
            {
                0.0E+00,
                -0.774596669241483377035853079956E+00,
                0.0E+00,
                0.774596669241483377035853079956E+00,
                -0.949107912342758524526189684048E+00,
                -0.741531185599394439863864773281E+00,
                -0.405845151377397166906606412077E+00,
                0.0E+00,
                0.405845151377397166906606412077E+00,
                0.741531185599394439863864773281E+00,
                0.949107912342758524526189684048E+00,
                -0.987992518020485428489565718587E+00,
                -0.937273392400705904307758947710E+00,
                -0.848206583410427216200648320774E+00,
                -0.724417731360170047416186054614E+00,
                -0.570972172608538847537226737254E+00,
                -0.394151347077563369897207370981E+00,
                -0.201194093997434522300628303395E+00,
                0.0E+00,
                0.201194093997434522300628303395E+00,
                0.394151347077563369897207370981E+00,
                0.570972172608538847537226737254E+00,
                0.724417731360170047416186054614E+00,
                0.848206583410427216200648320774E+00,
                0.937273392400705904307758947710E+00,
                0.987992518020485428489565718587E+00,
                -0.99708748181947707454263838179654,
                -0.98468590966515248400211329970113,
                -0.96250392509294966178905249675943,
                -0.93075699789664816495694576311725,
                -0.88976002994827104337419200908023,
                -0.83992032014626734008690453594388,
                -0.78173314841662494040636002019484,
                -0.71577678458685328390597086536649,
                -0.64270672292426034618441820323250,
                -0.56324916140714926272094492359516,
                -0.47819378204490248044059403935649,
                -0.38838590160823294306135146128752,
                -0.29471806998170161661790389767170,
                -0.19812119933557062877241299603283,
                -0.99555312152341520325174790118941E-01,
                0.00000000000000000000000000000000,
                0.99555312152341520325174790118941E-01,
                0.19812119933557062877241299603283,
                0.29471806998170161661790389767170,
                0.38838590160823294306135146128752,
                0.47819378204490248044059403935649,
                0.56324916140714926272094492359516,
                0.64270672292426034618441820323250,
                0.71577678458685328390597086536649,
                0.78173314841662494040636002019484,
                0.83992032014626734008690453594388,
                0.88976002994827104337419200908023,
                0.93075699789664816495694576311725,
                0.96250392509294966178905249675943,
                0.98468590966515248400211329970113,
                0.99708748181947707454263838179654,
                -0.99928298402912378050701628988630E+00,
                -0.99622401277797010860209018267357E+00,
                -0.99072854689218946681089469460884E+00,
                -0.98280881059372723486251140727639E+00,
                -0.97248403469757002280196067864927E+00,
                -0.95977944975894192707035416626398E+00,
                -0.94472613404100980296637531962798E+00,
                -0.92736092062184320544703138132518E+00,
                -0.90772630277853155803695313291596E+00,
                -0.88587032850785342629029845731337E+00,
                -0.86184648236412371953961183943106E+00,
                -0.83571355431950284347180776961571E+00,
                -0.80753549577345676005146598636324E+00,
                -0.77738126299037233556333018991104E+00,
                -0.74532464831784741782932166103759E+00,
                -0.71144409958484580785143153770401E+00,
                -0.67582252811498609013110331596954E+00,
                -0.63854710582136538500030695387338E+00,
                -0.59970905187762523573900892686880E+00,
                -0.55940340948628501326769780007005E+00,
                -0.51772881329003324812447758452632E+00,
                -0.47478724799480439992221230985149E+00,
                -0.43068379879511160066208893391863E+00,
                -0.38552639421224789247761502227440E+00,
                -0.33942554197458440246883443159432E+00,
                -0.29249405858625144003615715555067E+00,
                -0.24484679324595336274840459392483E+00,
                -0.19660034679150668455762745706572E+00,
                -0.14787278635787196856983909655297E+00,
                -0.98783356446945279529703669453922E-01,
                -0.49452187116159627234233818051808E-01,
                0.00000000000000000000000000000000E+00,
                0.49452187116159627234233818051808E-01,
                0.98783356446945279529703669453922E-01,
                0.14787278635787196856983909655297E+00,
                0.19660034679150668455762745706572E+00,
                0.24484679324595336274840459392483E+00,
                0.29249405858625144003615715555067E+00,
                0.33942554197458440246883443159432E+00,
                0.38552639421224789247761502227440E+00,
                0.43068379879511160066208893391863E+00,
                0.47478724799480439992221230985149E+00,
                0.51772881329003324812447758452632E+00,
                0.55940340948628501326769780007005E+00,
                0.59970905187762523573900892686880E+00,
                0.63854710582136538500030695387338E+00,
                0.67582252811498609013110331596954E+00,
                0.71144409958484580785143153770401E+00,
                0.74532464831784741782932166103759E+00,
                0.77738126299037233556333018991104E+00,
                0.80753549577345676005146598636324E+00,
                0.83571355431950284347180776961571E+00,
                0.86184648236412371953961183943106E+00,
                0.88587032850785342629029845731337E+00,
                0.90772630277853155803695313291596E+00,
                0.92736092062184320544703138132518E+00,
                0.94472613404100980296637531962798E+00,
                0.95977944975894192707035416626398E+00,
                0.97248403469757002280196067864927E+00,
                0.98280881059372723486251140727639E+00,
                0.99072854689218946681089469460884E+00,
                0.99622401277797010860209018267357E+00,
                0.99928298402912378050701628988630E+00,
                -0.99982213041530614629963254927125E+00,
                -0.99906293435531189513828920479421E+00,
                -0.99769756618980462107441703193392E+00,
                -0.99572655135202722663543337085008E+00,
                -0.99315104925451714736113079489080E+00,
                -0.98997261459148415760778669967548E+00,
                -0.98619317401693166671043833175407E+00,
                -0.98181502080381411003346312451200E+00,
                -0.97684081234307032681744391886221E+00,
                -0.97127356816152919228894689830512E+00,
                -0.96511666794529212109082507703391E+00,
                -0.95837384942523877114910286998060E+00,
                -0.95104920607788031054790764659636E+00,
                -0.94314718462481482734544963026201E+00,
                -0.93467258232473796857363487794906E+00,
                -0.92563054405623384912746466814259E+00,
                -0.91602655919146580931308861741716E+00,
                -0.90586645826182138280246131760282E+00,
                -0.89515640941708370896904382642451E+00,
                -0.88390291468002656994525794802849E+00,
                -0.87211280599856071141963753428864E+00,
                -0.85979324109774080981203134414483E+00,
                -0.84695169913409759845333931085437E+00,
                -0.83359597615489951437955716480123E+00,
                -0.81973418036507867415511910167470E+00,
                -0.80537472720468021466656079404644E+00,
                -0.79052633423981379994544995252740E+00,
                -0.77519801587020238244496276354566E+00,
                -0.75939907785653667155666366659810E+00,
                -0.74313911167095451292056688997595E+00,
                -0.72642798867407268553569290153270E+00,
                -0.70927585412210456099944463906757E+00,
                -0.69169312100770067015644143286666E+00,
                -0.67369046373825048534668253831602E+00,
                -0.65527881165548263027676505156852E+00,
                -0.63646934240029724134760815684175E+00,
                -0.61727347512685828385763916340822E+00,
                -0.59770286357006522938441201887478E+00,
                -0.57776938897061258000325165713764E+00,
                -0.55748515286193223292186190687872E+00,
                -0.53686246972339756745816636353452E+00,
                -0.51591385950424935727727729906662E+00,
                -0.49465204002278211739494017368636E+00,
                -0.47308991924540524164509989939699E+00,
                -0.45124058745026622733189858020729E+00,
                -0.42911730928019337626254405355418E+00,
                -0.40673351568978256340867288124339E+00,
                -0.38410279579151693577907781452239E+00,
                -0.36123888860586970607092484346723E+00,
                -0.33815567472039850137600027657095E+00,
                -0.31486716786289498148601475374890E+00,
                -0.29138750639370562079451875284568E+00,
                -0.26773094472238862088834352027938E+00,
                -0.24391184465391785797071324453138E+00,
                -0.21994466666968754245452337866940E+00,
                -0.19584396114861085150428162519610E+00,
                -0.17162435953364216500834492248954E+00,
                -0.14730056544908566938932929319807E+00,
                -0.12288734577408297172603365288567E+00,
                -0.98399521677698970751091751509101E-01,
                -0.73851959621048545273440409360569E-01,
                -0.49259562331926630315379321821927E-01,
                -0.24637259757420944614897071846088E-01,
                0.00000000000000000000000000000000E+00,
                0.24637259757420944614897071846088E-01,
                0.49259562331926630315379321821927E-01,
                0.73851959621048545273440409360569E-01,
                0.98399521677698970751091751509101E-01,
                0.12288734577408297172603365288567E+00,
                0.14730056544908566938932929319807E+00,
                0.17162435953364216500834492248954E+00,
                0.19584396114861085150428162519610E+00,
                0.21994466666968754245452337866940E+00,
                0.24391184465391785797071324453138E+00,
                0.26773094472238862088834352027938E+00,
                0.29138750639370562079451875284568E+00,
                0.31486716786289498148601475374890E+00,
                0.33815567472039850137600027657095E+00,
                0.36123888860586970607092484346723E+00,
                0.38410279579151693577907781452239E+00,
                0.40673351568978256340867288124339E+00,
                0.42911730928019337626254405355418E+00,
                0.45124058745026622733189858020729E+00,
                0.47308991924540524164509989939699E+00,
                0.49465204002278211739494017368636E+00,
                0.51591385950424935727727729906662E+00,
                0.53686246972339756745816636353452E+00,
                0.55748515286193223292186190687872E+00,
                0.57776938897061258000325165713764E+00,
                0.59770286357006522938441201887478E+00,
                0.61727347512685828385763916340822E+00,
                0.63646934240029724134760815684175E+00,
                0.65527881165548263027676505156852E+00,
                0.67369046373825048534668253831602E+00,
                0.69169312100770067015644143286666E+00,
                0.70927585412210456099944463906757E+00,
                0.72642798867407268553569290153270E+00,
                0.74313911167095451292056688997595E+00,
                0.75939907785653667155666366659810E+00,
                0.77519801587020238244496276354566E+00,
                0.79052633423981379994544995252740E+00,
                0.80537472720468021466656079404644E+00,
                0.81973418036507867415511910167470E+00,
                0.83359597615489951437955716480123E+00,
                0.84695169913409759845333931085437E+00,
                0.85979324109774080981203134414483E+00,
                0.87211280599856071141963753428864E+00,
                0.88390291468002656994525794802849E+00,
                0.89515640941708370896904382642451E+00,
                0.90586645826182138280246131760282E+00,
                0.91602655919146580931308861741716E+00,
                0.92563054405623384912746466814259E+00,
                0.93467258232473796857363487794906E+00,
                0.94314718462481482734544963026201E+00,
                0.95104920607788031054790764659636E+00,
                0.95837384942523877114910286998060E+00,
                0.96511666794529212109082507703391E+00,
                0.97127356816152919228894689830512E+00,
                0.97684081234307032681744391886221E+00,
                0.98181502080381411003346312451200E+00,
                0.98619317401693166671043833175407E+00,
                0.98997261459148415760778669967548E+00,
                0.99315104925451714736113079489080E+00,
                0.99572655135202722663543337085008E+00,
                0.99769756618980462107441703193392E+00,
                0.99906293435531189513828920479421E+00,
                0.99982213041530614629963254927125E+00
            }
            ;

        for (dim = 0; dim < dim_num; dim++)
        {
            switch (grid_base[gridBaseIndex + dim])
            {
                case < 0:
                    Console.WriteLine("");
                    Console.WriteLine("GL_ABSCISSA - Fatal error!");
                    Console.WriteLine("  Some base values are less than 0.");
                    return;
            }
        }

        for (dim = 0; dim < dim_num; dim++)
        {
            switch (grid_base[gridBaseIndex + dim])
            {
                case > 63:
                    Console.WriteLine("");
                    Console.WriteLine("GL_ABSCISSA - Fatal error!");
                    Console.WriteLine("  Some base values are greater than 63.");
                    return;
            }
        }

        for (point = 0; point < point_num; point++)
        {
            for (dim = 0; dim < dim_num; dim++)
            {
                int level = (int)Math.Log2(grid_base[gridBaseIndex + dim] + 1);

                int pointer = skip[level] + grid_index[gridIndex + dim + point * dim_num] + grid_base[gridBaseIndex + dim];

                grid_point[gridPointIndex + dim + point * dim_num] = x[pointer];
            }
        }
    }

    public static double[] gl_weights(int order)
    {
        double[] weight = null;
            
        gl_weights(order, ref weight);

        return weight;
    }

    public static void gl_weights(int order, ref double[] weight)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    GL_WEIGHTS returns weights for certain Gauss-Legendre quadrature rules.
        //
        //  Discussion:
        //
        //    The allowed orders are 1, 3, 7, 15, 31, 63 and 127.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    02 October 2007
        //
        //  Author:
        //
        //    John Burkardt
        //
        //  Reference:
        //
        //    Milton Abramowitz, Irene Stegun,
        //    Handbook of Mathematical Functions,
        //    National Bureau of Standards, 1964,
        //    ISBN: 0-486-61272-4,
        //    LC: QA47.A34.
        //
        //    Arthur Stroud, Don Secrest,
        //    Gaussian Quadrature Formulas,
        //    Prentice Hall, 1966,
        //    LC: QA299.4G3S7.
        //
        //  Parameters:
        //
        //    Input, int ORDER, the order of the rule.
        //    ORDER must be 1, 3, 7, 15, 31, 63 or 127.
        //
        //    Output, double WEIGHT[ORDER], the weights.
        //    The weights are positive, symmetric and should sum to 2.
        //
    {
        switch (order)
        {
            case 1:
                weight[1 - 1] = 2.0E+00;
                break;
            case 3:
                weight[1 - 1] = 5.0E+00 / 9.0E+00;
                weight[2 - 1] = 8.0E+00 / 9.0E+00;
                weight[3 - 1] = 5.0E+00 / 9.0E+00;
                break;
            case 7:
                weight[1 - 1] = 0.129484966168869693270611432679E+00;
                weight[2 - 1] = 0.279705391489276667901467771424E+00;
                weight[3 - 1] = 0.381830050505118944950369775489E+00;
                weight[4 - 1] = 0.417959183673469387755102040816E+00;
                weight[5 - 1] = 0.381830050505118944950369775489E+00;
                weight[6 - 1] = 0.279705391489276667901467771424E+00;
                weight[7 - 1] = 0.129484966168869693270611432679E+00;
                break;
            case 15:
                weight[1 - 1] = 0.307532419961172683546283935772E-01;
                weight[2 - 1] = 0.703660474881081247092674164507E-01;
                weight[3 - 1] = 0.107159220467171935011869546686E+00;
                weight[4 - 1] = 0.139570677926154314447804794511E+00;
                weight[5 - 1] = 0.166269205816993933553200860481E+00;
                weight[6 - 1] = 0.186161000015562211026800561866E+00;
                weight[7 - 1] = 0.198431485327111576456118326444E+00;
                weight[8 - 1] = 0.202578241925561272880620199968E+00;
                weight[9 - 1] = 0.198431485327111576456118326444E+00;
                weight[10 - 1] = 0.186161000015562211026800561866E+00;
                weight[11 - 1] = 0.166269205816993933553200860481E+00;
                weight[12 - 1] = 0.139570677926154314447804794511E+00;
                weight[13 - 1] = 0.107159220467171935011869546686E+00;
                weight[14 - 1] = 0.703660474881081247092674164507E-01;
                weight[15 - 1] = 0.307532419961172683546283935772E-01;
                break;
            case 31:
                weight[1 - 1] = 0.74708315792487746093913218970494E-02;
                weight[2 - 1] = 0.17318620790310582463552990782414E-01;
                weight[3 - 1] = 0.27009019184979421800608642617676E-01;
                weight[4 - 1] = 0.36432273912385464024392008749009E-01;
                weight[5 - 1] = 0.45493707527201102902315857856518E-01;
                weight[6 - 1] = 0.54103082424916853711666259085477E-01;
                weight[7 - 1] = 0.62174786561028426910343543686657E-01;
                weight[8 - 1] = 0.69628583235410366167756126255124E-01;
                weight[9 - 1] = 0.76390386598776616426357674901331E-01;
                weight[10 - 1] = 0.82392991761589263903823367431962E-01;
                weight[11 - 1] = 0.87576740608477876126198069695333E-01;
                weight[12 - 1] = 0.91890113893641478215362871607150E-01;
                weight[13 - 1] = 0.95290242912319512807204197487597E-01;
                weight[14 - 1] = 0.97743335386328725093474010978997E-01;
                weight[15 - 1] = 0.99225011226672307874875514428615E-01;
                weight[16 - 1] = 0.99720544793426451427533833734349E-01;
                weight[17 - 1] = 0.99225011226672307874875514428615E-01;
                weight[18 - 1] = 0.97743335386328725093474010978997E-01;
                weight[19 - 1] = 0.95290242912319512807204197487597E-01;
                weight[20 - 1] = 0.91890113893641478215362871607150E-01;
                weight[21 - 1] = 0.87576740608477876126198069695333E-01;
                weight[22 - 1] = 0.82392991761589263903823367431962E-01;
                weight[23 - 1] = 0.76390386598776616426357674901331E-01;
                weight[24 - 1] = 0.69628583235410366167756126255124E-01;
                weight[25 - 1] = 0.62174786561028426910343543686657E-01;
                weight[26 - 1] = 0.54103082424916853711666259085477E-01;
                weight[27 - 1] = 0.45493707527201102902315857856518E-01;
                weight[28 - 1] = 0.36432273912385464024392008749009E-01;
                weight[29 - 1] = 0.27009019184979421800608642617676E-01;
                weight[30 - 1] = 0.17318620790310582463552990782414E-01;
                weight[31 - 1] = 0.74708315792487746093913218970494E-02;
                break;
            case 63:
                weight[1 - 1] = 0.18398745955770837880499331680577E-02;
                weight[2 - 1] = 0.42785083468637618661951422543371E-02;
                weight[3 - 1] = 0.67102917659601362519069109850892E-02;
                weight[4 - 1] = 0.91259686763266563540586445877022E-02;
                weight[5 - 1] = 0.11519376076880041750750606118707E-01;
                weight[6 - 1] = 0.13884612616115610824866086365937E-01;
                weight[7 - 1] = 0.16215878410338338882283672974995E-01;
                weight[8 - 1] = 0.18507464460161270409260545805144E-01;
                weight[9 - 1] = 0.20753761258039090775341953421471E-01;
                weight[10 - 1] = 0.22949271004889933148942319561770E-01;
                weight[11 - 1] = 0.25088620553344986618630138068443E-01;
                weight[12 - 1] = 0.27166574359097933225189839439413E-01;
                weight[13 - 1] = 0.29178047208280526945551502154029E-01;
                weight[14 - 1] = 0.31118116622219817508215988557189E-01;
                weight[15 - 1] = 0.32982034883779341765683179672459E-01;
                weight[16 - 1] = 0.34765240645355877697180504642788E-01;
                weight[17 - 1] = 0.36463370085457289630452409787542E-01;
                weight[18 - 1] = 0.38072267584349556763638324927889E-01;
                weight[19 - 1] = 0.39587995891544093984807928149202E-01;
                weight[20 - 1] = 0.41006845759666398635110037009072E-01;
                weight[21 - 1] = 0.42325345020815822982505485403028E-01;
                weight[22 - 1] = 0.43540267083027590798964315704401E-01;
                weight[23 - 1] = 0.44648638825941395370332669516813E-01;
                weight[24 - 1] = 0.45647747876292608685885992608542E-01;
                weight[25 - 1] = 0.46535149245383696510395418746953E-01;
                weight[26 - 1] = 0.47308671312268919080604988338844E-01;
                weight[27 - 1] = 0.47966421137995131411052756195132E-01;
                weight[28 - 1] = 0.48506789097883847864090099145802E-01;
                weight[29 - 1] = 0.48928452820511989944709361549215E-01;
                weight[30 - 1] = 0.49230380423747560785043116988145E-01;
                weight[31 - 1] = 0.49411833039918178967039646116705E-01;
                weight[32 - 1] = 0.49472366623931020888669360420926E-01;
                weight[33 - 1] = 0.49411833039918178967039646116705E-01;
                weight[34 - 1] = 0.49230380423747560785043116988145E-01;
                weight[35 - 1] = 0.48928452820511989944709361549215E-01;
                weight[36 - 1] = 0.48506789097883847864090099145802E-01;
                weight[37 - 1] = 0.47966421137995131411052756195132E-01;
                weight[38 - 1] = 0.47308671312268919080604988338844E-01;
                weight[39 - 1] = 0.46535149245383696510395418746953E-01;
                weight[40 - 1] = 0.45647747876292608685885992608542E-01;
                weight[41 - 1] = 0.44648638825941395370332669516813E-01;
                weight[42 - 1] = 0.43540267083027590798964315704401E-01;
                weight[43 - 1] = 0.42325345020815822982505485403028E-01;
                weight[44 - 1] = 0.41006845759666398635110037009072E-01;
                weight[45 - 1] = 0.39587995891544093984807928149202E-01;
                weight[46 - 1] = 0.38072267584349556763638324927889E-01;
                weight[47 - 1] = 0.36463370085457289630452409787542E-01;
                weight[48 - 1] = 0.34765240645355877697180504642788E-01;
                weight[49 - 1] = 0.32982034883779341765683179672459E-01;
                weight[50 - 1] = 0.31118116622219817508215988557189E-01;
                weight[51 - 1] = 0.29178047208280526945551502154029E-01;
                weight[52 - 1] = 0.27166574359097933225189839439413E-01;
                weight[53 - 1] = 0.25088620553344986618630138068443E-01;
                weight[54 - 1] = 0.22949271004889933148942319561770E-01;
                weight[55 - 1] = 0.20753761258039090775341953421471E-01;
                weight[56 - 1] = 0.18507464460161270409260545805144E-01;
                weight[57 - 1] = 0.16215878410338338882283672974995E-01;
                weight[58 - 1] = 0.13884612616115610824866086365937E-01;
                weight[59 - 1] = 0.11519376076880041750750606118707E-01;
                weight[60 - 1] = 0.91259686763266563540586445877022E-02;
                weight[61 - 1] = 0.67102917659601362519069109850892E-02;
                weight[62 - 1] = 0.42785083468637618661951422543371E-02;
                weight[63 - 1] = 0.18398745955770837880499331680577E-02;
                break;
            case 127:
                weight[1 - 1] = 0.45645726109586654495731936146574E-03;
                weight[2 - 1] = 0.10622766869538486959954760554099E-02;
                weight[3 - 1] = 0.16683488125171936761028811985672E-02;
                weight[4 - 1] = 0.22734860707492547802810838362671E-02;
                weight[5 - 1] = 0.28772587656289004082883197417581E-02;
                weight[6 - 1] = 0.34792893810051465908910894094105E-02;
                weight[7 - 1] = 0.40792095178254605327114733456293E-02;
                weight[8 - 1] = 0.46766539777779034772638165662478E-02;
                weight[9 - 1] = 0.52712596565634400891303815906251E-02;
                weight[10 - 1] = 0.58626653903523901033648343751367E-02;
                weight[11 - 1] = 0.64505120486899171845442463868748E-02;
                weight[12 - 1] = 0.70344427036681608755685893032552E-02;
                weight[13 - 1] = 0.76141028256526859356393930849227E-02;
                weight[14 - 1] = 0.81891404887415730817235884718726E-02;
                weight[15 - 1] = 0.87592065795403145773316804234385E-02;
                weight[16 - 1] = 0.93239550065309714787536985834029E-02;
                weight[17 - 1] = 0.98830429087554914716648010899606E-02;
                weight[18 - 1] = 0.10436130863141005225673171997668E-01;
                weight[19 - 1] = 0.10982883090068975788799657376065E-01;
                weight[20 - 1] = 0.11522967656921087154811609734510E-01;
                weight[21 - 1] = 0.12056056679400848183529562144697E-01;
                weight[22 - 1] = 0.12581826520465013101514365424172E-01;
                weight[23 - 1] = 0.13099957986718627426172681912499E-01;
                weight[24 - 1] = 0.13610136522139249906034237533759E-01;
                weight[25 - 1] = 0.14112052399003395774044161633613E-01;
                weight[26 - 1] = 0.14605400905893418351737288078952E-01;
                weight[27 - 1] = 0.15089882532666922992635733981431E-01;
                weight[28 - 1] = 0.15565203152273955098532590262975E-01;
                weight[29 - 1] = 0.16031074199309941802254151842763E-01;
                weight[30 - 1] = 0.16487212845194879399346060358146E-01;
                weight[31 - 1] = 0.16933342169871654545878815295200E-01;
                weight[32 - 1] = 0.17369191329918731922164721250350E-01;
                weight[33 - 1] = 0.17794495722974774231027912900351E-01;
                weight[34 - 1] = 0.18208997148375106468721469154479E-01;
                weight[35 - 1] = 0.18612443963902310429440419898958E-01;
                weight[36 - 1] = 0.19004591238555646611148901044533E-01;
                weight[37 - 1] = 0.19385200901246454628112623489471E-01;
                weight[38 - 1] = 0.19754041885329183081815217323169E-01;
                weight[39 - 1] = 0.20110890268880247225644623956287E-01;
                weight[40 - 1] = 0.20455529410639508279497065713301E-01;
                weight[41 - 1] = 0.20787750081531811812652137291250E-01;
                weight[42 - 1] = 0.21107350591688713643523847921658E-01;
                weight[43 - 1] = 0.21414136912893259295449693233545E-01;
                weight[44 - 1] = 0.21707922796373466052301324695331E-01;
                weight[45 - 1] = 0.21988529885872983756478409758807E-01;
                weight[46 - 1] = 0.22255787825930280235631416460158E-01;
                weight[47 - 1] = 0.22509534365300608085694429903050E-01;
                weight[48 - 1] = 0.22749615455457959852242553240982E-01;
                weight[49 - 1] = 0.22975885344117206754377437838947E-01;
                weight[50 - 1] = 0.23188206663719640249922582981729E-01;
                weight[51 - 1] = 0.23386450514828194170722043496950E-01;
                weight[52 - 1] = 0.23570496544381716050033676844306E-01;
                weight[53 - 1] = 0.23740233018760777777714726703424E-01;
                weight[54 - 1] = 0.23895556891620665983864481754172E-01;
                weight[55 - 1] = 0.24036373866450369675132086026456E-01;
                weight[56 - 1] = 0.24162598453819584716522917710986E-01;
                weight[57 - 1] = 0.24274154023278979833195063936748E-01;
                weight[58 - 1] = 0.24370972849882214952813561907241E-01;
                weight[59 - 1] = 0.24452996155301467956140198471529E-01;
                weight[60 - 1] = 0.24520174143511508275183033290175E-01;
                weight[61 - 1] = 0.24572466031020653286354137335186E-01;
                weight[62 - 1] = 0.24609840071630254092545634003360E-01;
                weight[63 - 1] = 0.24632273575707679066033370218017E-01;
                weight[64 - 1] = 0.24639752923961094419579417477503E-01;
                weight[65 - 1] = 0.24632273575707679066033370218017E-01;
                weight[66 - 1] = 0.24609840071630254092545634003360E-01;
                weight[67 - 1] = 0.24572466031020653286354137335186E-01;
                weight[68 - 1] = 0.24520174143511508275183033290175E-01;
                weight[69 - 1] = 0.24452996155301467956140198471529E-01;
                weight[70 - 1] = 0.24370972849882214952813561907241E-01;
                weight[71 - 1] = 0.24274154023278979833195063936748E-01;
                weight[72 - 1] = 0.24162598453819584716522917710986E-01;
                weight[73 - 1] = 0.24036373866450369675132086026456E-01;
                weight[74 - 1] = 0.23895556891620665983864481754172E-01;
                weight[75 - 1] = 0.23740233018760777777714726703424E-01;
                weight[76 - 1] = 0.23570496544381716050033676844306E-01;
                weight[77 - 1] = 0.23386450514828194170722043496950E-01;
                weight[78 - 1] = 0.23188206663719640249922582981729E-01;
                weight[79 - 1] = 0.22975885344117206754377437838947E-01;
                weight[80 - 1] = 0.22749615455457959852242553240982E-01;
                weight[81 - 1] = 0.22509534365300608085694429903050E-01;
                weight[82 - 1] = 0.22255787825930280235631416460158E-01;
                weight[83 - 1] = 0.21988529885872983756478409758807E-01;
                weight[84 - 1] = 0.21707922796373466052301324695331E-01;
                weight[85 - 1] = 0.21414136912893259295449693233545E-01;
                weight[86 - 1] = 0.21107350591688713643523847921658E-01;
                weight[87 - 1] = 0.20787750081531811812652137291250E-01;
                weight[88 - 1] = 0.20455529410639508279497065713301E-01;
                weight[89 - 1] = 0.20110890268880247225644623956287E-01;
                weight[90 - 1] = 0.19754041885329183081815217323169E-01;
                weight[91 - 1] = 0.19385200901246454628112623489471E-01;
                weight[92 - 1] = 0.19004591238555646611148901044533E-01;
                weight[93 - 1] = 0.18612443963902310429440419898958E-01;
                weight[94 - 1] = 0.18208997148375106468721469154479E-01;
                weight[95 - 1] = 0.17794495722974774231027912900351E-01;
                weight[96 - 1] = 0.17369191329918731922164721250350E-01;
                weight[97 - 1] = 0.16933342169871654545878815295200E-01;
                weight[98 - 1] = 0.16487212845194879399346060358146E-01;
                weight[99 - 1] = 0.16031074199309941802254151842763E-01;
                weight[100 - 1] = 0.15565203152273955098532590262975E-01;
                weight[101 - 1] = 0.15089882532666922992635733981431E-01;
                weight[102 - 1] = 0.14605400905893418351737288078952E-01;
                weight[103 - 1] = 0.14112052399003395774044161633613E-01;
                weight[104 - 1] = 0.13610136522139249906034237533759E-01;
                weight[105 - 1] = 0.13099957986718627426172681912499E-01;
                weight[106 - 1] = 0.12581826520465013101514365424172E-01;
                weight[107 - 1] = 0.12056056679400848183529562144697E-01;
                weight[108 - 1] = 0.11522967656921087154811609734510E-01;
                weight[109 - 1] = 0.10982883090068975788799657376065E-01;
                weight[110 - 1] = 0.10436130863141005225673171997668E-01;
                weight[111 - 1] = 0.98830429087554914716648010899606E-02;
                weight[112 - 1] = 0.93239550065309714787536985834029E-02;
                weight[113 - 1] = 0.87592065795403145773316804234385E-02;
                weight[114 - 1] = 0.81891404887415730817235884718726E-02;
                weight[115 - 1] = 0.76141028256526859356393930849227E-02;
                weight[116 - 1] = 0.70344427036681608755685893032552E-02;
                weight[117 - 1] = 0.64505120486899171845442463868748E-02;
                weight[118 - 1] = 0.58626653903523901033648343751367E-02;
                weight[119 - 1] = 0.52712596565634400891303815906251E-02;
                weight[120 - 1] = 0.46766539777779034772638165662478E-02;
                weight[121 - 1] = 0.40792095178254605327114733456293E-02;
                weight[122 - 1] = 0.34792893810051465908910894094105E-02;
                weight[123 - 1] = 0.28772587656289004082883197417581E-02;
                weight[124 - 1] = 0.22734860707492547802810838362671E-02;
                weight[125 - 1] = 0.16683488125171936761028811985672E-02;
                weight[126 - 1] = 0.10622766869538486959954760554099E-02;
                weight[127 - 1] = 0.45645726109586654495731936146574E-03;
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("GL_WEIGHTS - Fatal error!");
                Console.WriteLine("  Illegal value of ORDER = " + order + "");
                Console.WriteLine("  Legal values are 1, 3, 7, 15, 31, 63 and 127.");
                break;
        }
    }
}