using System;
using Burkardt.Sequence;
using Burkardt.Types;

namespace Burkardt.Quadrature
{
    public static class GaussQuadrature
    {
        public static void gauss(int n, double[] alpha, double[] beta, ref double[] x, ref double[] w)

            //****************************************************************************80
            //
            //  Purpose:
            //
            //    GAUSS computes a Gauss quadrature rule.
            //
            //  Discussion:
            //
            //    Given a weight function W encoded by the first N recurrence coefficients 
            //    ALPHA and BETA for the associated orthogonal polynomials, the call 
            //      call gauss ( n, alpha, beta, x, w ) 
            //    generates the nodes and weights of the N-point Gauss quadrature rule 
            //    for the weight function W.
            //
            //  Licensing:
            //
            //    This code is distributed under the GNU LGPL license. 
            //
            //  Modified:
            //
            //    16 July 2013
            //
            //  Author:
            //
            //    Original MATLAB version by Walter Gautschi.
            //    C++ version by John Burkardt.
            //
            //  Reference:
            //
            //    Walter Gautschi,
            //    Orthogonal Polynomials: Computation and Approximation,
            //    Oxford, 2004,
            //    ISBN: 0-19-850672-4,
            //    LC: QA404.5 G3555.
            //
            //  Parameters:
            //
            //    Input, int N, the order of the desired quadrature rule.
            //
            //    Input, double ALPHA[N], BETA[N], the alpha and beta recurrence 
            //    coefficients for the othogonal polynomials associated with the
            //    weight function.
            //
            //    Output, double X[N], W[N], the nodes and  weights of the desired 
            //    quadrature rule.  The nodes are listed in increasing order.
            //
        {
            double[] a;
            int i;
            int it_max;
            int it_num = 0;
            int j;
            int rot_num = 0;
            double[] v;
            //
            //  Define the tridiagonal Jacobi matrix.
            //
            a = new double[n * n];

            for (j = 0; j < n; j++)
            {
                for (i = 0; i < n; i++)
                {
                    if (i == j)
                    {
                        a[i + j * n] = alpha[i];
                    }
                    else if (i == j - 1)
                    {
                        a[i + j * n] = Math.Sqrt(beta[j]);
                    }
                    else if (i - 1 == j)
                    {
                        a[i + j * n] = Math.Sqrt(beta[i]);
                    }
                    else
                    {
                        a[i + j * n] = 0.0;
                    }
                }
            }

            //
            //  Get the eigenvectors and eigenvalues.
            //
            it_max = 100;

            v = new double[n * n];

            Jacobi.jacobi_eigenvalue(n, a, it_max, ref v, ref x, ref it_num, ref rot_num);

            for (j = 0; j < n; j++)
            {
                w[j] = beta[0] * v[0 + j * n] * v[0 + j * n];
            }
        }
        
        public static double[] product_weight_gl ( int dim_num, int[] order_1d, int order_nd )

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    PRODUCT_WEIGHT_GL: weights for a product Gauss-Legendre rule.
        //
        //  Discussion:
        //
        //    This routine computes the weights for a quadrature rule which is
        //    a product of 1D Gauss-Legendre rules of varying order.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    25 September 2007
        //
        //  Author:
        //
        //    John Burkardt
        //
        //  Parameters:
        //
        //    Input, int DIM_NUM, the spatial dimension.
        //
        //    Input, int ORDER_1D[DIM_NUM], the order of the 1D rules.
        //
        //    Input, int ORDER_ND, the order of the product rule.
        //
        //    Output, double PRODUCT_WEIGHT_GL[ORDER_ND], the product rule weights.
        //
        {
            int dim;
            int order;
            double[] w_1d;
            double[] w_nd;

            typeMethods.r8vecDPData data = new typeMethods.r8vecDPData();

            w_nd = new double[order_nd];
  
            for ( order = 0; order < order_nd; order++ )
            {
                w_nd[order] = 1.0;
            }

            for ( dim = 0; dim < dim_num; dim++ )
            {
                w_1d = new double[order_1d[dim]];
    
                gl_weights ( order_1d[dim], ref w_1d );

                typeMethods.r8vec_direct_product2 ( ref data, dim, order_1d[dim], w_1d, dim_num, 
                    order_nd, ref w_nd );

            }
            return w_nd;
        }

        public static void gl_abscissa(int dim_num, int point_num, int[] grid_index,
        int[] grid_base, ref double[] grid_point, int gridIndex = 0, int gridBaseIndex = 0, int gridPointIndex = 0 )

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    GL_ABSCISSA sets abscissas for multidimensional Gauss-Legendre quadrature.
        //
        //  Discussion:
        //
        //    The "nesting" as it occurs for Gauss-Legendre sparse grids simply
        //    involves the use of a specified set of permissible orders for the
        //    rule.  
        //
        //    The X array lists the (complete) Gauss-Legendre abscissas for rules 
        //    of order 1, 3, 7, 15, 31, 63 or 127, in order. 
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license. 
        //
        //  Modified:
        //
        //    02 October 2007
        //
        //  Author:
        //
        //    John Burkardt
        //
        //  Parameters:
        //
        //    Input, int DIM_NUM, the spatial dimension.
        //
        //    Input, int POINT_NUM, the number of points.
        //
        //    Input, int GRID_INDEX[DIM_NUM*POINT_NUM], the index of the abscissa
        //    from the Gauss-Legendre rule, for each dimension and point.
        //
        //    Input, int GRID_BASE[DIM_NUM], the number of points used in the 
        //    Gauss-Legendre rule for a given dimension.
        //
        //    Output, double GRID_POINT[DIM_NUM], the grid points of
        //    Gauss-Legendre abscissas.
        //
        {
            int dim;
            int level;
            int point;
            int pointer;
            int[] skip =  {
                0, 1, 4, 11, 26, 57, 120, 247
            }
            ;
            double[] x =  {
                0.0E+00,
                -0.774596669241483377035853079956E+00,
                0.0E+00,
                0.774596669241483377035853079956E+00,
                -0.949107912342758524526189684048E+00,
                -0.741531185599394439863864773281E+00,
                -0.405845151377397166906606412077E+00,
                0.0E+00,
                0.405845151377397166906606412077E+00,
                0.741531185599394439863864773281E+00,
                0.949107912342758524526189684048E+00,
                -0.987992518020485428489565718587E+00,
                -0.937273392400705904307758947710E+00,
                -0.848206583410427216200648320774E+00,
                -0.724417731360170047416186054614E+00,
                -0.570972172608538847537226737254E+00,
                -0.394151347077563369897207370981E+00,
                -0.201194093997434522300628303395E+00,
                0.0E+00,
                0.201194093997434522300628303395E+00,
                0.394151347077563369897207370981E+00,
                0.570972172608538847537226737254E+00,
                0.724417731360170047416186054614E+00,
                0.848206583410427216200648320774E+00,
                0.937273392400705904307758947710E+00,
                0.987992518020485428489565718587E+00,
                -0.99708748181947707454263838179654,
                -0.98468590966515248400211329970113,
                -0.96250392509294966178905249675943,
                -0.93075699789664816495694576311725,
                -0.88976002994827104337419200908023,
                -0.83992032014626734008690453594388,
                -0.78173314841662494040636002019484,
                -0.71577678458685328390597086536649,
                -0.64270672292426034618441820323250,
                -0.56324916140714926272094492359516,
                -0.47819378204490248044059403935649,
                -0.38838590160823294306135146128752,
                -0.29471806998170161661790389767170,
                -0.19812119933557062877241299603283,
                -0.99555312152341520325174790118941E-01,
                0.00000000000000000000000000000000,
                0.99555312152341520325174790118941E-01,
                0.19812119933557062877241299603283,
                0.29471806998170161661790389767170,
                0.38838590160823294306135146128752,
                0.47819378204490248044059403935649,
                0.56324916140714926272094492359516,
                0.64270672292426034618441820323250,
                0.71577678458685328390597086536649,
                0.78173314841662494040636002019484,
                0.83992032014626734008690453594388,
                0.88976002994827104337419200908023,
                0.93075699789664816495694576311725,
                0.96250392509294966178905249675943,
                0.98468590966515248400211329970113,
                0.99708748181947707454263838179654,
                -0.99928298402912378050701628988630E+00,
                -0.99622401277797010860209018267357E+00,
                -0.99072854689218946681089469460884E+00,
                -0.98280881059372723486251140727639E+00,
                -0.97248403469757002280196067864927E+00,
                -0.95977944975894192707035416626398E+00,
                -0.94472613404100980296637531962798E+00,
                -0.92736092062184320544703138132518E+00,
                -0.90772630277853155803695313291596E+00,
                -0.88587032850785342629029845731337E+00,
                -0.86184648236412371953961183943106E+00,
                -0.83571355431950284347180776961571E+00,
                -0.80753549577345676005146598636324E+00,
                -0.77738126299037233556333018991104E+00,
                -0.74532464831784741782932166103759E+00,
                -0.71144409958484580785143153770401E+00,
                -0.67582252811498609013110331596954E+00,
                -0.63854710582136538500030695387338E+00,
                -0.59970905187762523573900892686880E+00,
                -0.55940340948628501326769780007005E+00,
                -0.51772881329003324812447758452632E+00,
                -0.47478724799480439992221230985149E+00,
                -0.43068379879511160066208893391863E+00,
                -0.38552639421224789247761502227440E+00,
                -0.33942554197458440246883443159432E+00,
                -0.29249405858625144003615715555067E+00,
                -0.24484679324595336274840459392483E+00,
                -0.19660034679150668455762745706572E+00,
                -0.14787278635787196856983909655297E+00,
                -0.98783356446945279529703669453922E-01,
                -0.49452187116159627234233818051808E-01,
                0.00000000000000000000000000000000E+00,
                0.49452187116159627234233818051808E-01,
                0.98783356446945279529703669453922E-01,
                0.14787278635787196856983909655297E+00,
                0.19660034679150668455762745706572E+00,
                0.24484679324595336274840459392483E+00,
                0.29249405858625144003615715555067E+00,
                0.33942554197458440246883443159432E+00,
                0.38552639421224789247761502227440E+00,
                0.43068379879511160066208893391863E+00,
                0.47478724799480439992221230985149E+00,
                0.51772881329003324812447758452632E+00,
                0.55940340948628501326769780007005E+00,
                0.59970905187762523573900892686880E+00,
                0.63854710582136538500030695387338E+00,
                0.67582252811498609013110331596954E+00,
                0.71144409958484580785143153770401E+00,
                0.74532464831784741782932166103759E+00,
                0.77738126299037233556333018991104E+00,
                0.80753549577345676005146598636324E+00,
                0.83571355431950284347180776961571E+00,
                0.86184648236412371953961183943106E+00,
                0.88587032850785342629029845731337E+00,
                0.90772630277853155803695313291596E+00,
                0.92736092062184320544703138132518E+00,
                0.94472613404100980296637531962798E+00,
                0.95977944975894192707035416626398E+00,
                0.97248403469757002280196067864927E+00,
                0.98280881059372723486251140727639E+00,
                0.99072854689218946681089469460884E+00,
                0.99622401277797010860209018267357E+00,
                0.99928298402912378050701628988630E+00,
                -0.99982213041530614629963254927125E+00,
                -0.99906293435531189513828920479421E+00,
                -0.99769756618980462107441703193392E+00,
                -0.99572655135202722663543337085008E+00,
                -0.99315104925451714736113079489080E+00,
                -0.98997261459148415760778669967548E+00,
                -0.98619317401693166671043833175407E+00,
                -0.98181502080381411003346312451200E+00,
                -0.97684081234307032681744391886221E+00,
                -0.97127356816152919228894689830512E+00,
                -0.96511666794529212109082507703391E+00,
                -0.95837384942523877114910286998060E+00,
                -0.95104920607788031054790764659636E+00,
                -0.94314718462481482734544963026201E+00,
                -0.93467258232473796857363487794906E+00,
                -0.92563054405623384912746466814259E+00,
                -0.91602655919146580931308861741716E+00,
                -0.90586645826182138280246131760282E+00,
                -0.89515640941708370896904382642451E+00,
                -0.88390291468002656994525794802849E+00,
                -0.87211280599856071141963753428864E+00,
                -0.85979324109774080981203134414483E+00,
                -0.84695169913409759845333931085437E+00,
                -0.83359597615489951437955716480123E+00,
                -0.81973418036507867415511910167470E+00,
                -0.80537472720468021466656079404644E+00,
                -0.79052633423981379994544995252740E+00,
                -0.77519801587020238244496276354566E+00,
                -0.75939907785653667155666366659810E+00,
                -0.74313911167095451292056688997595E+00,
                -0.72642798867407268553569290153270E+00,
                -0.70927585412210456099944463906757E+00,
                -0.69169312100770067015644143286666E+00,
                -0.67369046373825048534668253831602E+00,
                -0.65527881165548263027676505156852E+00,
                -0.63646934240029724134760815684175E+00,
                -0.61727347512685828385763916340822E+00,
                -0.59770286357006522938441201887478E+00,
                -0.57776938897061258000325165713764E+00,
                -0.55748515286193223292186190687872E+00,
                -0.53686246972339756745816636353452E+00,
                -0.51591385950424935727727729906662E+00,
                -0.49465204002278211739494017368636E+00,
                -0.47308991924540524164509989939699E+00,
                -0.45124058745026622733189858020729E+00,
                -0.42911730928019337626254405355418E+00,
                -0.40673351568978256340867288124339E+00,
                -0.38410279579151693577907781452239E+00,
                -0.36123888860586970607092484346723E+00,
                -0.33815567472039850137600027657095E+00,
                -0.31486716786289498148601475374890E+00,
                -0.29138750639370562079451875284568E+00,
                -0.26773094472238862088834352027938E+00,
                -0.24391184465391785797071324453138E+00,
                -0.21994466666968754245452337866940E+00,
                -0.19584396114861085150428162519610E+00,
                -0.17162435953364216500834492248954E+00,
                -0.14730056544908566938932929319807E+00,
                -0.12288734577408297172603365288567E+00,
                -0.98399521677698970751091751509101E-01,
                -0.73851959621048545273440409360569E-01,
                -0.49259562331926630315379321821927E-01,
                -0.24637259757420944614897071846088E-01,
                0.00000000000000000000000000000000E+00,
                0.24637259757420944614897071846088E-01,
                0.49259562331926630315379321821927E-01,
                0.73851959621048545273440409360569E-01,
                0.98399521677698970751091751509101E-01,
                0.12288734577408297172603365288567E+00,
                0.14730056544908566938932929319807E+00,
                0.17162435953364216500834492248954E+00,
                0.19584396114861085150428162519610E+00,
                0.21994466666968754245452337866940E+00,
                0.24391184465391785797071324453138E+00,
                0.26773094472238862088834352027938E+00,
                0.29138750639370562079451875284568E+00,
                0.31486716786289498148601475374890E+00,
                0.33815567472039850137600027657095E+00,
                0.36123888860586970607092484346723E+00,
                0.38410279579151693577907781452239E+00,
                0.40673351568978256340867288124339E+00,
                0.42911730928019337626254405355418E+00,
                0.45124058745026622733189858020729E+00,
                0.47308991924540524164509989939699E+00,
                0.49465204002278211739494017368636E+00,
                0.51591385950424935727727729906662E+00,
                0.53686246972339756745816636353452E+00,
                0.55748515286193223292186190687872E+00,
                0.57776938897061258000325165713764E+00,
                0.59770286357006522938441201887478E+00,
                0.61727347512685828385763916340822E+00,
                0.63646934240029724134760815684175E+00,
                0.65527881165548263027676505156852E+00,
                0.67369046373825048534668253831602E+00,
                0.69169312100770067015644143286666E+00,
                0.70927585412210456099944463906757E+00,
                0.72642798867407268553569290153270E+00,
                0.74313911167095451292056688997595E+00,
                0.75939907785653667155666366659810E+00,
                0.77519801587020238244496276354566E+00,
                0.79052633423981379994544995252740E+00,
                0.80537472720468021466656079404644E+00,
                0.81973418036507867415511910167470E+00,
                0.83359597615489951437955716480123E+00,
                0.84695169913409759845333931085437E+00,
                0.85979324109774080981203134414483E+00,
                0.87211280599856071141963753428864E+00,
                0.88390291468002656994525794802849E+00,
                0.89515640941708370896904382642451E+00,
                0.90586645826182138280246131760282E+00,
                0.91602655919146580931308861741716E+00,
                0.92563054405623384912746466814259E+00,
                0.93467258232473796857363487794906E+00,
                0.94314718462481482734544963026201E+00,
                0.95104920607788031054790764659636E+00,
                0.95837384942523877114910286998060E+00,
                0.96511666794529212109082507703391E+00,
                0.97127356816152919228894689830512E+00,
                0.97684081234307032681744391886221E+00,
                0.98181502080381411003346312451200E+00,
                0.98619317401693166671043833175407E+00,
                0.98997261459148415760778669967548E+00,
                0.99315104925451714736113079489080E+00,
                0.99572655135202722663543337085008E+00,
                0.99769756618980462107441703193392E+00,
                0.99906293435531189513828920479421E+00,
                0.99982213041530614629963254927125E+00
            }
            ;

            for (dim = 0; dim < dim_num; dim++)
            {
                if (grid_base[gridBaseIndex+dim] < 0)
                {
                    Console.WriteLine("");
                    Console.WriteLine("GL_ABSCISSA - Fatal error!");
                    Console.WriteLine("  Some base values are less than 0.");
                    return;
                }
            }

            for (dim = 0; dim < dim_num; dim++)
            {
                if (63 < grid_base[gridBaseIndex+dim])
                {
                    Console.WriteLine("");
                    Console.WriteLine("GL_ABSCISSA - Fatal error!");
                    Console.WriteLine("  Some base values are greater than 63.");
                    return;
                }
            }

            for (point = 0; point < point_num; point++)
            {
                for (dim = 0; dim < dim_num; dim++)
                {
                    level = (int)Math.Log2(grid_base[gridBaseIndex+dim] + 1);

                    pointer = skip[level] + (grid_index[gridIndex + (dim + point * dim_num)] + grid_base[gridBaseIndex+dim]);

                    grid_point[gridPointIndex + (dim + point * dim_num)] = x[pointer];
                }
            }
        }

        public static void gl_weights(int order, ref double[] weight)

            //****************************************************************************80
            //
            //  Purpose:
            //
            //    GL_WEIGHTS returns weights for certain Gauss-Legendre quadrature rules.
            //
            //  Discussion:
            //
            //    The allowed orders are 1, 3, 7, 15, 31, 63 and 127.
            //
            //  Licensing:
            //
            //    This code is distributed under the GNU LGPL license. 
            //
            //  Modified:
            //
            //    02 October 2007
            //
            //  Author:
            //
            //    John Burkardt
            //
            //  Reference:
            //
            //    Milton Abramowitz, Irene Stegun,
            //    Handbook of Mathematical Functions,
            //    National Bureau of Standards, 1964,
            //    ISBN: 0-486-61272-4,
            //    LC: QA47.A34.
            //
            //    Arthur Stroud, Don Secrest,
            //    Gaussian Quadrature Formulas,
            //    Prentice Hall, 1966,
            //    LC: QA299.4G3S7.
            //
            //  Parameters:
            //
            //    Input, int ORDER, the order of the rule.
            //    ORDER must be 1, 3, 7, 15, 31, 63 or 127.
            //
            //    Output, double WEIGHT[ORDER], the weights.
            //    The weights are positive, symmetric and should sum to 2.
            //
        {
            if (order == 1)
            {
                weight[1 - 1] = 2.0E+00;
            }
            else if (order == 3)
            {
                weight[1 - 1] = 5.0E+00 / 9.0E+00;
                weight[2 - 1] = 8.0E+00 / 9.0E+00;
                weight[3 - 1] = 5.0E+00 / 9.0E+00;
            }
            else if (order == 7)
            {
                weight[1 - 1] = 0.129484966168869693270611432679E+00;
                weight[2 - 1] = 0.279705391489276667901467771424E+00;
                weight[3 - 1] = 0.381830050505118944950369775489E+00;
                weight[4 - 1] = 0.417959183673469387755102040816E+00;
                weight[5 - 1] = 0.381830050505118944950369775489E+00;
                weight[6 - 1] = 0.279705391489276667901467771424E+00;
                weight[7 - 1] = 0.129484966168869693270611432679E+00;
            }
            else if (order == 15)
            {
                weight[1 - 1] = 0.307532419961172683546283935772E-01;
                weight[2 - 1] = 0.703660474881081247092674164507E-01;
                weight[3 - 1] = 0.107159220467171935011869546686E+00;
                weight[4 - 1] = 0.139570677926154314447804794511E+00;
                weight[5 - 1] = 0.166269205816993933553200860481E+00;
                weight[6 - 1] = 0.186161000015562211026800561866E+00;
                weight[7 - 1] = 0.198431485327111576456118326444E+00;
                weight[8 - 1] = 0.202578241925561272880620199968E+00;
                weight[9 - 1] = 0.198431485327111576456118326444E+00;
                weight[10 - 1] = 0.186161000015562211026800561866E+00;
                weight[11 - 1] = 0.166269205816993933553200860481E+00;
                weight[12 - 1] = 0.139570677926154314447804794511E+00;
                weight[13 - 1] = 0.107159220467171935011869546686E+00;
                weight[14 - 1] = 0.703660474881081247092674164507E-01;
                weight[15 - 1] = 0.307532419961172683546283935772E-01;
            }
            else if (order == 31)
            {
                weight[1 - 1] = 0.74708315792487746093913218970494E-02;
                weight[2 - 1] = 0.17318620790310582463552990782414E-01;
                weight[3 - 1] = 0.27009019184979421800608642617676E-01;
                weight[4 - 1] = 0.36432273912385464024392008749009E-01;
                weight[5 - 1] = 0.45493707527201102902315857856518E-01;
                weight[6 - 1] = 0.54103082424916853711666259085477E-01;
                weight[7 - 1] = 0.62174786561028426910343543686657E-01;
                weight[8 - 1] = 0.69628583235410366167756126255124E-01;
                weight[9 - 1] = 0.76390386598776616426357674901331E-01;
                weight[10 - 1] = 0.82392991761589263903823367431962E-01;
                weight[11 - 1] = 0.87576740608477876126198069695333E-01;
                weight[12 - 1] = 0.91890113893641478215362871607150E-01;
                weight[13 - 1] = 0.95290242912319512807204197487597E-01;
                weight[14 - 1] = 0.97743335386328725093474010978997E-01;
                weight[15 - 1] = 0.99225011226672307874875514428615E-01;
                weight[16 - 1] = 0.99720544793426451427533833734349E-01;
                weight[17 - 1] = 0.99225011226672307874875514428615E-01;
                weight[18 - 1] = 0.97743335386328725093474010978997E-01;
                weight[19 - 1] = 0.95290242912319512807204197487597E-01;
                weight[20 - 1] = 0.91890113893641478215362871607150E-01;
                weight[21 - 1] = 0.87576740608477876126198069695333E-01;
                weight[22 - 1] = 0.82392991761589263903823367431962E-01;
                weight[23 - 1] = 0.76390386598776616426357674901331E-01;
                weight[24 - 1] = 0.69628583235410366167756126255124E-01;
                weight[25 - 1] = 0.62174786561028426910343543686657E-01;
                weight[26 - 1] = 0.54103082424916853711666259085477E-01;
                weight[27 - 1] = 0.45493707527201102902315857856518E-01;
                weight[28 - 1] = 0.36432273912385464024392008749009E-01;
                weight[29 - 1] = 0.27009019184979421800608642617676E-01;
                weight[30 - 1] = 0.17318620790310582463552990782414E-01;
                weight[31 - 1] = 0.74708315792487746093913218970494E-02;
            }
            else if (order == 63)
            {
                weight[1 - 1] = 0.18398745955770837880499331680577E-02;
                weight[2 - 1] = 0.42785083468637618661951422543371E-02;
                weight[3 - 1] = 0.67102917659601362519069109850892E-02;
                weight[4 - 1] = 0.91259686763266563540586445877022E-02;
                weight[5 - 1] = 0.11519376076880041750750606118707E-01;
                weight[6 - 1] = 0.13884612616115610824866086365937E-01;
                weight[7 - 1] = 0.16215878410338338882283672974995E-01;
                weight[8 - 1] = 0.18507464460161270409260545805144E-01;
                weight[9 - 1] = 0.20753761258039090775341953421471E-01;
                weight[10 - 1] = 0.22949271004889933148942319561770E-01;
                weight[11 - 1] = 0.25088620553344986618630138068443E-01;
                weight[12 - 1] = 0.27166574359097933225189839439413E-01;
                weight[13 - 1] = 0.29178047208280526945551502154029E-01;
                weight[14 - 1] = 0.31118116622219817508215988557189E-01;
                weight[15 - 1] = 0.32982034883779341765683179672459E-01;
                weight[16 - 1] = 0.34765240645355877697180504642788E-01;
                weight[17 - 1] = 0.36463370085457289630452409787542E-01;
                weight[18 - 1] = 0.38072267584349556763638324927889E-01;
                weight[19 - 1] = 0.39587995891544093984807928149202E-01;
                weight[20 - 1] = 0.41006845759666398635110037009072E-01;
                weight[21 - 1] = 0.42325345020815822982505485403028E-01;
                weight[22 - 1] = 0.43540267083027590798964315704401E-01;
                weight[23 - 1] = 0.44648638825941395370332669516813E-01;
                weight[24 - 1] = 0.45647747876292608685885992608542E-01;
                weight[25 - 1] = 0.46535149245383696510395418746953E-01;
                weight[26 - 1] = 0.47308671312268919080604988338844E-01;
                weight[27 - 1] = 0.47966421137995131411052756195132E-01;
                weight[28 - 1] = 0.48506789097883847864090099145802E-01;
                weight[29 - 1] = 0.48928452820511989944709361549215E-01;
                weight[30 - 1] = 0.49230380423747560785043116988145E-01;
                weight[31 - 1] = 0.49411833039918178967039646116705E-01;
                weight[32 - 1] = 0.49472366623931020888669360420926E-01;
                weight[33 - 1] = 0.49411833039918178967039646116705E-01;
                weight[34 - 1] = 0.49230380423747560785043116988145E-01;
                weight[35 - 1] = 0.48928452820511989944709361549215E-01;
                weight[36 - 1] = 0.48506789097883847864090099145802E-01;
                weight[37 - 1] = 0.47966421137995131411052756195132E-01;
                weight[38 - 1] = 0.47308671312268919080604988338844E-01;
                weight[39 - 1] = 0.46535149245383696510395418746953E-01;
                weight[40 - 1] = 0.45647747876292608685885992608542E-01;
                weight[41 - 1] = 0.44648638825941395370332669516813E-01;
                weight[42 - 1] = 0.43540267083027590798964315704401E-01;
                weight[43 - 1] = 0.42325345020815822982505485403028E-01;
                weight[44 - 1] = 0.41006845759666398635110037009072E-01;
                weight[45 - 1] = 0.39587995891544093984807928149202E-01;
                weight[46 - 1] = 0.38072267584349556763638324927889E-01;
                weight[47 - 1] = 0.36463370085457289630452409787542E-01;
                weight[48 - 1] = 0.34765240645355877697180504642788E-01;
                weight[49 - 1] = 0.32982034883779341765683179672459E-01;
                weight[50 - 1] = 0.31118116622219817508215988557189E-01;
                weight[51 - 1] = 0.29178047208280526945551502154029E-01;
                weight[52 - 1] = 0.27166574359097933225189839439413E-01;
                weight[53 - 1] = 0.25088620553344986618630138068443E-01;
                weight[54 - 1] = 0.22949271004889933148942319561770E-01;
                weight[55 - 1] = 0.20753761258039090775341953421471E-01;
                weight[56 - 1] = 0.18507464460161270409260545805144E-01;
                weight[57 - 1] = 0.16215878410338338882283672974995E-01;
                weight[58 - 1] = 0.13884612616115610824866086365937E-01;
                weight[59 - 1] = 0.11519376076880041750750606118707E-01;
                weight[60 - 1] = 0.91259686763266563540586445877022E-02;
                weight[61 - 1] = 0.67102917659601362519069109850892E-02;
                weight[62 - 1] = 0.42785083468637618661951422543371E-02;
                weight[63 - 1] = 0.18398745955770837880499331680577E-02;
            }
            else if (order == 127)
            {
                weight[1 - 1] = 0.45645726109586654495731936146574E-03;
                weight[2 - 1] = 0.10622766869538486959954760554099E-02;
                weight[3 - 1] = 0.16683488125171936761028811985672E-02;
                weight[4 - 1] = 0.22734860707492547802810838362671E-02;
                weight[5 - 1] = 0.28772587656289004082883197417581E-02;
                weight[6 - 1] = 0.34792893810051465908910894094105E-02;
                weight[7 - 1] = 0.40792095178254605327114733456293E-02;
                weight[8 - 1] = 0.46766539777779034772638165662478E-02;
                weight[9 - 1] = 0.52712596565634400891303815906251E-02;
                weight[10 - 1] = 0.58626653903523901033648343751367E-02;
                weight[11 - 1] = 0.64505120486899171845442463868748E-02;
                weight[12 - 1] = 0.70344427036681608755685893032552E-02;
                weight[13 - 1] = 0.76141028256526859356393930849227E-02;
                weight[14 - 1] = 0.81891404887415730817235884718726E-02;
                weight[15 - 1] = 0.87592065795403145773316804234385E-02;
                weight[16 - 1] = 0.93239550065309714787536985834029E-02;
                weight[17 - 1] = 0.98830429087554914716648010899606E-02;
                weight[18 - 1] = 0.10436130863141005225673171997668E-01;
                weight[19 - 1] = 0.10982883090068975788799657376065E-01;
                weight[20 - 1] = 0.11522967656921087154811609734510E-01;
                weight[21 - 1] = 0.12056056679400848183529562144697E-01;
                weight[22 - 1] = 0.12581826520465013101514365424172E-01;
                weight[23 - 1] = 0.13099957986718627426172681912499E-01;
                weight[24 - 1] = 0.13610136522139249906034237533759E-01;
                weight[25 - 1] = 0.14112052399003395774044161633613E-01;
                weight[26 - 1] = 0.14605400905893418351737288078952E-01;
                weight[27 - 1] = 0.15089882532666922992635733981431E-01;
                weight[28 - 1] = 0.15565203152273955098532590262975E-01;
                weight[29 - 1] = 0.16031074199309941802254151842763E-01;
                weight[30 - 1] = 0.16487212845194879399346060358146E-01;
                weight[31 - 1] = 0.16933342169871654545878815295200E-01;
                weight[32 - 1] = 0.17369191329918731922164721250350E-01;
                weight[33 - 1] = 0.17794495722974774231027912900351E-01;
                weight[34 - 1] = 0.18208997148375106468721469154479E-01;
                weight[35 - 1] = 0.18612443963902310429440419898958E-01;
                weight[36 - 1] = 0.19004591238555646611148901044533E-01;
                weight[37 - 1] = 0.19385200901246454628112623489471E-01;
                weight[38 - 1] = 0.19754041885329183081815217323169E-01;
                weight[39 - 1] = 0.20110890268880247225644623956287E-01;
                weight[40 - 1] = 0.20455529410639508279497065713301E-01;
                weight[41 - 1] = 0.20787750081531811812652137291250E-01;
                weight[42 - 1] = 0.21107350591688713643523847921658E-01;
                weight[43 - 1] = 0.21414136912893259295449693233545E-01;
                weight[44 - 1] = 0.21707922796373466052301324695331E-01;
                weight[45 - 1] = 0.21988529885872983756478409758807E-01;
                weight[46 - 1] = 0.22255787825930280235631416460158E-01;
                weight[47 - 1] = 0.22509534365300608085694429903050E-01;
                weight[48 - 1] = 0.22749615455457959852242553240982E-01;
                weight[49 - 1] = 0.22975885344117206754377437838947E-01;
                weight[50 - 1] = 0.23188206663719640249922582981729E-01;
                weight[51 - 1] = 0.23386450514828194170722043496950E-01;
                weight[52 - 1] = 0.23570496544381716050033676844306E-01;
                weight[53 - 1] = 0.23740233018760777777714726703424E-01;
                weight[54 - 1] = 0.23895556891620665983864481754172E-01;
                weight[55 - 1] = 0.24036373866450369675132086026456E-01;
                weight[56 - 1] = 0.24162598453819584716522917710986E-01;
                weight[57 - 1] = 0.24274154023278979833195063936748E-01;
                weight[58 - 1] = 0.24370972849882214952813561907241E-01;
                weight[59 - 1] = 0.24452996155301467956140198471529E-01;
                weight[60 - 1] = 0.24520174143511508275183033290175E-01;
                weight[61 - 1] = 0.24572466031020653286354137335186E-01;
                weight[62 - 1] = 0.24609840071630254092545634003360E-01;
                weight[63 - 1] = 0.24632273575707679066033370218017E-01;
                weight[64 - 1] = 0.24639752923961094419579417477503E-01;
                weight[65 - 1] = 0.24632273575707679066033370218017E-01;
                weight[66 - 1] = 0.24609840071630254092545634003360E-01;
                weight[67 - 1] = 0.24572466031020653286354137335186E-01;
                weight[68 - 1] = 0.24520174143511508275183033290175E-01;
                weight[69 - 1] = 0.24452996155301467956140198471529E-01;
                weight[70 - 1] = 0.24370972849882214952813561907241E-01;
                weight[71 - 1] = 0.24274154023278979833195063936748E-01;
                weight[72 - 1] = 0.24162598453819584716522917710986E-01;
                weight[73 - 1] = 0.24036373866450369675132086026456E-01;
                weight[74 - 1] = 0.23895556891620665983864481754172E-01;
                weight[75 - 1] = 0.23740233018760777777714726703424E-01;
                weight[76 - 1] = 0.23570496544381716050033676844306E-01;
                weight[77 - 1] = 0.23386450514828194170722043496950E-01;
                weight[78 - 1] = 0.23188206663719640249922582981729E-01;
                weight[79 - 1] = 0.22975885344117206754377437838947E-01;
                weight[80 - 1] = 0.22749615455457959852242553240982E-01;
                weight[81 - 1] = 0.22509534365300608085694429903050E-01;
                weight[82 - 1] = 0.22255787825930280235631416460158E-01;
                weight[83 - 1] = 0.21988529885872983756478409758807E-01;
                weight[84 - 1] = 0.21707922796373466052301324695331E-01;
                weight[85 - 1] = 0.21414136912893259295449693233545E-01;
                weight[86 - 1] = 0.21107350591688713643523847921658E-01;
                weight[87 - 1] = 0.20787750081531811812652137291250E-01;
                weight[88 - 1] = 0.20455529410639508279497065713301E-01;
                weight[89 - 1] = 0.20110890268880247225644623956287E-01;
                weight[90 - 1] = 0.19754041885329183081815217323169E-01;
                weight[91 - 1] = 0.19385200901246454628112623489471E-01;
                weight[92 - 1] = 0.19004591238555646611148901044533E-01;
                weight[93 - 1] = 0.18612443963902310429440419898958E-01;
                weight[94 - 1] = 0.18208997148375106468721469154479E-01;
                weight[95 - 1] = 0.17794495722974774231027912900351E-01;
                weight[96 - 1] = 0.17369191329918731922164721250350E-01;
                weight[97 - 1] = 0.16933342169871654545878815295200E-01;
                weight[98 - 1] = 0.16487212845194879399346060358146E-01;
                weight[99 - 1] = 0.16031074199309941802254151842763E-01;
                weight[100 - 1] = 0.15565203152273955098532590262975E-01;
                weight[101 - 1] = 0.15089882532666922992635733981431E-01;
                weight[102 - 1] = 0.14605400905893418351737288078952E-01;
                weight[103 - 1] = 0.14112052399003395774044161633613E-01;
                weight[104 - 1] = 0.13610136522139249906034237533759E-01;
                weight[105 - 1] = 0.13099957986718627426172681912499E-01;
                weight[106 - 1] = 0.12581826520465013101514365424172E-01;
                weight[107 - 1] = 0.12056056679400848183529562144697E-01;
                weight[108 - 1] = 0.11522967656921087154811609734510E-01;
                weight[109 - 1] = 0.10982883090068975788799657376065E-01;
                weight[110 - 1] = 0.10436130863141005225673171997668E-01;
                weight[111 - 1] = 0.98830429087554914716648010899606E-02;
                weight[112 - 1] = 0.93239550065309714787536985834029E-02;
                weight[113 - 1] = 0.87592065795403145773316804234385E-02;
                weight[114 - 1] = 0.81891404887415730817235884718726E-02;
                weight[115 - 1] = 0.76141028256526859356393930849227E-02;
                weight[116 - 1] = 0.70344427036681608755685893032552E-02;
                weight[117 - 1] = 0.64505120486899171845442463868748E-02;
                weight[118 - 1] = 0.58626653903523901033648343751367E-02;
                weight[119 - 1] = 0.52712596565634400891303815906251E-02;
                weight[120 - 1] = 0.46766539777779034772638165662478E-02;
                weight[121 - 1] = 0.40792095178254605327114733456293E-02;
                weight[122 - 1] = 0.34792893810051465908910894094105E-02;
                weight[123 - 1] = 0.28772587656289004082883197417581E-02;
                weight[124 - 1] = 0.22734860707492547802810838362671E-02;
                weight[125 - 1] = 0.16683488125171936761028811985672E-02;
                weight[126 - 1] = 0.10622766869538486959954760554099E-02;
                weight[127 - 1] = 0.45645726109586654495731936146574E-03;
            }
            else
            {
                Console.WriteLine("");
                Console.WriteLine("GL_WEIGHTS - Fatal error!");
                Console.WriteLine("  Illegal value of ORDER = " + order + "");
                Console.WriteLine("  Legal values are 1, 3, 7, 15, 31, 63 and 127.");
            }

        }
    }
}