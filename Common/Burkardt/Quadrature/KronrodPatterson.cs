using System;
using Burkardt.ClenshawCurtisNS;
using Burkardt.Types;

namespace Burkardt.Quadrature;

public static class KronrodPatterson
{
    public static ClenshawCurtis.ccResult kpn(int n, double[] x_, double[] w_)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    KPN provides data for Kronrod-Patterson quadrature with a normal weight.
        //
        //  Discussion:
        //
        //    This data assumes integration over the interval (-oo,+oo) with 
        //    weight function w(x) = exp(-x*x/2)/sqrt(2*pi).
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    10 December 2012
        //
        //  Author:
        //
        //    Original MATLAB version by Florian Heiss, Viktor Winschel.
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Florian Heiss, Viktor Winschel,
        //    Likelihood approximation by numerical integration on sparse grids,
        //    Journal of Econometrics,
        //    Volume 144, 2008, pages 62-80.
        //
        //    Alan Genz, Bradley Keister,
        //    Fully symmetric interpolatory rules for multiple integrals
        //    over infinite regions with Gaussian weight,
        //    Journal of Computational and Applied Mathematics,
        //    Volume 71, 1996, pages 299-309.
        //
        //    Thomas Patterson,
        //    The optimal addition of points to quadrature formulae,
        //    Mathematics of Computation,
        //    Volume 22, Number 104, October 1968, pages 847-856.
        //
        //  Parameters:
        //
        //    Input, int N, the order of the rule.
        //
        //    Output, double X[N], the nodes.
        //
        //    Output, double W[N], the weights.
        //
    {
        ClenshawCurtis.ccResult result = new()
        {
            x = x_,
            w = w_
        };

        double[] x01 =
        {
            0.0000000000000000
        };
        double[] w01 =
        {
            1.0000000000000000
        };
        double[] x03 =
        {
            -1.73205080756887719, 0.000000000000000000, 1.73205080756887719
        };
        double[] w03 =
        {
            0.166666666666666657, 0.66666666666666663, 0.166666666666666657
        };
        double[] x07 =
        {
            -4.18495601767273229, -1.73205080756887719, -0.741095349994540853,
            0.00000000000000000, 0.741095349994540853, 1.73205080756887719,
            4.18495601767273229
        };
        double[] w07 =
        {
            0.000695684158369139867, 0.138553274729749237, 0.13137860698313561,
            0.458744868257491889, 0.13137860698313561, 0.138553274729749237,
            0.000695684158369139867
        };
        double[] x09 =
        {
            -4.18495601767273229, -2.86127957605705818, -1.73205080756887719,
            -0.741095349994540853, 0.00000000000000000, 0.741095349994540853,
            1.73205080756887719, 2.86127957605705818, 4.18495601767273229
        };
        double[] w09 =
        {
            9.42694575565174701E-05, 0.00799632547089352934, 0.0948509485094851251,
            0.270074329577937755, 0.253968253968254065, 0.270074329577937755,
            0.0948509485094851251, 0.00799632547089352934, 9.42694575565174701E-05
        };
        double[] x17 =
        {
            -6.36339449433636961, -5.18701603991365623, -4.18495601767273229,
            -2.86127957605705818, -2.59608311504920231, -1.73205080756887719,
            -1.23042363402730603, -0.741095349994540853, 0.00000000000000000,
            0.741095349994540853, 1.23042363402730603, 1.73205080756887719,
            2.59608311504920231, 2.86127957605705818, 4.18495601767273229,
            5.18701603991365623, 6.36339449433636961
        };
        double[] w17 =
        {
            2.11364995054242569E-08, -8.20492075415092169E-07, 0.000105637836154169414,
            0.00703348023782790748, 0.0019656770938777492, 0.0886810021520280101,
            0.0141926548264493645, 0.254561232041712215, 0.266922230335053023,
            0.254561232041712215, 0.0141926548264493645, 0.0886810021520280101,
            0.0019656770938777492, 0.00703348023782790748, 0.000105637836154169414,
            -8.20492075415092169E-07, 2.11364995054242569E-08
        };
        double[] x19 =
        {
            -6.36339449433636961, -5.18701603991365623, -4.18495601767273229,
            -3.20533379449919442, -2.86127957605705818, -2.59608311504920231,
            -1.73205080756887719, -1.23042363402730603, -0.741095349994540853,
            0.0000000000000000, 0.741095349994540853, 1.23042363402730603,
            1.73205080756887719, 2.59608311504920231, 2.86127957605705818,
            3.20533379449919442, 4.18495601767273229, 5.18701603991365623,
            6.36339449433636961
        };
        double[] w19 =
        {
            8.62968460222986318E-10, 6.09480873146898402E-07, 6.01233694598479965E-05,
            0.00288488043650675591, -0.00633722479337375712, 0.0180852342547984622,
            0.0640960546868076103, 0.0611517301252477163, 0.208324991649608771,
            0.303467199854206227, 0.208324991649608771, 0.0611517301252477163,
            0.0640960546868076103, 0.0180852342547984622, -0.00633722479337375712,
            0.00288488043650675591, 6.01233694598479965E-05, 6.09480873146898402E-07,
            8.62968460222986318E-10
        };
        double[] x31 =
        {
            -9.0169397898903032, -7.98077179859056063, -7.12210670080461661,
            -6.36339449433636961, -5.18701603991365623, -4.18495601767273229,
            -3.63531851903727832, -3.20533379449919442, -2.86127957605705818,
            -2.59608311504920231, -2.23362606167694189, -1.73205080756887719,
            -1.23042363402730603, -0.741095349994540853, -0.248992297579960609,
            0.00000000000000000, 0.248992297579960609, 0.741095349994540853,
            1.23042363402730603, 1.73205080756887719, 2.23362606167694189,
            2.59608311504920231, 2.86127957605705818, 3.20533379449919442,
            3.63531851903727832, 4.18495601767273229, 5.18701603991365623,
            6.36339449433636961, 7.12210670080461661, 7.98077179859056063,
            9.0169397898903032
        };
        double[] w31 =
        {
            1.26184642808151181E-15, -1.4840835740298868E-13, 5.11580531055042083E-12,
            7.92982678648693382E-10, 6.14358432326179133E-07, 5.94749611639316215E-05,
            1.50442053909142189E-05, 0.00272984304673340016, -0.00556100630683581572,
            0.0165924926989360101, 0.00176084755813180017, 0.0617185325658671791,
            0.0654173928360925611, 0.199688635117345498, 0.0281281015400331666,
            0.25890005324151566, 0.0281281015400331666, 0.199688635117345498,
            0.0654173928360925611, 0.0617185325658671791, 0.00176084755813180017,
            0.0165924926989360101, -0.00556100630683581572, 0.00272984304673340016,
            1.50442053909142189E-05, 5.94749611639316215E-05, 6.14358432326179133E-07,
            7.92982678648693382E-10, 5.11580531055042083E-12, -1.4840835740298868E-13,
            1.26184642808151181E-15
        };
        double[] x33 =
        {
            -9.0169397898903032, -7.98077179859056063, -7.12210670080461661,
            -6.36339449433636961, -5.69817776848810986, -5.18701603991365623,
            -4.18495601767273229, -3.63531851903727832, -3.20533379449919442,
            -2.86127957605705818, -2.59608311504920231, -2.23362606167694189,
            -1.73205080756887719, -1.23042363402730603, -0.741095349994540853,
            -0.248992297579960609, 0.00000000000000000, 0.248992297579960609,
            0.741095349994540853, 1.23042363402730603, 1.73205080756887719,
            2.23362606167694189, 2.59608311504920231, 2.86127957605705818,
            3.20533379449919442, 3.63531851903727832, 4.18495601767273229,
            5.18701603991365623, 5.69817776848810986, 6.36339449433636961,
            7.12210670080461661, 7.98077179859056063, 9.0169397898903032
        };
        double[] w33 =
        {
            -9.93139132868224651E-16, 2.66406251662316506E-13, -1.93413050008809555E-11,
            1.5542195992782658E-09, -1.34860173485429301E-08, 6.90862611791137378E-07,
            5.56911589810814793E-05, 8.32360452957667447E-05, 0.00212022595595963252,
            -0.00277121890077892431, 0.01152924706539879, 0.00735301102049550764,
            0.0546775561434630422, 0.0774436027462994808, 0.176075987415714591,
            0.103876871255742839, 0.139110222363380387, 0.103876871255742839,
            0.176075987415714591, 0.0774436027462994808, 0.0546775561434630422,
            0.00735301102049550764, 0.01152924706539879, -0.00277121890077892431,
            0.00212022595595963252, 8.32360452957667447E-05, 5.56911589810814793E-05,
            6.90862611791137378E-07, -1.34860173485429301E-08, 1.5542195992782658E-09,
            -1.93413050008809555E-11, 2.66406251662316506E-13, -9.93139132868224651E-16
        };
        double[] x35 =
        {
            -9.0169397898903032, -7.98077179859056063, -7.12210670080461661,
            -6.36339449433636961, -5.69817776848810986, -5.18701603991365623,
            -4.73643308595229673, -4.18495601767273229, -3.63531851903727832,
            -3.20533379449919442, -2.86127957605705818, -2.59608311504920231,
            -2.23362606167694189, -1.73205080756887719, -1.23042363402730603,
            -0.741095349994540853, -0.248992297579960609, 0.00000000000000000,
            0.248992297579960609, 0.741095349994540853, 1.23042363402730603,
            1.73205080756887719, 2.23362606167694189, 2.59608311504920231,
            2.86127957605705818, 3.20533379449919442, 3.63531851903727832,
            4.18495601767273229, 4.73643308595229673, 5.18701603991365623,
            5.69817776848810986, 6.36339449433636961, 7.12210670080461661,
            7.98077179859056063, 9.0169397898903032
        };
        double[] w35 =
        {
            1.05413265823340136E-18, 5.45004126506381281E-15, 3.09722235760629949E-12,
            4.60117603486559168E-10, 2.13941944795610622E-08, 2.46764213457981401E-07,
            2.73422068011878881E-06, 3.57293481989753322E-05, 0.000275242141167851312,
            0.000818953927502267349, 0.00231134524035220713, 0.00315544626918755127,
            0.015673473751851151, 0.0452736854651503914, 0.0923647267169863534,
            0.148070831155215854, 0.191760115888044341, 0.000514894508069213769,
            0.191760115888044341, 0.148070831155215854, 0.0923647267169863534,
            0.0452736854651503914, 0.015673473751851151, 0.00315544626918755127,
            0.00231134524035220713, 0.000818953927502267349, 0.000275242141167851312,
            3.57293481989753322E-05, 2.73422068011878881E-06, 2.46764213457981401E-07,
            2.13941944795610622E-08, 4.60117603486559168E-10, 3.09722235760629949E-12,
            5.45004126506381281E-15, 1.05413265823340136E-18
        };

        switch (n)
        {
            case 1:
                typeMethods.r8vec_copy(n, x01, ref result.x);
                typeMethods.r8vec_copy(n, w01, ref result.w);
                break;
            case 3:
                typeMethods.r8vec_copy(n, x03, ref result.x);
                typeMethods.r8vec_copy(n, w03, ref result.w);
                break;
            case 7:
                typeMethods.r8vec_copy(n, x07, ref result.x);
                typeMethods.r8vec_copy(n, w07, ref result.w);
                break;
            case 9:
                typeMethods.r8vec_copy(n, x09, ref result.x);
                typeMethods.r8vec_copy(n, w09, ref result.w);
                break;
            case 17:
                typeMethods.r8vec_copy(n, x17, ref result.x);
                typeMethods.r8vec_copy(n, w17, ref result.w);
                break;
            case 19:
                typeMethods.r8vec_copy(n, x19, ref result.x);
                typeMethods.r8vec_copy(n, w19, ref result.w);
                break;
            case 31:
                typeMethods.r8vec_copy(n, x31, ref result.x);
                typeMethods.r8vec_copy(n, w31, ref result.w);
                break;
            case 33:
                typeMethods.r8vec_copy(n, x33, ref result.x);
                typeMethods.r8vec_copy(n, w33, ref result.w);
                break;
            case 35:
                typeMethods.r8vec_copy(n, x35, ref result.x);
                typeMethods.r8vec_copy(n, w35, ref result.w);
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("KPN - Fatal error!");
                Console.WriteLine("  Illegal value of N.");
                break;
        }

        return result;
    }

    public static int kpn_order(int l)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    KPN_ORDER computes the order of a KPN rule from the level.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    08 December 2012
        //
        //  Author:
        //
        //    John Burkardt.
        //
        //  Parameters:
        //
        //    Input, int L, the level of the rule.  
        //    1 <= L <= 25
        //
        //    Output, int KPN_ORDER, the order of the rule.
        //
    {
        int n;

        switch (l)
        {
            case < 1:
                Console.WriteLine("");
                Console.WriteLine("KPN_ORDER - Fatal error!");
                Console.WriteLine("  1 <= L <= 25 required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
            case 1:
                n = 1;
                break;
            case <= 3:
                n = 3;
                break;
            case 4:
                n = 7;
                break;
            case <= 8:
                n = 9;
                break;
            case 9:
                n = 17;
                break;
            case <= 15:
                n = 19;
                break;
            case 16:
                n = 31;
                break;
            case 17:
                n = 33;
                break;
            case <= 25:
                n = 35;
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("KPN_ORDER - Fatal error!");
                Console.WriteLine("  1 <= L <= 25 required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
        }

        return n;
    }

    public static ClenshawCurtis.ccResult kpu(int n, double[] x_, double[] w_)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    KPU provides data for Kronrod-Patterson quadrature with a uniform weight.
        //
        //  Discussion:
        //
        //    This data assumes integration over the interval [0,1] with 
        //    weight function w(x) = 1.
        //
        //    This data was originally supplied with only 7 digit accuracy.
        //    It has been replaced by higher accuracy data, which is defined over [-1,+1],
        //    but adjusted to the interval [0,1] before return.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    11 December 2012
        //
        //  Author:
        //
        //    John Burkardt.
        //
        //  Reference:
        //
        //    Florian Heiss, Viktor Winschel,
        //    Likelihood approximation by numerical integration on sparse grids,
        //    Journal of Econometrics,
        //    Volume 144, 2008, pages 62-80.
        //
        //    Alan Genz, Bradley Keister,
        //    Fully symmetric interpolatory rules for multiple integrals
        //    over infinite regions with Gaussian weight,
        //    Journal of Computational and Applied Mathematics,
        //    Volume 71, 1996, pages 299-309.
        //
        //    Thomas Patterson,
        //    The optimal addition of points to quadrature formulae,
        //    Mathematics of Computation,
        //    Volume 22, Number 104, October 1968, pages 847-856.
        //
        //  Parameters:
        //
        //    Input, int N, the order of the rule.
        //    Only 1, 3, 7, 15, 31 and 63 are legal input values for N.
        //
        //    Output, double X[N], the nodes.
        //
        //    Output, double W[N], the weights.
        //
    {
        ClenshawCurtis.ccResult result = new()
        {
            x = x_,
            w = w_
        };

        double[] x01 =
        {
            0.0000000
        };
        double[] w01 =
        {
            2.0000000
        };
        double[] x03 =
        {
            -0.77459666924148337704,
            0.0,
            0.77459666924148337704
        };
        double[] w03 =
        {
            0.555555555555555555556,
            0.888888888888888888889,
            0.555555555555555555556
        };
        double[] x07 =
        {
            -0.96049126870802028342,
            -0.77459666924148337704,
            -0.43424374934680255800,
            0.0,
            0.43424374934680255800,
            0.77459666924148337704,
            0.96049126870802028342
        };
        double[] w07 =
        {
            0.104656226026467265194,
            0.268488089868333440729,
            0.401397414775962222905,
            0.450916538658474142345,
            0.401397414775962222905,
            0.268488089868333440729,
            0.104656226026467265194
        };
        double[] x15 =
        {
            -0.99383196321275502221,
            -0.96049126870802028342,
            -0.88845923287225699889,
            -0.77459666924148337704,
            -0.62110294673722640294,
            -0.43424374934680255800,
            -0.22338668642896688163,
            0.0,
            0.22338668642896688163,
            0.43424374934680255800,
            0.62110294673722640294,
            0.77459666924148337704,
            0.88845923287225699889,
            0.96049126870802028342,
            0.99383196321275502221
        };
        double[] w15 =
        {
            0.0170017196299402603390,
            0.0516032829970797396969,
            0.0929271953151245376859,
            0.134415255243784220360,
            0.171511909136391380787,
            0.200628529376989021034,
            0.219156858401587496404,
            0.225510499798206687386,
            0.219156858401587496404,
            0.200628529376989021034,
            0.171511909136391380787,
            0.134415255243784220360,
            0.0929271953151245376859,
            0.0516032829970797396969,
            0.0170017196299402603390
        };
        double[] x31 =
        {
            -0.99909812496766759766,
            -0.99383196321275502221,
            -0.98153114955374010687,
            -0.96049126870802028342,
            -0.92965485742974005667,
            -0.88845923287225699889,
            -0.83672593816886873550,
            -0.77459666924148337704,
            -0.70249620649152707861,
            -0.62110294673722640294,
            -0.53131974364437562397,
            -0.43424374934680255800,
            -0.33113539325797683309,
            -0.22338668642896688163,
            -0.11248894313318662575,
            0.0,
            0.11248894313318662575,
            0.22338668642896688163,
            0.33113539325797683309,
            0.43424374934680255800,
            0.53131974364437562397,
            0.62110294673722640294,
            0.70249620649152707861,
            0.77459666924148337704,
            0.83672593816886873550,
            0.88845923287225699889,
            0.92965485742974005667,
            0.96049126870802028342,
            0.98153114955374010687,
            0.99383196321275502221,
            0.99909812496766759766
        };
        double[] w31 =
        {
            0.00254478079156187441540,
            0.00843456573932110624631,
            0.0164460498543878109338,
            0.0258075980961766535646,
            0.0359571033071293220968,
            0.0464628932617579865414,
            0.0569795094941233574122,
            0.0672077542959907035404,
            0.0768796204990035310427,
            0.0857559200499903511542,
            0.0936271099812644736167,
            0.100314278611795578771,
            0.105669893580234809744,
            0.109578421055924638237,
            0.111956873020953456880,
            0.112755256720768691607,
            0.111956873020953456880,
            0.109578421055924638237,
            0.105669893580234809744,
            0.100314278611795578771,
            0.0936271099812644736167,
            0.0857559200499903511542,
            0.0768796204990035310427,
            0.0672077542959907035404,
            0.0569795094941233574122,
            0.0464628932617579865414,
            0.0359571033071293220968,
            0.0258075980961766535646,
            0.0164460498543878109338,
            0.00843456573932110624631,
            0.00254478079156187441540
        };
        double[] x63 =
        {
            -0.99987288812035761194,
            -0.99909812496766759766,
            -0.99720625937222195908,
            -0.99383196321275502221,
            -0.98868475754742947994,
            -0.98153114955374010687,
            -0.97218287474858179658,
            -0.96049126870802028342,
            -0.94634285837340290515,
            -0.92965485742974005667,
            -0.91037115695700429250,
            -0.88845923287225699889,
            -0.86390793819369047715,
            -0.83672593816886873550,
            -0.80694053195021761186,
            -0.77459666924148337704,
            -0.73975604435269475868,
            -0.70249620649152707861,
            -0.66290966002478059546,
            -0.62110294673722640294,
            -0.57719571005204581484,
            -0.53131974364437562397,
            -0.48361802694584102756,
            -0.43424374934680255800,
            -0.38335932419873034692,
            -0.33113539325797683309,
            -0.27774982202182431507,
            -0.22338668642896688163,
            -0.16823525155220746498,
            -0.11248894313318662575,
            -0.056344313046592789972,
            0.0,
            0.056344313046592789972,
            0.11248894313318662575,
            0.16823525155220746498,
            0.22338668642896688163,
            0.27774982202182431507,
            0.33113539325797683309,
            0.38335932419873034692,
            0.43424374934680255800,
            0.48361802694584102756,
            0.53131974364437562397,
            0.57719571005204581484,
            0.62110294673722640294,
            0.66290966002478059546,
            0.70249620649152707861,
            0.73975604435269475868,
            0.77459666924148337704,
            0.80694053195021761186,
            0.83672593816886873550,
            0.86390793819369047715,
            0.88845923287225699889,
            0.91037115695700429250,
            0.92965485742974005667,
            0.94634285837340290515,
            0.96049126870802028342,
            0.97218287474858179658,
            0.98153114955374010687,
            0.98868475754742947994,
            0.99383196321275502221,
            0.99720625937222195908,
            0.99909812496766759766,
            0.99987288812035761194
        };
        double[] w63 =
        {
            0.000363221481845530659694,
            0.00126515655623006801137,
            0.00257904979468568827243,
            0.00421763044155885483908,
            0.00611550682211724633968,
            0.00822300795723592966926,
            0.0104982469096213218983,
            0.0129038001003512656260,
            0.0154067504665594978021,
            0.0179785515681282703329,
            0.0205942339159127111492,
            0.0232314466399102694433,
            0.0258696793272147469108,
            0.0284897547458335486125,
            0.0310735511116879648799,
            0.0336038771482077305417,
            0.0360644327807825726401,
            0.0384398102494555320386,
            0.0407155101169443189339,
            0.0428779600250077344929,
            0.0449145316536321974143,
            0.0468135549906280124026,
            0.0485643304066731987159,
            0.0501571393058995374137,
            0.0515832539520484587768,
            0.0528349467901165198621,
            0.0539054993352660639269,
            0.0547892105279628650322,
            0.0554814043565593639878,
            0.0559784365104763194076,
            0.0562776998312543012726,
            0.0563776283603847173877,
            0.0562776998312543012726,
            0.0559784365104763194076,
            0.0554814043565593639878,
            0.0547892105279628650322,
            0.0539054993352660639269,
            0.0528349467901165198621,
            0.0515832539520484587768,
            0.0501571393058995374137,
            0.0485643304066731987159,
            0.0468135549906280124026,
            0.0449145316536321974143,
            0.0428779600250077344929,
            0.0407155101169443189339,
            0.0384398102494555320386,
            0.0360644327807825726401,
            0.0336038771482077305417,
            0.0310735511116879648799,
            0.0284897547458335486125,
            0.0258696793272147469108,
            0.0232314466399102694433,
            0.0205942339159127111492,
            0.0179785515681282703329,
            0.0154067504665594978021,
            0.0129038001003512656260,
            0.0104982469096213218983,
            0.00822300795723592966926,
            0.00611550682211724633968,
            0.00421763044155885483908,
            0.00257904979468568827243,
            0.00126515655623006801137,
            0.000363221481845530659694
        };

        switch (n)
        {
            case 1:
                typeMethods.r8vec_copy(n, x01, ref result.x);
                typeMethods.r8vec_copy(n, w01, ref result.w);
                break;
            case 3:
                typeMethods.r8vec_copy(n, x03, ref result.x);
                typeMethods.r8vec_copy(n, w03, ref result.w);
                break;
            case 7:
                typeMethods.r8vec_copy(n, x07, ref result.x);
                typeMethods.r8vec_copy(n, w07, ref result.w);
                break;
            case 15:
                typeMethods.r8vec_copy(n, x15, ref result.x);
                typeMethods.r8vec_copy(n, w15, ref result.w);
                break;
            case 31:
                typeMethods.r8vec_copy(n, x31, ref result.x);
                typeMethods.r8vec_copy(n, w31, ref result.w);
                break;
            case 63:
                typeMethods.r8vec_copy(n, x63, ref result.x);
                typeMethods.r8vec_copy(n, w63, ref result.w);
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("KPU - Fatal error!");
                Console.WriteLine("  Illegal value of N.");
                return result;
        }

        //
        //  The rule as stored is for the interval [-1,+1].
        //  Adjust it to the interval [0,1].
        //
        QuadratureRule.rule_adjust(-1.0, +1.0, 0.0, 1.0, n, ref result.x, ref result.w);

        return result;
    }

    public static int kpu_order(int l)

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    KPU_ORDER computes the order of a KPU rule from the level.
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    08 December 2012
        //
        //  Author:
        //
        //    John Burkardt.
        //
        //  Parameters:
        //
        //    Input, int L, the level of the rule.  
        //    1 <= L <= 25
        //
        //    Output, int KPU_ORDER, the order of the rule.
        //
    {
        int n;

        switch (l)
        {
            case < 1:
                Console.WriteLine("");
                Console.WriteLine("KPU_ORDER - Fatal error!");
                Console.WriteLine("  1 <= L <= 25 required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
            case 1:
                n = 1;
                break;
            case <= 3:
                n = 3;
                break;
            case <= 6:
                n = 7;
                break;
            case <= 12:
                n = 15;
                break;
            case <= 24:
                n = 31;
                break;
            case <= 25:
                n = 63;
                break;
            default:
                Console.WriteLine("");
                Console.WriteLine("KPU_ORDER - Fatal error!");
                Console.WriteLine("  1 <= L <= 25 required.");
                Console.WriteLine("  Input L = " + l + "");
                return 1;
        }

        return n;
    }
}