using Burkardt.Types;

namespace Burkardt.Square;

public static partial class MinimalRule
{
    public static double[] smr10()

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    SMR10 returns the SMR rule of degree 10.
        //
        //  Discussion:
        //
        //    DEGREE: 10
        //    POINTS CARDINALITY: 22
        //    NORM INF MOMS. RESIDUAL: 3.88578e-16
        //    SUM NEGATIVE WEIGHTS: 0.00000e+00,
        // 
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    21 February 2018
        //
        //  Author:
        //
        //    Original MATLAB version by Mattia Festa, Alvise Sommariva,
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Mattia Festa, Alvise Sommariva,
        //    Computing almost minimal formulas on the square,
        //    Journal of Computational and Applied Mathematics,
        //    Volume 17, Number 236, November 2012, pages 4296-4302.
        //
        //  Parameters:
        //
        //    Output, double *SMR10[3*22], the requested rule.
        //
    {
        const int degree = 10;
        double[] xw =
        {
            9.406185571992117e-01, -3.188453596839293e-01, 1.198415853239125e-01,
            9.817119264047970e-01, 6.258661935323968e-01, 6.326927276111106e-02,
            8.117151060164873e-01, 9.246684242905354e-01, 8.868620221697536e-02,
            7.788254159831852e-01, 2.105273891482154e-01, 2.658711347712608e-01,
            6.476354842626755e-01, -6.474946981752544e-01, 2.305700455337005e-01,
            9.225481682574119e-01, -8.792348043990323e-01, 6.253794118755233e-02,
            1.142951736422380e-01, 9.492191314088700e-01, 1.186176720746597e-01,
            4.711392149070169e-01, 6.666473305982111e-01, 2.839584221827897e-01,
            3.507267260891899e-01, -1.844717206212197e-01, 3.881144740244089e-01,
            6.240243795898468e-01, -9.853833119314599e-01, 3.338712924707296e-02,
            -3.924748753960961e-01, 7.631114939243835e-01, 2.582793941034283e-01,
            -3.211002312038658e-02, 3.187935759364070e-01, 4.082419772615457e-01,
            -1.073322786510871e-01, -6.188661913929927e-01, 3.149887822123112e-01,
            2.065013461988724e-01, -9.119588710357345e-01, 1.346097738619806e-01,
            -7.529656324799602e-01, 9.707183739677747e-01, 5.911019515035110e-02,
            -7.605065507139738e-01, 3.663139167806791e-01, 2.604239768191683e-01,
            -4.732489884927658e-01, -1.655785251003833e-01, 3.717176493089616e-01,
            -5.089131904296067e-01, -9.215290755789827e-01, 1.333773119224012e-01,
            -9.538019223425510e-01, 7.551269206143554e-01, 7.180589876051692e-02,
            -9.663420836873585e-01, -1.043123255663638e-01, 9.794042948413186e-02,
            -8.103749226019182e-01, -6.115967830349249e-01, 2.001832062027751e-01,
            -9.577495916000752e-01, -9.262105001258389e-01, 3.446752558898364e-02
        };

        int order = square_minimal_rule_order(degree);
        double[] xw_copy = typeMethods.r8mat_copy_new(3, order, xw);

        return xw_copy;
    }
}