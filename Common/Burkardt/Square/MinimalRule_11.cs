using Burkardt.Types;

namespace Burkardt.Square;

public static partial class MinimalRule
{
    public static double[] smr11()

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    SMR11 returns the SMR rule of degree 11.
        //
        //  Discussion:
        //
        //    DEGREE: 11
        //    ROTATIONALLY INVARIANT: (X,Y),(-Y,X),(-X,-Y),(Y,-X).
        //    POINTS CARDINALITY: 24
        //    NORM INF MOMS. RESIDUAL: 8.88178e-16
        //    SUM NEGATIVE WEIGHTS: 0.00000e+00,
        // 
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    21 February 2018
        //
        //  Author:
        //
        //    Original MATLAB version by Mattia Festa, Alvise Sommariva,
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Mattia Festa, Alvise Sommariva,
        //    Computing almost minimal formulas on the square,
        //    Journal of Computational and Applied Mathematics,
        //    Volume 17, Number 236, November 2012, pages 4296-4302.
        //
        //  Parameters:
        //
        //    Output, double *SMR11[3*24], the requested rule.
        //
    {
        const int degree = 11;
        double[] xw =
        {
            -4.165807191202228e-02, 4.248472488486693e-01, 3.511587183982455e-01,
            3.156234329152542e-01, 8.125205483048132e-01, 2.117363499989486e-01,
            7.120019130753363e-01, 5.253202503645478e-01, 2.256260617288634e-01,
            6.980761045495677e-01, 9.826392235408555e-01, 4.802076335072379e-02,
            9.535395282015321e-01, 1.885861387186419e-01, 9.738677735866817e-02,
            9.394863828167369e-01, 8.257758359029640e-01, 6.607132916455061e-02,
            -4.248472488486693e-01, -4.165807191202228e-02, 3.511587183982455e-01,
            -8.125205483048132e-01, 3.156234329152542e-01, 2.117363499989486e-01,
            -5.253202503645478e-01, 7.120019130753363e-01, 2.256260617288634e-01,
            -9.826392235408555e-01, 6.980761045495677e-01, 4.802076335072379e-02,
            -1.885861387186419e-01, 9.535395282015321e-01, 9.738677735866817e-02,
            -8.257758359029640e-01, 9.394863828167369e-01, 6.607132916455061e-02,
            4.165807191202228e-02, -4.248472488486693e-01, 3.511587183982455e-01,
            -3.156234329152542e-01, -8.125205483048132e-01, 2.117363499989486e-01,
            -7.120019130753363e-01, -5.253202503645478e-01, 2.256260617288634e-01,
            -6.980761045495677e-01, -9.826392235408555e-01, 4.802076335072379e-02,
            -9.535395282015321e-01, -1.885861387186419e-01, 9.738677735866817e-02,
            -9.394863828167369e-01, -8.257758359029640e-01, 6.607132916455061e-02,
            4.248472488486693e-01, 4.165807191202228e-02, 3.511587183982455e-01,
            8.125205483048132e-01, -3.156234329152542e-01, 2.117363499989486e-01,
            5.253202503645478e-01, -7.120019130753363e-01, 2.256260617288634e-01,
            9.826392235408555e-01, -6.980761045495677e-01, 4.802076335072379e-02,
            1.885861387186419e-01, -9.535395282015321e-01, 9.738677735866817e-02,
            8.257758359029640e-01, -9.394863828167369e-01, 6.607132916455061e-02
        };

        int order = square_minimal_rule_order(degree);
        double[] xw_copy = typeMethods.r8mat_copy_new(3, order, xw);

        return xw_copy;
    }
}