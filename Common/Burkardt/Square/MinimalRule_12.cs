using Burkardt.Types;

namespace Burkardt.Square;

public static partial class MinimalRule
{
    public static double[] smr12()

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    SMR12 returns the SMR rule of degree 12.
        //
        //  Discussion:
        //
        //    DEGREE: 12
        //    POINTS CARDINALITY: 31
        //    NORM INF MOMS. RESIDUAL: 5.55112e-16
        //    SUM NEGATIVE WEIGHTS: 0.00000e+00,
        // 
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    21 February 2018
        //
        //  Author:
        //
        //    Original MATLAB version by Mattia Festa, Alvise Sommariva,
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Mattia Festa, Alvise Sommariva,
        //    Computing almost minimal formulas on the square,
        //    Journal of Computational and Applied Mathematics,
        //    Volume 17, Number 236, November 2012, pages 4296-4302.
        //
        //  Parameters:
        //
        //    Output, double *SMR12[3*31], the requested rule.
        //
    {
        const int degree = 12;
        double[] xw =
        {
            7.887961133518859e-01, 9.788423074444343e-01, 3.643740653079505e-02,
            9.636803326457559e-01, -8.325162377112404e-01, 4.156946367307449e-02,
            5.727054392308150e-01, 7.717261293782711e-01, 1.680361793533787e-01,
            9.634302613611325e-01, 8.254780463742046e-01, 4.273104217362153e-02,
            9.850208941660858e-01, 2.929038490713011e-03, 5.527116827932585e-02,
            8.590486289231106e-01, -4.568247023502062e-01, 1.528634492877730e-01,
            7.730732984501992e-01, -9.683129045193353e-01, 4.413124147353821e-02,
            -1.779670698164110e-01, 7.009187390097460e-01, 2.328494912954924e-01,
            8.543638116305748e-01, 4.518538584893645e-01, 1.556045127005831e-01,
            6.291273683568680e-01, -7.545283511153206e-03, 2.625512570459704e-01,
            5.528579662023739e-01, -7.445078276040368e-01, 1.822720395257231e-01,
            2.838402579450193e-01, 4.114855681818982e-01, 2.766169541326807e-01,
            -8.461631704059508e-02, 8.864609533086124e-02, 2.383849367209651e-01,
            2.425324152553718e-01, -3.742080386362673e-01, 2.920973373876344e-01,
            1.732349372327210e-01, -9.397208645575091e-01, 1.020918275656317e-01,
            1.711409536609614e-01, 9.405188030525048e-01, 1.014134103497821e-01,
            -4.125379277895744e-01, 5.932317296236497e-02, 1.455335918991387e-01,
            -2.114002132094871e-01, -2.840983635497378e-01, 7.946218537051837e-02,
            -4.914206209696642e-01, 9.453457692968009e-01, 8.467100517264473e-02,
            -6.078146688229159e-01, 4.486792064962008e-01, 2.211679207393056e-01,
            -5.774993705610445e-01, -3.758525621312278e-01, 2.131288659567110e-01,
            -4.943548938878011e-01, -9.487282033931176e-01, 8.106167025374129e-02,
            -8.307832892042354e-01, 8.056995002918920e-01, 1.095231158786915e-01,
            -8.780106307148161e-01, 1.661245295800410e-01, 9.555205419558256e-02,
            -9.855207994154948e-01, -5.172324935881427e-01, 4.485874655537044e-02,
            -1.843157675090382e-01, -7.106474367504330e-01, 2.242636308727417e-01,
            -9.639808262111604e-01, 9.935149440412500e-01, 1.153343223604792e-02,
            -9.905890478558095e-01, 5.280652625496880e-01, 4.024626264818196e-02,
            -8.720537162767097e-01, -1.329065631973914e-01, 1.058449657495581e-01,
            -9.263657835203469e-01, -9.372594643356640e-01, 3.401287490362680e-02,
            -7.769128911427001e-01, -7.339368334159078e-01, 1.242179600721695e-01
        };

        int order = square_minimal_rule_order(degree);
        double[] xw_copy = typeMethods.r8mat_copy_new(3, order, xw);

        return xw_copy;
    }
}