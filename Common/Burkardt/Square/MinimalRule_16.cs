using Burkardt.Types;

namespace Burkardt.Square;

public static partial class MinimalRule
{
    public static double[] smr16()

        //****************************************************************************80
        //
        //  Purpose:
        //
        //    SMR16 returns the SMR rule of degree 16.
        //
        //  Discussion:
        //
        //    DEGREE: 16
        //    POINTS CARDINALITY: 52
        //    NORM INF MOMS. RESIDUAL: 9.15934e-16
        //    SUM NEGATIVE WEIGHTS: 0.00000e+00,
        //
        //  Licensing:
        //
        //    This code is distributed under the GNU LGPL license.
        //
        //  Modified:
        //
        //    21 February 2018
        //
        //  Author:
        //
        //    Original MATLAB version by Mattia Festa, Alvise Sommariva,
        //    C++ version by John Burkardt.
        //
        //  Reference:
        //
        //    Mattia Festa, Alvise Sommariva,
        //    Computing almost minimal formulas on the square,
        //    Journal of Computational and Applied Mathematics,
        //    Volume 17, Number 236, November 2012, pages 4296-4302.
        //
        //  Parameters:
        //
        //    Output, double *SMR16[3*52], the requested rule.
        //
    {
        const int degree = 16;
        double[] xw =
        {
            9.849840927490825e-01, -8.331548011067518e-01, 1.148497840181236e-02,
            9.872657987157976e-01, 8.588448788294810e-01, 1.473194969200236e-02,
            9.793426944857834e-01, 3.488215241207180e-01, 3.098444037686296e-02,
            9.710730712462519e-01, -1.976275486943358e-01, 3.939075140298535e-02,
            9.543665314722640e-01, -6.214859681775430e-01, 3.181988181461071e-02,
            8.967156835567945e-01, 6.357233965740013e-01, 6.754726963166503e-02,
            8.560787402043915e-01, 9.300163636799799e-02, 9.806208102265382e-02,
            8.352602163787974e-01, -4.546303275105074e-01, 8.007156600306299e-02,
            9.242704749020406e-01, -9.624752146350085e-01, 1.773036206031470e-02,
            8.914637296434523e-01, 9.704982463181010e-01, 1.966130427988303e-02,
            7.225506553250621e-01, 8.352620376414029e-01, 7.379440929879094e-02,
            6.725198105909391e-01, 3.980674436765583e-01, 1.347645483339404e-01,
            6.371105617029685e-01, -1.999912055384129e-01, 1.423112416621634e-01,
            7.808910471981420e-01, -8.134492991124070e-01, 7.085421872868532e-02,
            6.337062775345687e-01, -9.719980099330250e-01, 2.925279318090791e-02,
            5.291062928070972e-01, 9.679384351925090e-01, 3.562931685878622e-02,
            4.244965002466626e-01, 6.479593280988540e-01, 1.310143500409354e-01,
            3.773110188906150e-01, 1.020856639775450e-01, 1.867695133142744e-01,
            5.192633407488266e-01, -6.187964471903282e-01, 1.329295627808754e-01,
            3.642312437714700e-01, -8.863235986829771e-01, 7.576971496593095e-02,
            5.561745660244605e-02, 9.824987512094673e-01, 2.458923517607215e-02,
            2.315339247267523e-01, 8.666994462444320e-01, 7.856108542290755e-02,
            7.921301678093465e-02, 3.983722019927857e-01, 1.821994092983056e-01,
            2.060553068006480e-01, -3.586293462932311e-01, 1.877843167547426e-01,
            5.968748053306436e-02, -7.377671587273356e-01, 1.194943798093123e-01,
            9.345890458174631e-02, -9.856937685796492e-01, 2.683866060217570e-02,
            -2.309174536279237e-01, 9.038233934314195e-01, 5.704293324973451e-02,
            -8.490129042248308e-02, 7.103616948287095e-01, 1.008414737624086e-01,
            -1.156391657288008e-01, -5.831278342511520e-02, 2.065290952798645e-01,
            -2.469994669672659e-01, -5.451953129096770e-01, 1.486152719982061e-01,
            -2.407569095414160e-01, -9.110001765460239e-01, 7.369448825579748e-02,
            -5.483869894552442e-01, -9.876593748951622e-01, 2.052629805335149e-02,
            -4.504247208566849e-01, 9.823752262299734e-01, 2.182431901411460e-02,
            -3.866081747635596e-01, 6.227238096470654e-01, 9.969926465444570e-02,
            -3.830201431115215e-01, 2.758592684399684e-01, 1.620659760964653e-01,
            -5.052430403406701e-01, -2.965505634060009e-01, 1.515331269600610e-01,
            -5.534470349649314e-01, -7.802045621704854e-01, 9.917678556230886e-02,
            -8.118615876869535e-01, -9.295671133984095e-01, 4.092795912351316e-02,
            -6.110904286470239e-01, 8.416598154470650e-01, 7.681751936941439e-02,
            -7.180850315887866e-01, 5.275124303877409e-01, 1.078772215341901e-01,
            -6.717184597177530e-01, 5.190959173969474e-02, 1.274953461648875e-01,
            -7.688067943153316e-01, -5.765647129796945e-01, 9.670064900592909e-02,
            -8.122178392749709e-01, 9.667410754993326e-01, 2.507418689814922e-02,
            -9.001198519620254e-01, 7.660124377216176e-01, 5.337920648061494e-02,
            -8.927917900428630e-01, 2.801343969829519e-01, 7.365567660310912e-02,
            -8.625316023871907e-01, -2.304828850740908e-01, 7.976422028192462e-02,
            -9.444379963884221e-01, -7.886904781685101e-01, 3.680993075145274e-02,
            -9.814383394418308e-01, 9.386107932617476e-01, 1.041932477487203e-02,
            -9.868302403965578e-01, 5.376625218147606e-01, 2.163454704946022e-02,
            -9.782564506674100e-01, -7.629524842176458e-03, 2.926520573014411e-02,
            -9.734724345230769e-01, -4.774981225500561e-01, 2.926793258824966e-02,
            -9.832450869161593e-01, -9.836383787047436e-01, 5.320699842671481e-03
        };

        int order = square_minimal_rule_order(degree);
        double[] xw_copy = typeMethods.r8mat_copy_new(3, order, xw);

        return xw_copy;
    }
}