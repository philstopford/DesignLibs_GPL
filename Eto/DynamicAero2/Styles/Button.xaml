<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:eto="clr-namespace:Eto.Wpf.Forms.Controls;assembly=Eto.Wpf"
                    xmlns:mwc="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
                    >
    <Style x:Key="BaseButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                        RecognizesAccessKey="True"
                        Margin="{TemplateBinding Padding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Focusable="False">
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Button.MouseOver.Background}" TargetName="border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Button.MouseOver.Border}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Button.Pressed.Background}" TargetName="border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Button.Pressed.Border}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true" >
                            <Setter Property="Background" Value="{DynamicResource Button.Checked.Background}" TargetName="border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Button.Checked.Border}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource Button.Disabled.Background}" TargetName="border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Button.Disabled.Border}" TargetName="border" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ToggleButton}"
       BasedOn="{StaticResource BaseButtonStyle}"
       TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true"/>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="false"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true"/>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type RepeatButton}"
       BasedOn="{StaticResource BaseButtonStyle}"
       TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled"
            Value="false"/>
    </Style>

    <Style x:Key="{x:Type Button}"
       BasedOn="{StaticResource BaseButtonStyle}"
       TargetType="{x:Type Button}"/>

    <Style x:Key="{x:Type eto:EtoButton}"
       BasedOn="{StaticResource BaseButtonStyle}"
       TargetType="{x:Type eto:EtoButton}"/>

    <Style x:Key="{x:Type eto:LinkButtonHandler}"
       BasedOn="{StaticResource BaseButtonStyle}"
       TargetType="{x:Type eto:LinkButtonHandler}"/>

    <Style x:Key="{x:Type eto:NumericStepperHandler}"
       BasedOn="{StaticResource BaseButtonStyle}"
       TargetType="{x:Type eto:NumericStepperHandler}"/>

    <Style x:Key="{x:Type mwc:DoubleUpDown}"
       BasedOn="{StaticResource BaseButtonStyle}"
       TargetType="{x:Type mwc:DoubleUpDown}"/>

</ResourceDictionary>